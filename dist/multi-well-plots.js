/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../node_modules/css-loader/dist/cjs.js!../node_modules/less-loader/dist/cjs.js!./multi-crossplot/style.less":
/*!*******************************************************************************************************************!*\
  !*** ../node_modules/css-loader/dist/cjs.js!../node_modules/less-loader/dist/cjs.js!./multi-crossplot/style.less ***!
  \*******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ \"../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.i, \"multi-crossplot {\\n  display: flex;\\n  height: 100%;\\n  flex-direction: column;\\n}\\nmulti-crossplot multi-well-crossplot {\\n  height: 100%;\\n  width: 100%;\\n}\\nmulti-crossplot input,\\nmulti-crossplot select {\\n  box-shadow: none;\\n}\\nmulti-crossplot ::-webkit-scrollbar-button:horizontal:increment {\\n  /* Right */\\n  background-image: none;\\n}\\nmulti-crossplot ::-webkit-scrollbar-button:horizontal:decrement {\\n  /* Left */\\n  background-image: none;\\n}\\nmulti-crossplot ::-webkit-scrollbar-button:vertical:increment {\\n  /* Down */\\n  background-image: none;\\n}\\nmulti-crossplot ::-webkit-scrollbar-button:vertical:decrement {\\n  /* Up */\\n  background-image: none;\\n}\\nmulti-crossplot .ui-select-match-text {\\n  text-align: right;\\n}\\nmulti-crossplot button.disable {\\n  color: #aaa;\\n  border-color: #aaa;\\n}\\nmulti-crossplot .main {\\n  display: flex;\\n  height: 100%;\\n  flex-direction: row;\\n}\\nmulti-crossplot ::-webkit-scrollbar {\\n  background: #f4f4f4;\\n  width: 5px;\\n  height: 5px;\\n}\\nmulti-crossplot ::-webkit-scrollbar-thumb {\\n  background-color: #dcdcdc;\\n}\\nmulti-crossplot .tab {\\n  display: flex;\\n  z-index: 1;\\n  color: #000;\\n  background: #fff;\\n  flex-basis: 40px;\\n}\\nmulti-crossplot .tab .tab-name {\\n  display: flex;\\n  align-items: center;\\n  padding: 11px 20px;\\n  cursor: pointer;\\n  transition: all 0.2s ease-in;\\n  border-right: 1px solid #d9d9d9;\\n  border-bottom: 2px solid #fff;\\n}\\nmulti-crossplot .tab .tab-name:hover {\\n  background: #fff;\\n  transition: all 0.2s ease-in;\\n}\\nmulti-crossplot .tab .tab-drop {\\n  display: flex;\\n  align-items: center;\\n  padding: 11px 20px;\\n  transition: all 0.2s ease-in;\\n}\\nmulti-crossplot .tab .active {\\n  color: #0077be;\\n  background: #fff;\\n  border-bottom: 2px solid #0077be;\\n}\\nmulti-crossplot .warning {\\n  display: none;\\n}\\nmulti-crossplot .show-warning {\\n  display: flex !important;\\n  align-items: center;\\n  background: #f47a7a;\\n  padding: 10px;\\n  height: 26px;\\n  color: #fff;\\n  border-radius: 2px;\\n  margin-top: 7px;\\n}\\n\", \"\"]);\n\n\n\n//# sourceURL=webpack:///./multi-crossplot/style.less?../node_modules/css-loader/dist/cjs.js!../node_modules/less-loader/dist/cjs.js");

/***/ }),

/***/ "../node_modules/css-loader/dist/cjs.js!../node_modules/less-loader/dist/cjs.js!./multi-histogram/style.less":
/*!*******************************************************************************************************************!*\
  !*** ../node_modules/css-loader/dist/cjs.js!../node_modules/less-loader/dist/cjs.js!./multi-histogram/style.less ***!
  \*******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ \"../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.i, \"multi-histogram {\\n  display: flex;\\n  height: 100%;\\n  flex-direction: column;\\n}\\nmulti-histogram multi-well-histogram {\\n  height: 100%;\\n}\\nmulti-histogram input,\\nmulti-histogram select {\\n  box-shadow: none;\\n}\\nmulti-histogram ::-webkit-scrollbar-button:horizontal:increment {\\n  /* Right */\\n  background-image: none;\\n}\\nmulti-histogram ::-webkit-scrollbar-button:horizontal:decrement {\\n  /* Left */\\n  background-image: none;\\n}\\nmulti-histogram ::-webkit-scrollbar-button:vertical:increment {\\n  /* Down */\\n  background-image: none;\\n}\\nmulti-histogram ::-webkit-scrollbar-button:vertical:decrement {\\n  /* Up */\\n  background-image: none;\\n}\\nmulti-histogram .ui-select-match-text {\\n  text-align: right;\\n}\\nmulti-histogram button.disable {\\n  color: #aaa;\\n  border-color: #aaa;\\n}\\nmulti-histogram .main {\\n  display: flex;\\n  height: 100%;\\n  flex-direction: column;\\n}\\nmulti-histogram ::-webkit-scrollbar {\\n  background: #f4f4f4;\\n  width: 5px;\\n  height: 5px;\\n}\\nmulti-histogram ::-webkit-scrollbar-thumb {\\n  background-color: #dcdcdc;\\n}\\nmulti-histogram .tab {\\n  display: flex;\\n  z-index: 1;\\n  color: #000;\\n  background: #fff;\\n  flex-basis: 40px;\\n}\\nmulti-histogram .tab .tab-name {\\n  display: flex;\\n  align-items: center;\\n  padding: 11px 20px;\\n  cursor: pointer;\\n  letter-spacing: 1px;\\n  transition: all 0.2s ease-in;\\n  border-right: 1px solid #d9d9d9;\\n  border-bottom: 2px solid #fff;\\n}\\nmulti-histogram .tab .tab-name:hover {\\n  background: #fff;\\n  transition: all 0.2s ease-in;\\n}\\nmulti-histogram .tab .tab-drop {\\n  display: flex;\\n  align-items: center;\\n  padding: 11px 20px;\\n  letter-spacing: 1px;\\n  transition: all 0.2s ease-in;\\n}\\nmulti-histogram .tab .active {\\n  color: #0077be;\\n  background: #fff;\\n  border-bottom: 2px solid #0077be;\\n}\\nmulti-histogram .warning {\\n  display: none;\\n}\\nmulti-histogram .show-warning {\\n  display: flex !important;\\n  align-items: center;\\n  background: #f47a7a;\\n  padding: 10px;\\n  height: 26px;\\n  color: #fff;\\n  border-radius: 2px;\\n  margin-top: 7px;\\n}\\n\", \"\"]);\n\n\n\n//# sourceURL=webpack:///./multi-histogram/style.less?../node_modules/css-loader/dist/cjs.js!../node_modules/less-loader/dist/cjs.js");

/***/ }),

/***/ "../node_modules/css-loader/dist/cjs.js!../node_modules/less-loader/dist/cjs.js!./multi-well-crossplot/style.less":
/*!************************************************************************************************************************!*\
  !*** ../node_modules/css-loader/dist/cjs.js!../node_modules/less-loader/dist/cjs.js!./multi-well-crossplot/style.less ***!
  \************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ \"../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.i, \"multi-well-crossplot {\\n  /* Rounded sliders */\\n  /* change style special of wi-base-treeview for basemap */\\n}\\nmulti-well-crossplot layer-collection circle {\\n  fill: #3b9fda09;\\n  stroke: #0a2d42;\\n  stroke-width: 1px;\\n  r: 7px;\\n}\\nmulti-well-crossplot .rg-bottom span,\\nmulti-well-crossplot .rg-top span {\\n  margin: 3px 0 0 -10px;\\n}\\nmulti-well-crossplot .axis-info {\\n  display: flex;\\n  padding: 15px;\\n  flex-direction: column;\\n  border-bottom: 1px solid #ccc;\\n}\\nmulti-well-crossplot .axis-info .axis-Z {\\n  flex: 1;\\n  display: flex;\\n  margin-bottom: 15px;\\n}\\nmulti-well-crossplot .axis-info .axis-Z .line {\\n  border-bottom: 2px solid #8e8e8e;\\n  position: absolute;\\n  width: calc(100% - 15px);\\n  margin-top: 10px;\\n}\\nmulti-well-crossplot .axis-info .axis-Z .axis {\\n  border: 1px solid #cccccc;\\n  color: #646464;\\n  background: #f4f4f4;\\n  font-size: 12px;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  margin-right: 15px;\\n  border-radius: 2px;\\n}\\nmulti-well-crossplot .axis-info .axis-Z .ellipsis-text {\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  white-space: nowrap;\\n}\\nmulti-well-crossplot .axis-info .axis-Z .label {\\n  padding: 0 10px;\\n  font-weight: bold;\\n}\\nmulti-well-crossplot .axis-info .axis-Z .axis-type {\\n  width: 100px;\\n  color: #0077be;\\n  height: 22px;\\n}\\nmulti-well-crossplot .axis-info .axis-Z .axis-min {\\n  /*width: 40px;*/\\n  color: #0077be;\\n  margin-right: -1px;\\n  height: 22px;\\n}\\nmulti-well-crossplot .axis-info .axis-Z .axis-line {\\n  flex: 1;\\n  margin-right: -1px;\\n  background: #fff;\\n}\\nmulti-well-crossplot .axis-info .axis-Z .axis-max {\\n  width: 80px;\\n  color: #0077be;\\n  height: 22px;\\n}\\nmulti-well-crossplot .red-color {\\n  color: #cc6d6d;\\n}\\nmulti-well-crossplot .blue-color {\\n  color: #0077be;\\n}\\nmulti-well-crossplot ::-webkit-scrollbar-button:horizontal:increment {\\n  /* Right */\\n  background-image: none;\\n}\\nmulti-well-crossplot ::-webkit-scrollbar-button:horizontal:decrement {\\n  /* Left */\\n  background-image: none;\\n}\\nmulti-well-crossplot ::-webkit-scrollbar-button:vertical:increment {\\n  /* Down */\\n  background-image: none;\\n}\\nmulti-well-crossplot ::-webkit-scrollbar-button:vertical:decrement {\\n  /* Up */\\n  background-image: none;\\n}\\nmulti-well-crossplot .list-polygon {\\n  display: flex;\\n  align-items: center;\\n  justify-content: space-between;\\n  margin-bottom: 15px;\\n  border-radius: 2px;\\n  border: 1px solid #ddd;\\n  transition: all 0.2s ease-in;\\n}\\nmulti-well-crossplot .list-polygon .button-list-polygon {\\n  cursor: pointer;\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  padding: 12px;\\n  border-left: 1px solid #ccc;\\n}\\nmulti-well-crossplot .list-polygon .button-list-polygon:hover {\\n  background: #f4f4f4;\\n  transition: all ease-in 0.3s;\\n}\\nmulti-well-crossplot .add-polygon {\\n  width: 20px;\\n  height: 20px;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  border: 1px solid #ccc;\\n  border-radius: 50%;\\n  cursor: pointer;\\n}\\nmulti-well-crossplot .add-polygon:hover {\\n  border-color: #0077be;\\n  color: #0077be;\\n  transition: all ease-in 0.3s;\\n}\\nmulti-well-crossplot .disable-node-caret .node-caret {\\n  display: none;\\n}\\nmulti-well-crossplot .disable-node-caret wi-tree-node-virtual > div {\\n  padding-left: 13px;\\n}\\nmulti-well-crossplot .switch-label {\\n  display: flex;\\n  align-items: center;\\n  justify-content: space-between;\\n  color: #666;\\n  font-size: 12px;\\n}\\nmulti-well-crossplot .switch-label > label {\\n  margin-bottom: 0;\\n}\\nmulti-well-crossplot .switch {\\n  position: relative;\\n  display: inline-block;\\n  width: 35px;\\n  height: 16px;\\n  margin-left: 10px;\\n}\\nmulti-well-crossplot .switch input {\\n  opacity: 0;\\n  width: 0;\\n  height: 0;\\n}\\nmulti-well-crossplot .slider {\\n  position: absolute;\\n  cursor: pointer;\\n  top: 0;\\n  left: 0;\\n  right: 0;\\n  bottom: 0;\\n  background-color: #ccc;\\n  -webkit-transition: 0.2s;\\n  transition: 0.2s;\\n}\\nmulti-well-crossplot .slider:before {\\n  position: absolute;\\n  content: \\\"\\\";\\n  height: 10px;\\n  width: 10px;\\n  left: 3px;\\n  bottom: 3px;\\n  background-color: white;\\n  -webkit-transition: 0.2s;\\n  transition: 0.2s;\\n}\\nmulti-well-crossplot input:checked + .slider {\\n  background-color: #2196F3;\\n}\\nmulti-well-crossplot input:focus + .slider {\\n  box-shadow: 0 0 1px #2196F3;\\n}\\nmulti-well-crossplot input:checked + .slider:before {\\n  -webkit-transform: translateX(18px);\\n  -ms-transform: translateX(18px);\\n  transform: translateX(18px);\\n}\\nmulti-well-crossplot .slider.round {\\n  border-radius: 34px;\\n}\\nmulti-well-crossplot .slider.round:before {\\n  border-radius: 50%;\\n}\\nmulti-well-crossplot input,\\nmulti-well-crossplot select {\\n  box-shadow: none;\\n}\\nmulti-well-crossplot wi-tree-view div input,\\nmulti-well-crossplot wi-tree-view-virtual div input {\\n  width: 100%;\\n  line-height: 1.4;\\n  padding: 10px 10px 10px 14px;\\n  border: none;\\n  border-bottom: 1px solid #f0f0f0;\\n  outline: none;\\n  box-sizing: border-box;\\n}\\nmulti-well-crossplot wi-tree-view div input::placeholder,\\nmulti-well-crossplot wi-tree-view-virtual div input::placeholder {\\n  color: #cecece;\\n}\\nmulti-well-crossplot wi-tree-node .node-caret,\\nmulti-well-crossplot wi-tree-node-virtual .node-caret,\\nmulti-well-crossplot wi-tree-node .node-label,\\nmulti-well-crossplot wi-tree-node-virtual .node-label,\\nmulti-well-crossplot wi-tree-node .node-icon,\\nmulti-well-crossplot wi-tree-node-virtual .node-icon {\\n  display: flex;\\n  padding-right: 10px;\\n  font-size: 12px;\\n}\\nmulti-well-crossplot wi-tree-node .node-caret,\\nmulti-well-crossplot wi-tree-node-virtual .node-caret {\\n  color: #cccbcb;\\n  font-size: 14px;\\n  cursor: pointer;\\n  width: 16px;\\n}\\nmulti-well-crossplot wi-tree-node .node-content.search-mode > div,\\nmulti-well-crossplot wi-tree-node-virtual .node-content.search-mode > div {\\n  opacity: 1;\\n}\\nmulti-well-crossplot wi-tree-node .node-content,\\nmulti-well-crossplot wi-tree-node-virtual .node-content,\\nmulti-well-crossplot wi-tree-node .node-content::after,\\nmulti-well-crossplot wi-tree-node-virtual .node-content::after {\\n  line-height: 3em;\\n}\\nmulti-well-crossplot segment-layer svg.edit-point,\\nmulti-well-crossplot polygon-layer svg.edit-point {\\n  background-color: rgba(185, 185, 185, 0);\\n  cursor: crosshair;\\n  pointer-events: all;\\n  z-index: 2;\\n}\\nmulti-well-crossplot wi-table-view div.cell {\\n  display: table-cell;\\n  padding: 7px 10px;\\n  border-right: 1px solid #d4d4d4;\\n  border-bottom: 1px solid #d4d4d4;\\n  cursor: default;\\n  position: relative;\\n  border-top: none;\\n  border-left: none;\\n}\\nmulti-well-crossplot wi-table-view div.table {\\n  margin-top: 0;\\n  border-radius: 2px;\\n  border-top: 1px solid #ccc;\\n  border-left: 1px solid #ccc;\\n  border-bottom: none;\\n  border-right: none;\\n}\\nmulti-well-crossplot editable div.my-content {\\n  float: left;\\n}\\nmulti-well-crossplot wi-dropdown-list:focus {\\n  outline: none !important;\\n}\\nmulti-well-crossplot wi-dropdown-list .ui-select-bootstrap > .ui-select-match > .btn {\\n  border: none;\\n  box-shadow: none;\\n  outline: none;\\n  display: flex;\\n  align-items: center;\\n  font-size: 12px;\\n}\\nmulti-well-crossplot wi-dropdown-list .btn-default:active:focus {\\n  background-color: #fff;\\n}\\nmulti-well-crossplot wi-dropdown-list .btn-default.active,\\nmulti-well-crossplot wi-dropdown-list .btn-default:active,\\nmulti-well-crossplot wi-dropdown-list .open > .dropdown-toggle.btn-default {\\n  color: #333;\\n  background-color: #fff;\\n  background-image: none;\\n  border-color: #adadad;\\n}\\nmulti-well-crossplot wi-dropdown-list .btn-default.focus,\\nmulti-well-crossplot wi-dropdown-list .btn-default:focus {\\n  color: #333;\\n  background-color: #fff;\\n  border-color: #fff;\\n}\\nmulti-well-crossplot wi-dropdown-list .btn-default-focus {\\n  box-shadow: none;\\n  outline: none;\\n}\\nmulti-well-crossplot wi-dropdown-list .form-control {\\n  border: none;\\n}\\nmulti-well-crossplot wi-dropdown-list :focus {\\n  outline: none;\\n}\\nmulti-well-crossplot wi-dropdown-list .form-control:focus {\\n  border: none;\\n  box-shadow: none;\\n  outline: none;\\n}\\nmulti-well-crossplot wi-dropdown-list .btn-default:hover {\\n  color: #333;\\n  background-color: #fff;\\n  border-color: #fff;\\n}\\nmulti-well-crossplot side-bar > div div.content {\\n  overflow-x: hidden;\\n  height: 100%;\\n  display: flex;\\n  overflow-y: auto;\\n  /* padding-left: 15px; */\\n  flex-direction: row;\\n}\\nmulti-well-crossplot wi-droppable {\\n  height: 100%;\\n}\\nmulti-well-crossplot wi-tree-node .node-caret,\\nmulti-well-crossplot wi-tree-node .node-label,\\nmulti-well-crossplot wi-tree-node .node-icon {\\n  display: flex;\\n  padding-right: 10px;\\n  font-size: 12px;\\n}\\nmulti-well-crossplot wi-tree-node .node-caret {\\n  color: #cccbcb;\\n  font-size: 14px;\\n  cursor: pointer;\\n  width: 16px;\\n}\\nmulti-well-crossplot wi-tree-node .node-content.search-mode > div {\\n  opacity: 1;\\n}\\nmulti-well-crossplot wi-tree-node .node-content,\\nmulti-well-crossplot wi-tree-node .node-content::after {\\n  line-height: 3em;\\n}\\nmulti-well-crossplot .ui-select-match-text {\\n  text-align: right;\\n}\\nmulti-well-crossplot button.disable {\\n  color: #aaa;\\n  border-color: #aaa;\\n}\\nmulti-well-crossplot .active {\\n  background: #f4f4f4;\\n  color: #0077be;\\n  border: 1px solid #0077be;\\n  transition: all 0.2s ease-in;\\n}\\nmulti-well-crossplot .fn-button {\\n  border: 1px solid #d9d9d9;\\n  font-size: 10px;\\n  border-radius: 2px;\\n  background: #fff;\\n  padding: 6px 12px 5px 12px;\\n  margin-right: 15px;\\n  line-height: 1;\\n  font-weight: bold;\\n  cursor: pointer;\\n  transition: all 0.2s ease-in;\\n}\\nmulti-well-crossplot .fn-button:hover {\\n  transition: all 0.2s ease-in;\\n  border: 1px solid #1962a7;\\n  color: #1962a7;\\n  background: #fff;\\n}\\nmulti-well-crossplot .main {\\n  display: flex;\\n  height: 100%;\\n  flex-direction: row;\\n}\\nmulti-well-crossplot .main .main-toolbar {\\n  flex-basis: 44px;\\n  background: #0074c5;\\n  display: flex;\\n  align-items: center;\\n  position: relative;\\n}\\nmulti-well-crossplot .main .main-toolbar .menu-item {\\n  margin: 0 15px;\\n  color: #fff;\\n  display: flex;\\n  align-items: center;\\n  cursor: pointer;\\n}\\nmulti-well-crossplot .main .main-toolbar .menu-item .select-proj4 {\\n  box-shadow: none;\\n  border: none;\\n  border-radius: 0;\\n  font-size: 12px;\\n  color: #fff;\\n  background: none;\\n}\\nmulti-well-crossplot .main .main-toolbar .menu-item .select-proj4:focus {\\n  border-color: none;\\n  outline: none;\\n  -webkit-box-shadow: none;\\n  box-shadow: none;\\n}\\nmulti-well-crossplot .main .statistic-table {\\n  flex-basis: 200px;\\n  margin: 15px 15px;\\n  position: relative;\\n  height: 20%;\\n  max-height: 64%;\\n}\\nmulti-well-crossplot .main .main-body {\\n  width: 100%;\\n  display: flex;\\n  overflow-x: auto;\\n  overflow-y: hidden;\\n  position: relative;\\n  flex-direction: column;\\n}\\nmulti-well-crossplot .main .main-body .border-style {\\n  border: 1px solid #eee;\\n  border-top-right-radius: 3px;\\n  border-top-left-radius: 3px;\\n}\\nmulti-well-crossplot .main .main-body .main-body-left {\\n  display: flex;\\n  z-index: 1;\\n  height: calc(100%);\\n}\\nmulti-well-crossplot .main .main-body .main-body-left .input-search-list-view {\\n  background: #fff;\\n  width: 100%;\\n  height: 44px;\\n  border: 1px solid #ffffff4a;\\n  border-bottom: 1px solid #eaeaea;\\n  padding: 10px 20px 10px 15px;\\n  font-weight: bold;\\n}\\nmulti-well-crossplot .main .main-body .main-body-left ::-webkit-input-placeholder {\\n  opacity: 0.5;\\n  color: rgba(0, 0, 0, 0.253);\\n  /* font-weight: 100; */\\n}\\nmulti-well-crossplot .main .main-body .main-body-left :focus::-webkit-input-placeholder {\\n  opacity: 0.5;\\n  color: rgba(0, 0, 0, 0.253);\\n  /* font-weight: 100; */\\n}\\nmulti-well-crossplot .main .main-body .main-body-left .input-search-list-view:focus {\\n  outline: none;\\n}\\nmulti-well-crossplot .main .main-body .main-body-center {\\n  flex: 1;\\n  display: flex;\\n  height: 100%;\\n  position: relative;\\n  flex-direction: column;\\n}\\nmulti-well-crossplot .main .button-update {\\n  background: #0077be;\\n  color: #fff;\\n  font-weight: bold;\\n  flex: 1;\\n  padding: 10px;\\n  text-align: center;\\n  margin: 9px 15px 15px 15px;\\n  border-radius: 2px;\\n  transition: all 0.2s ease-in;\\n  cursor: pointer;\\n}\\nmulti-well-crossplot .main .button-update:hover {\\n  background: #1ba0ec;\\n  transition: all 0.5s;\\n}\\nmulti-well-crossplot .main .disabled-click {\\n  pointer-events: none;\\n  opacity: 0.2;\\n}\\nmulti-well-crossplot .main .label-list-view {\\n  font-weight: bold;\\n  background: #fff;\\n  display: flex;\\n  justify-content: space-between;\\n  font-weight: 400;\\n  right: 0;\\n  position: sticky;\\n}\\nmulti-well-crossplot .main .label-info-image {\\n  background: #fff;\\n  min-width: 99px;\\n  display: flex;\\n  align-items: center;\\n  border-radius: 3px;\\n  padding: 5px 10px;\\n  margin-right: 15px;\\n  justify-content: space-between;\\n}\\nmulti-well-crossplot .main .button-td {\\n  cursor: pointer;\\n  background: #f4f4f4;\\n  padding: 3px 10px;\\n  border-radius: 2px;\\n  border: 1px solid #e8e8e8;\\n}\\nmulti-well-crossplot .main .button-td:hover {\\n  background: #87c1ff;\\n  color: #fff;\\n}\\nmulti-well-crossplot .main .header-icon {\\n  margin-right: 15px;\\n  cursor: pointer;\\n  width: 10px;\\n}\\nmulti-well-crossplot .main .label-button {\\n  float: right;\\n  font-size: 115%;\\n  color: #bbbbbb;\\n  margin: 2px 5px 0 15px;\\n  pointer-events: none;\\n}\\nmulti-well-crossplot .main .button-with-label-layer {\\n  cursor: pointer;\\n  background: #f4f4f4;\\n  font-size: 10px;\\n  padding: 5px 7px;\\n  margin-left: 5px;\\n  border: 1px solid #e4e4e4;\\n  border-radius: 2px;\\n  flex: 1;\\n  text-align: center;\\n  transition: all 0.2s ease-in;\\n}\\nmulti-well-crossplot .main .button-with-label-layer:hover {\\n  background: #fff;\\n  color: #0077be;\\n  border: 1px solid #0077be;\\n  transition: all 0.2s ease-in;\\n}\\nmulti-well-crossplot .main .button-with-label {\\n  cursor: pointer;\\n  background: #f4f4f4;\\n  font-size: 10px;\\n  padding: 5px 10px;\\n  border: 1px solid #f4f4f4;\\n  border-radius: 20px;\\n  transition: all 0.2s ease-in;\\n}\\nmulti-well-crossplot .main .button-with-label:hover {\\n  border: 1px solid #0077be;\\n}\\nmulti-well-crossplot .main .button-with-label.active {\\n  background: #f4f4f4;\\n  color: #0077be;\\n  border: 1px solid #0077be;\\n  transition: all 0.2s ease-in;\\n}\\nmulti-well-crossplot .main .tab-with-label {\\n  cursor: pointer;\\n  color: #cacaca;\\n  transition: all 0.2s ease-in;\\n  margin: 0px 10px;\\n  white-space: nowrap;\\n  font-weight: bold;\\n}\\nmulti-well-crossplot .main .tab-with-label:hover {\\n  color: #0077be;\\n}\\nmulti-well-crossplot .main .tab-with-label.active {\\n  color: #0077be;\\n  transition: all 0.2s ease-in;\\n}\\nmulti-well-crossplot .main .select-table-header {\\n  border: 1px solid #eee;\\n  background: #f4f4f4;\\n  padding: 5px 8px;\\n  margin: 0 8px 8px 0;\\n  cursor: pointer;\\n  border-radius: 2px;\\n  min-width: 75px;\\n  display: flex;\\n  justify-content: center;\\n}\\nmulti-well-crossplot .main .select-table-header.active {\\n  color: #0077be;\\n  border: 1px solid #0077be;\\n  transition: all 0.2s ease-in;\\n}\\nmulti-well-crossplot .main .label-option-sidebar {\\n  font-weight: bold;\\n  font-size: 12px;\\n  color: #646464;\\n  background: #fff;\\n  padding: 15px;\\n}\\nmulti-well-crossplot .main .selection-sidebar {\\n  border: 1px solid #c7c7c7;\\n  border-radius: 2px;\\n  padding: 2px 10px;\\n  align-items: center;\\n  display: flex;\\n  transition: all 0.2s ease-in;\\n}\\nmulti-well-crossplot .main .selection-sidebar:hover {\\n  border: 1px solid #0077be;\\n}\\nmulti-well-crossplot .main .selection-sidebar > input:focus {\\n  outline: none;\\n}\\nmulti-well-crossplot .main .input-suggestions {\\n  margin-left: 10px;\\n  border: none;\\n  flex: 1;\\n  color: #0077be;\\n  text-align: right;\\n}\\nmulti-well-crossplot .axis-bar {\\n  background: #fff;\\n  border-radius: 2px;\\n  border: 1px solid #dbdbdb87;\\n  font-size: 10px;\\n  display: flex;\\n  flex: 1;\\n  align-items: center;\\n  padding: 10px 10px;\\n  transition: all 0.2s ease-in;\\n}\\nmulti-well-crossplot .axis-bar:hover {\\n  border: 1px solid #0077be;\\n}\\nmulti-well-crossplot .axis-bar.selected {\\n  font-weight: bold;\\n  color: #0077be;\\n}\\nmulti-well-crossplot .axis-bar::after {\\n  content: \\\"2r\\\";\\n  color: transparent;\\n  display: block;\\n  top: 0;\\n  width: 4px;\\n  right: 0;\\n}\\nmulti-well-crossplot .bottom-add {\\n  background: #f4f4f4;\\n  padding: 10px;\\n  border-radius: 2px;\\n  text-align: center;\\n  margin: 15px 15px 0 15px;\\n  cursor: pointer;\\n  transition: all 0.2s ease-in;\\n}\\nmulti-well-crossplot .bottom-add:hover {\\n  background: #e7e7e7;\\n  transition: all 0.2s ease-in;\\n}\\nmulti-well-crossplot .list-formular {\\n  padding: 0 5px 0 15px;\\n  margin-bottom: 15px;\\n  display: flex;\\n  border-radius: 2px;\\n  border: 1px solid #ddd;\\n  transition: all 0.2s ease-in;\\n}\\nmulti-well-crossplot .list-formular:hover {\\n  border: 1px solid #0077be;\\n}\\nmulti-well-crossplot .delete-button {\\n  padding: 10px;\\n  cursor: pointer;\\n  font-size: 15px;\\n  color: #aaa;\\n  align-items: center;\\n  border: none;\\n  display: flex;\\n}\\nmulti-well-crossplot ::-webkit-scrollbar {\\n  background: #fff;\\n  width: 5px;\\n}\\nmulti-well-crossplot ::-webkit-scrollbar-thumb {\\n  background-color: #ccc;\\n}\\nmulti-well-crossplot .fix-header-table {\\n  overflow-y: auto;\\n  display: flex;\\n  flex: 1;\\n}\\nmulti-well-crossplot .fix-header-table th {\\n  position: sticky;\\n  top: 0;\\n}\\nmulti-well-crossplot .rectangle {\\n  border: 0.5px solid #a7a7a7;\\n  width: 12px;\\n  height: 12px;\\n  border-radius: 11px;\\n  background: #0077be;\\n}\\nmulti-well-crossplot table {\\n  border-collapse: collapse;\\n  table-layout: fixed;\\n  width: 100%;\\n  user-select: none;\\n}\\nmulti-well-crossplot table th {\\n  position: sticky;\\n  top: 0;\\n}\\nmulti-well-crossplot thead {\\n  border-bottom: 1px solid #ccc;\\n}\\nmulti-well-crossplot td,\\nmulti-well-crossplot th {\\n  border-bottom: 1px solid #f0f0f0;\\n  border-right: 1px solid #f0f0f0;\\n  padding-top: 10px;\\n  padding-bottom: 9px;\\n  padding-left: 14px;\\n  overflow: hidden;\\n}\\nmulti-well-crossplot tr {\\n  border-right: 4px solid #fff;\\n}\\nmulti-well-crossplot tr.updated {\\n  background-color: #c2eaff70;\\n}\\nmulti-well-crossplot tr.created {\\n  background-color: #abeaab29;\\n}\\nmulti-well-crossplot tr.deleted {\\n  background-color: #f4f4f4;\\n  pointer-events: none;\\n  color: #d8d3d3;\\n}\\nmulti-well-crossplot tr:hover {\\n  border-right: 4px solid #0077be;\\n  background: #f9f9f9;\\n}\\nmulti-well-crossplot th {\\n  padding-top: 9px;\\n  padding-bottom: 10px;\\n  text-align: left;\\n  background-color: #ffffff;\\n  color: #0077be;\\n}\\nmulti-well-crossplot ::placeholder {\\n  /* Chrome, Firefox, Opera, Safari 10.1+ */\\n  color: #9e9e9e;\\n  opacity: 1;\\n  /* Firefox */\\n}\\n\", \"\"]);\n\n\n\n//# sourceURL=webpack:///./multi-well-crossplot/style.less?../node_modules/css-loader/dist/cjs.js!../node_modules/less-loader/dist/cjs.js");

/***/ }),

/***/ "../node_modules/css-loader/dist/cjs.js!../node_modules/less-loader/dist/cjs.js!./multi-well-histogram/style.less":
/*!************************************************************************************************************************!*\
  !*** ../node_modules/css-loader/dist/cjs.js!../node_modules/less-loader/dist/cjs.js!./multi-well-histogram/style.less ***!
  \************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ \"../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.i, \"multi-well-histogram {\\n  /* Rounded sliders */\\n  /* change style special of wi-base-treeview for basemap */\\n}\\nmulti-well-histogram input,\\nmulti-well-histogram select {\\n  box-shadow: none;\\n}\\nmulti-well-histogram .red-color {\\n  color: #cc6d6d;\\n}\\nmulti-well-histogram .blue-color {\\n  color: #0077be;\\n}\\nmulti-well-histogram ::-webkit-scrollbar-button:horizontal:increment {\\n  /* Right */\\n  background-image: none;\\n}\\nmulti-well-histogram ::-webkit-scrollbar-button:horizontal:decrement {\\n  /* Left */\\n  background-image: none;\\n}\\nmulti-well-histogram ::-webkit-scrollbar-button:vertical:increment {\\n  /* Down */\\n  background-image: none;\\n}\\nmulti-well-histogram ::-webkit-scrollbar-button:vertical:decrement {\\n  /* Up */\\n  background-image: none;\\n}\\nmulti-well-histogram .disable-node-caret .node-caret {\\n  display: none;\\n}\\nmulti-well-histogram .disable-node-caret wi-tree-node-virtual > div {\\n  padding-left: 13px;\\n}\\nmulti-well-histogram .switch-label {\\n  display: flex;\\n  align-items: center;\\n  justify-content: space-between;\\n  color: #666;\\n  font-size: 12px;\\n}\\nmulti-well-histogram .switch-label > label {\\n  margin-bottom: 0;\\n}\\nmulti-well-histogram .switch {\\n  position: relative;\\n  display: inline-block;\\n  width: 35px;\\n  height: 16px;\\n  margin-left: 10px;\\n}\\nmulti-well-histogram .switch input {\\n  opacity: 0;\\n  width: 0;\\n  height: 0;\\n}\\nmulti-well-histogram .slider {\\n  position: absolute;\\n  cursor: pointer;\\n  top: 0;\\n  left: 0;\\n  right: 0;\\n  bottom: 0;\\n  background-color: #ccc;\\n  -webkit-transition: 0.2s;\\n  transition: 0.2s;\\n}\\nmulti-well-histogram .slider:before {\\n  position: absolute;\\n  content: \\\"\\\";\\n  height: 10px;\\n  width: 10px;\\n  left: 3px;\\n  bottom: 3px;\\n  background-color: white;\\n  -webkit-transition: 0.2s;\\n  transition: 0.2s;\\n}\\nmulti-well-histogram input:checked + .slider {\\n  background-color: #2196F3;\\n}\\nmulti-well-histogram input:focus + .slider {\\n  box-shadow: 0 0 1px #2196F3;\\n}\\nmulti-well-histogram input:checked + .slider:before {\\n  -webkit-transform: translateX(18px);\\n  -ms-transform: translateX(18px);\\n  transform: translateX(18px);\\n}\\nmulti-well-histogram .slider.round {\\n  border-radius: 34px;\\n}\\nmulti-well-histogram .slider.round:before {\\n  border-radius: 50%;\\n}\\nmulti-well-histogram wi-tree-view div input,\\nmulti-well-histogram wi-tree-view-virtual div input {\\n  width: 100%;\\n  line-height: 1.4;\\n  padding: 10px 10px 10px 14px;\\n  border: none;\\n  border-bottom: 1px solid #f0f0f0;\\n  outline: none;\\n  box-sizing: border-box;\\n}\\nmulti-well-histogram wi-tree-view div input::placeholder,\\nmulti-well-histogram wi-tree-view-virtual div input::placeholder {\\n  color: #cecece;\\n}\\nmulti-well-histogram wi-tree-node .node-content.selected,\\nmulti-well-histogram wi-tree-node-virtual .node-content.selected {\\n  background: linear-gradient(to left, #e4e4e4, #fff);\\n  font-weight: bold;\\n}\\nmulti-well-histogram wi-table-view div.cell {\\n  display: table-cell;\\n  padding: 7px 10px;\\n  border-right: 1px solid #d4d4d4;\\n  border-bottom: 1px solid #d4d4d4;\\n  cursor: default;\\n  position: relative;\\n  border-top: none;\\n  border-left: none;\\n}\\nmulti-well-histogram wi-table-view div.table {\\n  margin-top: 0;\\n}\\nmulti-well-histogram wi-dropdown-list:focus {\\n  outline: none !important;\\n}\\nmulti-well-histogram wi-dropdown-list .ui-select-bootstrap > .ui-select-match > .btn {\\n  border: none;\\n  box-shadow: none;\\n  outline: none;\\n  display: flex;\\n  align-items: center;\\n  font-size: 12px;\\n}\\nmulti-well-histogram wi-dropdown-list .btn-default:active:focus {\\n  background-color: #fff;\\n}\\nmulti-well-histogram wi-dropdown-list .btn-default.active,\\nmulti-well-histogram wi-dropdown-list .btn-default:active,\\nmulti-well-histogram wi-dropdown-list .open > .dropdown-toggle.btn-default {\\n  color: #333;\\n  background-color: #fff;\\n  background-image: none;\\n  border-color: #adadad;\\n}\\nmulti-well-histogram wi-dropdown-list .btn-default.focus,\\nmulti-well-histogram wi-dropdown-list .btn-default:focus {\\n  color: #333;\\n  background-color: #fff;\\n  border-color: #fff;\\n}\\nmulti-well-histogram wi-dropdown-list .form-control {\\n  border: none;\\n}\\nmulti-well-histogram wi-dropdown-list :focus {\\n  outline: none;\\n}\\nmulti-well-histogram wi-dropdown-list .form-control:focus {\\n  border: none;\\n  box-shadow: none;\\n}\\nmulti-well-histogram wi-dropdown-list .btn-default:hover {\\n  color: #333;\\n  background-color: #fff;\\n  border-color: #fff;\\n}\\nmulti-well-histogram side-bar > div div.content {\\n  overflow-x: hidden;\\n  height: 100%;\\n  display: flex;\\n  overflow-y: auto;\\n  /* padding-left: 15px; */\\n  flex-direction: row;\\n}\\nmulti-well-histogram side-bar > div div.content wi-tree-node .node-content.search-mode,\\nmulti-well-histogram side-bar > div div.content wi-tree-node-virtual .node-content.search-mode {\\n  color: #000;\\n}\\nmulti-well-histogram wi-droppable {\\n  height: 100%;\\n}\\nmulti-well-histogram wi-tree-node .node-caret,\\nmulti-well-histogram wi-tree-node-virtual .node-caret,\\nmulti-well-histogram wi-tree-node .node-label,\\nmulti-well-histogram wi-tree-node-virtual .node-label,\\nmulti-well-histogram wi-tree-node .node-icon,\\nmulti-well-histogram wi-tree-node-virtual .node-icon {\\n  display: flex;\\n  padding-right: 10px;\\n  font-size: 12px;\\n}\\nmulti-well-histogram wi-tree-node .node-caret,\\nmulti-well-histogram wi-tree-node-virtual .node-caret {\\n  color: #cccbcb;\\n  font-size: 14px;\\n  cursor: pointer;\\n  width: 16px;\\n}\\nmulti-well-histogram wi-tree-node .node-content.search-mode > div,\\nmulti-well-histogram wi-tree-node-virtual .node-content.search-mode > div {\\n  opacity: 1;\\n}\\nmulti-well-histogram wi-tree-node .node-content,\\nmulti-well-histogram wi-tree-node-virtual .node-content,\\nmulti-well-histogram wi-tree-node .node-content::after,\\nmulti-well-histogram wi-tree-node-virtual .node-content::after {\\n  line-height: 3em;\\n}\\nmulti-well-histogram .ui-select-match-text {\\n  text-align: right;\\n}\\nmulti-well-histogram button.disable {\\n  color: #aaa;\\n  border-color: #aaa;\\n}\\nmulti-well-histogram .fn-button {\\n  border: 1px solid #d9d9d9;\\n  font-size: 10px;\\n  border-radius: 2px;\\n  background: #fff;\\n  padding: 6px 12px 5px 12px;\\n  margin-right: 15px;\\n  line-height: 1;\\n  font-weight: bold;\\n  cursor: pointer;\\n  transition: all 0.2s ease-in;\\n}\\nmulti-well-histogram .fn-button:hover {\\n  transition: all 0.2s ease-in;\\n  border: 1px solid #1962a7;\\n  color: #1962a7;\\n  background: #fff;\\n}\\nmulti-well-histogram .main {\\n  display: flex;\\n  height: 100%;\\n  flex-direction: column;\\n}\\nmulti-well-histogram .main .main-toolbar {\\n  flex-basis: 44px;\\n  background: #0074c5;\\n  display: flex;\\n  align-items: center;\\n  position: relative;\\n}\\nmulti-well-histogram .main .main-toolbar .menu-item {\\n  margin: 0 15px;\\n  color: #fff;\\n  display: flex;\\n  align-items: center;\\n  cursor: pointer;\\n}\\nmulti-well-histogram .main .main-toolbar .menu-item .select-proj4 {\\n  box-shadow: none;\\n  border: none;\\n  border-radius: 0;\\n  font-size: 12px;\\n  color: #fff;\\n  background: none;\\n}\\nmulti-well-histogram .main .main-toolbar .menu-item .select-proj4:focus {\\n  border-color: none;\\n  outline: none;\\n  -webkit-box-shadow: none;\\n  box-shadow: none;\\n}\\nmulti-well-histogram .main .statistic-table {\\n  margin: 15px 15px;\\n  position: relative;\\n  height: 20%;\\n  max-height: 64%;\\n}\\nmulti-well-histogram .main .main-body {\\n  flex: 1;\\n  display: flex;\\n  overflow-x: auto;\\n  overflow-y: hidden;\\n  position: relative;\\n  flex-direction: column;\\n}\\nmulti-well-histogram .main .main-body .border-style {\\n  border: 1px solid #eee;\\n  border-top-right-radius: 3px;\\n  border-top-left-radius: 3px;\\n}\\nmulti-well-histogram .main .main-body .main-body-left {\\n  display: flex;\\n  z-index: 1;\\n  height: calc(100%);\\n}\\nmulti-well-histogram .main .main-body .main-body-left .input-search-list-view {\\n  background: #fff;\\n  width: 100%;\\n  height: 44px;\\n  border: 1px solid #ffffff4a;\\n  border-bottom: 1px solid #eaeaea;\\n  padding: 10px 20px 10px 15px;\\n  font-weight: bold;\\n}\\nmulti-well-histogram .main .main-body .main-body-left ::-webkit-input-placeholder {\\n  opacity: 0.5;\\n  color: rgba(0, 0, 0, 0.253);\\n  /* font-weight: 100; */\\n}\\nmulti-well-histogram .main .main-body .main-body-left :focus::-webkit-input-placeholder {\\n  opacity: 0.5;\\n  color: rgba(0, 0, 0, 0.253);\\n  /* font-weight: 100; */\\n}\\nmulti-well-histogram .main .main-body .main-body-left .input-search-list-view:focus {\\n  outline: none;\\n}\\nmulti-well-histogram .main .main-body .main-body-center {\\n  flex: 1;\\n  display: flex;\\n  height: 100%;\\n  position: relative;\\n  flex-direction: column;\\n}\\nmulti-well-histogram .main .button-update {\\n  background: #0077be;\\n  color: #fff;\\n  font-weight: bold;\\n  flex: 1;\\n  padding: 10px;\\n  text-align: center;\\n  margin: 9px 15px 15px 15px;\\n  border-radius: 2px;\\n  cursor: pointer;\\n}\\nmulti-well-histogram .main .button-update:hover {\\n  background: #1ba0ec;\\n  transition: all 0.5s;\\n}\\nmulti-well-histogram .main .disabled-click {\\n  pointer-events: none;\\n  opacity: 0.2;\\n}\\nmulti-well-histogram .main .label-list-view {\\n  font-weight: bold;\\n  background: #fff;\\n  display: flex;\\n  justify-content: space-between;\\n  font-weight: 400;\\n  min-width: 40px;\\n}\\nmulti-well-histogram .main .label-info-image {\\n  background: #fff;\\n  min-width: 99px;\\n  display: flex;\\n  align-items: center;\\n  border-radius: 3px;\\n  padding: 5px 10px;\\n  margin-right: 15px;\\n  justify-content: space-between;\\n}\\nmulti-well-histogram .main .button-td {\\n  cursor: pointer;\\n  background: #f4f4f4;\\n  padding: 3px 10px;\\n  border-radius: 2px;\\n  border: 1px solid #e8e8e8;\\n}\\nmulti-well-histogram .main .button-td:hover {\\n  background: #87c1ff;\\n  color: #fff;\\n}\\nmulti-well-histogram .main .header-icon {\\n  margin-right: 10px;\\n  cursor: pointer;\\n  width: 10px;\\n}\\nmulti-well-histogram .main .label-button {\\n  float: right;\\n  font-size: 115%;\\n  color: #bbbbbb;\\n  margin: 2px 5px 0 15px;\\n  pointer-events: none;\\n}\\nmulti-well-histogram .main .button-with-label-layer {\\n  cursor: pointer;\\n  background: #f4f4f4;\\n  font-size: 10px;\\n  padding: 5px 7px;\\n  margin-left: 5px;\\n  border: 1px solid #e4e4e4;\\n  border-radius: 2px;\\n  flex: 1;\\n  text-align: center;\\n  transition: all 0.2s ease-in;\\n}\\nmulti-well-histogram .main .button-with-label-layer:hover {\\n  background: #fff;\\n  color: #0077be;\\n  border: 1px solid #0077be;\\n  transition: all 0.2s ease-in;\\n}\\nmulti-well-histogram .main .button-with-label {\\n  cursor: pointer;\\n  background: #f4f4f4;\\n  font-size: 10px;\\n  padding: 5px 10px;\\n  border: 1px solid #f4f4f4;\\n  border-radius: 20px;\\n  transition: all 0.2s ease-in;\\n}\\nmulti-well-histogram .main .button-with-label:hover {\\n  border: 1px solid #0077be;\\n}\\nmulti-well-histogram .main .button-with-label.active {\\n  background: #f4f4f4;\\n  color: #0077be;\\n  border: 1px solid #0077be;\\n  transition: all 0.2s ease-in;\\n}\\nmulti-well-histogram .main .tab-with-label {\\n  cursor: pointer;\\n  color: #cacaca;\\n  transition: all 0.2s ease-in;\\n  margin: 0 10px;\\n  white-space: nowrap;\\n  font-weight: bold;\\n}\\nmulti-well-histogram .main .tab-with-label:hover {\\n  color: #0077be;\\n}\\nmulti-well-histogram .main .tab-with-label.active {\\n  color: #0077be;\\n  transition: all 0.2s ease-in;\\n}\\nmulti-well-histogram .main .select-table-header {\\n  border: 1px solid #eee;\\n  background: #f4f4f4;\\n  padding: 5px 16px;\\n  margin: 0 15px 15px 0;\\n  cursor: pointer;\\n  border-radius: 2px;\\n  min-width: 91px;\\n  display: flex;\\n  justify-content: center;\\n  transition: all 0.2s ease-in;\\n}\\nmulti-well-histogram .main .select-table-header.active {\\n  color: #0077be;\\n  border: 1px solid #0077be;\\n  transition: all 0.2s ease-in;\\n}\\nmulti-well-histogram .main .label-option-sidebar {\\n  font-weight: bold;\\n  font-size: 12px;\\n  color: #646464;\\n  background: #fff;\\n  padding: 11px 16px;\\n}\\nmulti-well-histogram .main .selection-sidebar {\\n  border: 1px solid #e4e4e4;\\n  border-radius: 2px;\\n  padding: 1px 10px;\\n  align-items: center;\\n  display: flex;\\n  transition: all 0.2s ease-in;\\n}\\nmulti-well-histogram .main .selection-sidebar:hover {\\n  border: 1px solid #0077be;\\n}\\nmulti-well-histogram .main .selection-sidebar > input:focus {\\n  outline: none;\\n}\\nmulti-well-histogram .main .input-suggestions {\\n  margin-left: 10px;\\n  border: none;\\n  flex: 1;\\n  color: #0077be;\\n  text-align: right;\\n}\\nmulti-well-histogram .axis-bar {\\n  background: #fff;\\n  border-radius: 2px;\\n  border-bottom: 1px solid #dbdbdb87;\\n  font-size: 12px;\\n  display: flex;\\n  width: 100%;\\n  text-align: left;\\n  flex: 1;\\n  justify-content: space-between;\\n  align-items: center;\\n  padding: 10px 10px;\\n  transition: all 0.2s ease-in;\\n}\\nmulti-well-histogram ::-webkit-scrollbar {\\n  background: #f4f4f4;\\n  width: 5px;\\n}\\nmulti-well-histogram ::-webkit-scrollbar-thumb {\\n  background-color: #dcdcdc;\\n}\\nmulti-well-histogram .fix-header-table {\\n  overflow-y: auto;\\n  display: flex;\\n  flex: 1;\\n}\\nmulti-well-histogram .fix-header-table th {\\n  position: sticky;\\n  top: 0;\\n}\\nmulti-well-histogram .rectangle {\\n  width: 8px;\\n  height: 8px;\\n  border-radius: 50%;\\n  background: #0077be;\\n}\\nmulti-well-histogram table {\\n  border-collapse: collapse;\\n  table-layout: fixed;\\n  width: 100%;\\n  user-select: none;\\n}\\nmulti-well-histogram table th {\\n  position: sticky;\\n  top: 0;\\n}\\nmulti-well-histogram thead {\\n  border-bottom: 1px solid #ccc;\\n}\\nmulti-well-histogram td,\\nmulti-well-histogram th {\\n  border-bottom: 1px solid #f0f0f0;\\n  border-right: 1px solid #f0f0f0;\\n  padding-top: 10px;\\n  padding-bottom: 9px;\\n  padding-left: 14px;\\n  overflow: hidden;\\n}\\nmulti-well-histogram tr {\\n  border-right: 4px solid #fff;\\n}\\nmulti-well-histogram tr.updated {\\n  background-color: #c2eaff70;\\n}\\nmulti-well-histogram tr.created {\\n  background-color: #abeaab29;\\n}\\nmulti-well-histogram tr.deleted {\\n  background-color: #f4f4f4;\\n  pointer-events: none;\\n  color: #d8d3d3;\\n}\\nmulti-well-histogram tr:hover {\\n  border-right: 4px solid #0077be;\\n  background: #f9f9f9;\\n}\\nmulti-well-histogram th {\\n  padding-top: 9px;\\n  padding-bottom: 10px;\\n  text-align: left;\\n  background-color: #ffffff;\\n  color: #0077be;\\n}\\nmulti-well-histogram ::placeholder {\\n  /* Chrome, Firefox, Opera, Safari 10.1+ */\\n  color: #9e9e9e;\\n  opacity: 1;\\n  /* Firefox */\\n}\\n\", \"\"]);\n\n\n\n//# sourceURL=webpack:///./multi-well-histogram/style.less?../node_modules/css-loader/dist/cjs.js!../node_modules/less-loader/dist/cjs.js");

/***/ }),

/***/ "../node_modules/css-loader/dist/runtime/api.js":
/*!******************************************************!*\
  !*** ../node_modules/css-loader/dist/runtime/api.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function (useSourceMap) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = cssWithMappingToString(item, useSourceMap);\n\n      if (item[2]) {\n        return '@media ' + item[2] + '{' + content + '}';\n      } else {\n        return content;\n      }\n    }).join('');\n  }; // import a list of modules into the list\n\n\n  list.i = function (modules, mediaQuery) {\n    if (typeof modules === 'string') {\n      modules = [[null, modules, '']];\n    }\n\n    var alreadyImportedModules = {};\n\n    for (var i = 0; i < this.length; i++) {\n      var id = this[i][0];\n\n      if (id != null) {\n        alreadyImportedModules[id] = true;\n      }\n    }\n\n    for (i = 0; i < modules.length; i++) {\n      var item = modules[i]; // skip already imported module\n      // this implementation is not 100% perfect for weird media query combinations\n      // when a module is imported multiple times with different media queries.\n      // I hope this will never occur (Hey this way we have smaller bundles)\n\n      if (item[0] == null || !alreadyImportedModules[item[0]]) {\n        if (mediaQuery && !item[2]) {\n          item[2] = mediaQuery;\n        } else if (mediaQuery) {\n          item[2] = '(' + item[2] + ') and (' + mediaQuery + ')';\n        }\n\n        list.push(item);\n      }\n    }\n  };\n\n  return list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n  var content = item[1] || '';\n  var cssMapping = item[3];\n\n  if (!cssMapping) {\n    return content;\n  }\n\n  if (useSourceMap && typeof btoa === 'function') {\n    var sourceMapping = toComment(cssMapping);\n    var sourceURLs = cssMapping.sources.map(function (source) {\n      return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */';\n    });\n    return [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n  }\n\n  return [content].join('\\n');\n} // Adapted from convert-source-map (MIT)\n\n\nfunction toComment(sourceMap) {\n  // eslint-disable-next-line no-undef\n  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n  var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n  return '/*# ' + data + ' */';\n}\n\n//# sourceURL=webpack:///../node_modules/css-loader/dist/runtime/api.js?");

/***/ }),

/***/ "../node_modules/style-loader/lib/addStyles.js":
/*!*****************************************************!*\
  !*** ../node_modules/style-loader/lib/addStyles.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\nvar stylesInDom = {};\n\nvar\tmemoize = function (fn) {\n\tvar memo;\n\n\treturn function () {\n\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\n\t\treturn memo;\n\t};\n};\n\nvar isOldIE = memoize(function () {\n\t// Test for IE <= 9 as proposed by Browserhacks\n\t// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n\t// Tests for existence of standard globals is to allow style-loader\n\t// to operate correctly into non-standard environments\n\t// @see https://github.com/webpack-contrib/style-loader/issues/177\n\treturn window && document && document.all && !window.atob;\n});\n\nvar getTarget = function (target, parent) {\n  if (parent){\n    return parent.querySelector(target);\n  }\n  return document.querySelector(target);\n};\n\nvar getElement = (function (fn) {\n\tvar memo = {};\n\n\treturn function(target, parent) {\n                // If passing function in options, then use it for resolve \"head\" element.\n                // Useful for Shadow Root style i.e\n                // {\n                //   insertInto: function () { return document.querySelector(\"#foo\").shadowRoot }\n                // }\n                if (typeof target === 'function') {\n                        return target();\n                }\n                if (typeof memo[target] === \"undefined\") {\n\t\t\tvar styleTarget = getTarget.call(this, target, parent);\n\t\t\t// Special case to return head of iframe instead of iframe itself\n\t\t\tif (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n\t\t\t\ttry {\n\t\t\t\t\t// This will throw an exception if access to iframe is blocked\n\t\t\t\t\t// due to cross-origin restrictions\n\t\t\t\t\tstyleTarget = styleTarget.contentDocument.head;\n\t\t\t\t} catch(e) {\n\t\t\t\t\tstyleTarget = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmemo[target] = styleTarget;\n\t\t}\n\t\treturn memo[target]\n\t};\n})();\n\nvar singleton = null;\nvar\tsingletonCounter = 0;\nvar\tstylesInsertedAtTop = [];\n\nvar\tfixUrls = __webpack_require__(/*! ./urls */ \"../node_modules/style-loader/lib/urls.js\");\n\nmodule.exports = function(list, options) {\n\tif (typeof DEBUG !== \"undefined\" && DEBUG) {\n\t\tif (typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\n\t}\n\n\toptions = options || {};\n\n\toptions.attrs = typeof options.attrs === \"object\" ? options.attrs : {};\n\n\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n\t// tags it will allow on a page\n\tif (!options.singleton && typeof options.singleton !== \"boolean\") options.singleton = isOldIE();\n\n\t// By default, add <style> tags to the <head> element\n        if (!options.insertInto) options.insertInto = \"head\";\n\n\t// By default, add <style> tags to the bottom of the target\n\tif (!options.insertAt) options.insertAt = \"bottom\";\n\n\tvar styles = listToStyles(list, options);\n\n\taddStylesToDom(styles, options);\n\n\treturn function update (newList) {\n\t\tvar mayRemove = [];\n\n\t\tfor (var i = 0; i < styles.length; i++) {\n\t\t\tvar item = styles[i];\n\t\t\tvar domStyle = stylesInDom[item.id];\n\n\t\t\tdomStyle.refs--;\n\t\t\tmayRemove.push(domStyle);\n\t\t}\n\n\t\tif(newList) {\n\t\t\tvar newStyles = listToStyles(newList, options);\n\t\t\taddStylesToDom(newStyles, options);\n\t\t}\n\n\t\tfor (var i = 0; i < mayRemove.length; i++) {\n\t\t\tvar domStyle = mayRemove[i];\n\n\t\t\tif(domStyle.refs === 0) {\n\t\t\t\tfor (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();\n\n\t\t\t\tdelete stylesInDom[domStyle.id];\n\t\t\t}\n\t\t}\n\t};\n};\n\nfunction addStylesToDom (styles, options) {\n\tfor (var i = 0; i < styles.length; i++) {\n\t\tvar item = styles[i];\n\t\tvar domStyle = stylesInDom[item.id];\n\n\t\tif(domStyle) {\n\t\t\tdomStyle.refs++;\n\n\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\n\t\t\t\tdomStyle.parts[j](item.parts[j]);\n\t\t\t}\n\n\t\t\tfor(; j < item.parts.length; j++) {\n\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\t\t} else {\n\t\t\tvar parts = [];\n\n\t\t\tfor(var j = 0; j < item.parts.length; j++) {\n\t\t\t\tparts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\n\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\n\t\t}\n\t}\n}\n\nfunction listToStyles (list, options) {\n\tvar styles = [];\n\tvar newStyles = {};\n\n\tfor (var i = 0; i < list.length; i++) {\n\t\tvar item = list[i];\n\t\tvar id = options.base ? item[0] + options.base : item[0];\n\t\tvar css = item[1];\n\t\tvar media = item[2];\n\t\tvar sourceMap = item[3];\n\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\n\n\t\tif(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});\n\t\telse newStyles[id].parts.push(part);\n\t}\n\n\treturn styles;\n}\n\nfunction insertStyleElement (options, style) {\n\tvar target = getElement(options.insertInto)\n\n\tif (!target) {\n\t\tthrow new Error(\"Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.\");\n\t}\n\n\tvar lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];\n\n\tif (options.insertAt === \"top\") {\n\t\tif (!lastStyleElementInsertedAtTop) {\n\t\t\ttarget.insertBefore(style, target.firstChild);\n\t\t} else if (lastStyleElementInsertedAtTop.nextSibling) {\n\t\t\ttarget.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);\n\t\t} else {\n\t\t\ttarget.appendChild(style);\n\t\t}\n\t\tstylesInsertedAtTop.push(style);\n\t} else if (options.insertAt === \"bottom\") {\n\t\ttarget.appendChild(style);\n\t} else if (typeof options.insertAt === \"object\" && options.insertAt.before) {\n\t\tvar nextSibling = getElement(options.insertAt.before, target);\n\t\ttarget.insertBefore(style, nextSibling);\n\t} else {\n\t\tthrow new Error(\"[Style Loader]\\n\\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\\n Must be 'top', 'bottom', or Object.\\n (https://github.com/webpack-contrib/style-loader#insertat)\\n\");\n\t}\n}\n\nfunction removeStyleElement (style) {\n\tif (style.parentNode === null) return false;\n\tstyle.parentNode.removeChild(style);\n\n\tvar idx = stylesInsertedAtTop.indexOf(style);\n\tif(idx >= 0) {\n\t\tstylesInsertedAtTop.splice(idx, 1);\n\t}\n}\n\nfunction createStyleElement (options) {\n\tvar style = document.createElement(\"style\");\n\n\tif(options.attrs.type === undefined) {\n\t\toptions.attrs.type = \"text/css\";\n\t}\n\n\tif(options.attrs.nonce === undefined) {\n\t\tvar nonce = getNonce();\n\t\tif (nonce) {\n\t\t\toptions.attrs.nonce = nonce;\n\t\t}\n\t}\n\n\taddAttrs(style, options.attrs);\n\tinsertStyleElement(options, style);\n\n\treturn style;\n}\n\nfunction createLinkElement (options) {\n\tvar link = document.createElement(\"link\");\n\n\tif(options.attrs.type === undefined) {\n\t\toptions.attrs.type = \"text/css\";\n\t}\n\toptions.attrs.rel = \"stylesheet\";\n\n\taddAttrs(link, options.attrs);\n\tinsertStyleElement(options, link);\n\n\treturn link;\n}\n\nfunction addAttrs (el, attrs) {\n\tObject.keys(attrs).forEach(function (key) {\n\t\tel.setAttribute(key, attrs[key]);\n\t});\n}\n\nfunction getNonce() {\n\tif (false) {}\n\n\treturn __webpack_require__.nc;\n}\n\nfunction addStyle (obj, options) {\n\tvar style, update, remove, result;\n\n\t// If a transform function was defined, run it on the css\n\tif (options.transform && obj.css) {\n\t    result = typeof options.transform === 'function'\n\t\t ? options.transform(obj.css) \n\t\t : options.transform.default(obj.css);\n\n\t    if (result) {\n\t    \t// If transform returns a value, use that instead of the original css.\n\t    \t// This allows running runtime transformations on the css.\n\t    \tobj.css = result;\n\t    } else {\n\t    \t// If the transform function returns a falsy value, don't add this css.\n\t    \t// This allows conditional loading of css\n\t    \treturn function() {\n\t    \t\t// noop\n\t    \t};\n\t    }\n\t}\n\n\tif (options.singleton) {\n\t\tvar styleIndex = singletonCounter++;\n\n\t\tstyle = singleton || (singleton = createStyleElement(options));\n\n\t\tupdate = applyToSingletonTag.bind(null, style, styleIndex, false);\n\t\tremove = applyToSingletonTag.bind(null, style, styleIndex, true);\n\n\t} else if (\n\t\tobj.sourceMap &&\n\t\ttypeof URL === \"function\" &&\n\t\ttypeof URL.createObjectURL === \"function\" &&\n\t\ttypeof URL.revokeObjectURL === \"function\" &&\n\t\ttypeof Blob === \"function\" &&\n\t\ttypeof btoa === \"function\"\n\t) {\n\t\tstyle = createLinkElement(options);\n\t\tupdate = updateLink.bind(null, style, options);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\n\t\t\tif(style.href) URL.revokeObjectURL(style.href);\n\t\t};\n\t} else {\n\t\tstyle = createStyleElement(options);\n\t\tupdate = applyToTag.bind(null, style);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\t\t};\n\t}\n\n\tupdate(obj);\n\n\treturn function updateStyle (newObj) {\n\t\tif (newObj) {\n\t\t\tif (\n\t\t\t\tnewObj.css === obj.css &&\n\t\t\t\tnewObj.media === obj.media &&\n\t\t\t\tnewObj.sourceMap === obj.sourceMap\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tupdate(obj = newObj);\n\t\t} else {\n\t\t\tremove();\n\t\t}\n\t};\n}\n\nvar replaceText = (function () {\n\tvar textStore = [];\n\n\treturn function (index, replacement) {\n\t\ttextStore[index] = replacement;\n\n\t\treturn textStore.filter(Boolean).join('\\n');\n\t};\n})();\n\nfunction applyToSingletonTag (style, index, remove, obj) {\n\tvar css = remove ? \"\" : obj.css;\n\n\tif (style.styleSheet) {\n\t\tstyle.styleSheet.cssText = replaceText(index, css);\n\t} else {\n\t\tvar cssNode = document.createTextNode(css);\n\t\tvar childNodes = style.childNodes;\n\n\t\tif (childNodes[index]) style.removeChild(childNodes[index]);\n\n\t\tif (childNodes.length) {\n\t\t\tstyle.insertBefore(cssNode, childNodes[index]);\n\t\t} else {\n\t\t\tstyle.appendChild(cssNode);\n\t\t}\n\t}\n}\n\nfunction applyToTag (style, obj) {\n\tvar css = obj.css;\n\tvar media = obj.media;\n\n\tif(media) {\n\t\tstyle.setAttribute(\"media\", media)\n\t}\n\n\tif(style.styleSheet) {\n\t\tstyle.styleSheet.cssText = css;\n\t} else {\n\t\twhile(style.firstChild) {\n\t\t\tstyle.removeChild(style.firstChild);\n\t\t}\n\n\t\tstyle.appendChild(document.createTextNode(css));\n\t}\n}\n\nfunction updateLink (link, options, obj) {\n\tvar css = obj.css;\n\tvar sourceMap = obj.sourceMap;\n\n\t/*\n\t\tIf convertToAbsoluteUrls isn't defined, but sourcemaps are enabled\n\t\tand there is no publicPath defined then lets turn convertToAbsoluteUrls\n\t\ton by default.  Otherwise default to the convertToAbsoluteUrls option\n\t\tdirectly\n\t*/\n\tvar autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;\n\n\tif (options.convertToAbsoluteUrls || autoFixUrls) {\n\t\tcss = fixUrls(css);\n\t}\n\n\tif (sourceMap) {\n\t\t// http://stackoverflow.com/a/26603875\n\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\n\t}\n\n\tvar blob = new Blob([css], { type: \"text/css\" });\n\n\tvar oldSrc = link.href;\n\n\tlink.href = URL.createObjectURL(blob);\n\n\tif(oldSrc) URL.revokeObjectURL(oldSrc);\n}\n\n\n//# sourceURL=webpack:///../node_modules/style-loader/lib/addStyles.js?");

/***/ }),

/***/ "../node_modules/style-loader/lib/urls.js":
/*!************************************************!*\
  !*** ../node_modules/style-loader/lib/urls.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\n/**\n * When source maps are enabled, `style-loader` uses a link element with a data-uri to\n * embed the css on the page. This breaks all relative urls because now they are relative to a\n * bundle instead of the current page.\n *\n * One solution is to only use full urls, but that may be impossible.\n *\n * Instead, this function \"fixes\" the relative urls to be absolute according to the current page location.\n *\n * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.\n *\n */\n\nmodule.exports = function (css) {\n  // get current location\n  var location = typeof window !== \"undefined\" && window.location;\n\n  if (!location) {\n    throw new Error(\"fixUrls requires window.location\");\n  }\n\n\t// blank or null?\n\tif (!css || typeof css !== \"string\") {\n\t  return css;\n  }\n\n  var baseUrl = location.protocol + \"//\" + location.host;\n  var currentDir = baseUrl + location.pathname.replace(/\\/[^\\/]*$/, \"/\");\n\n\t// convert each url(...)\n\t/*\n\tThis regular expression is just a way to recursively match brackets within\n\ta string.\n\n\t /url\\s*\\(  = Match on the word \"url\" with any whitespace after it and then a parens\n\t   (  = Start a capturing group\n\t     (?:  = Start a non-capturing group\n\t         [^)(]  = Match anything that isn't a parentheses\n\t         |  = OR\n\t         \\(  = Match a start parentheses\n\t             (?:  = Start another non-capturing groups\n\t                 [^)(]+  = Match anything that isn't a parentheses\n\t                 |  = OR\n\t                 \\(  = Match a start parentheses\n\t                     [^)(]*  = Match anything that isn't a parentheses\n\t                 \\)  = Match a end parentheses\n\t             )  = End Group\n              *\\) = Match anything and then a close parens\n          )  = Close non-capturing group\n          *  = Match anything\n       )  = Close capturing group\n\t \\)  = Match a close parens\n\n\t /gi  = Get all matches, not the first.  Be case insensitive.\n\t */\n\tvar fixedCss = css.replace(/url\\s*\\(((?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)\\)/gi, function(fullMatch, origUrl) {\n\t\t// strip quotes (if they exist)\n\t\tvar unquotedOrigUrl = origUrl\n\t\t\t.trim()\n\t\t\t.replace(/^\"(.*)\"$/, function(o, $1){ return $1; })\n\t\t\t.replace(/^'(.*)'$/, function(o, $1){ return $1; });\n\n\t\t// already a full url? no change\n\t\tif (/^(#|data:|http:\\/\\/|https:\\/\\/|file:\\/\\/\\/|\\s*$)/i.test(unquotedOrigUrl)) {\n\t\t  return fullMatch;\n\t\t}\n\n\t\t// convert the url to a full url\n\t\tvar newUrl;\n\n\t\tif (unquotedOrigUrl.indexOf(\"//\") === 0) {\n\t\t  \t//TODO: should we add protocol?\n\t\t\tnewUrl = unquotedOrigUrl;\n\t\t} else if (unquotedOrigUrl.indexOf(\"/\") === 0) {\n\t\t\t// path should be relative to the base url\n\t\t\tnewUrl = baseUrl + unquotedOrigUrl; // already starts with '/'\n\t\t} else {\n\t\t\t// path should be relative to current directory\n\t\t\tnewUrl = currentDir + unquotedOrigUrl.replace(/^\\.\\//, \"\"); // Strip leading './'\n\t\t}\n\n\t\t// send back the fixed url(...)\n\t\treturn \"url(\" + JSON.stringify(newUrl) + \")\";\n\t});\n\n\t// send back the fixed css\n\treturn fixedCss;\n};\n\n\n//# sourceURL=webpack:///../node_modules/style-loader/lib/urls.js?");

/***/ }),

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = {\r\n    multiWellCrossplot: __webpack_require__(/*! ./multi-well-crossplot */ \"./multi-well-crossplot/index.js\"),\r\n    multiCrossplot: __webpack_require__(/*! ./multi-crossplot */ \"./multi-crossplot/index.js\"),\r\n    multiWellHistogram: __webpack_require__(/*! ./multi-well-histogram */ \"./multi-well-histogram/index.js\"),\r\n    multiHistogram: __webpack_require__(/*! ./multi-histogram */ \"./multi-histogram/index.js\")\r\n}\r\n\n\n//# sourceURL=webpack:///./index.js?");

/***/ }),

/***/ "./multi-crossplot/index.js":
/*!**********************************!*\
  !*** ./multi-crossplot/index.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var componentName = 'multiCrossplot';\r\nmodule.exports.name = componentName;\r\n__webpack_require__(/*! ./style.less */ \"./multi-crossplot/style.less\");\r\n\r\nvar app = angular.module(componentName, ['multiWellCrossplot','wiLoading']);\r\napp.component(componentName, {\r\n    template: __webpack_require__(/*! ./template.html */ \"./multi-crossplot/template.html\"),\r\n    controller: multiCrossplotController,\r\n    controllerAs: 'self',\r\n    bindings: {\r\n        token: \"<\",\r\n        idProject: \"<\",\r\n        wellSpecs: \"=\",\r\n        zonesetNames: \"<\",\r\n        selectionTypes: \"<\",\r\n        selectionXValues: \"<\",\r\n        selectionYValues: \"<\",\r\n        selectionZ1Values: \"<\",\r\n        selectionZ2Values: \"<\",\r\n        selectionZ3Values: \"<\",\r\n        selectionValueCouple: '<',\r\n\t\tidHistograms: \"<\",\r\n\t\tconfigs: '<',\r\n        logaX: \"<\",\r\n        logaY: \"<\",\r\n        scaleLeft: \"<\",\r\n        scaleRight: \"<\",\r\n        scaleBottom: \"<\",\r\n        scaleTop: \"<\",\r\n        onSave: '<',\r\n        onSaveAs: '<',\r\n\t\ttitles: '<',\r\n        paramGroups: '<',\r\n        paramGroupPointsFn: \"<\",\r\n        getParamGroupX: \"<\",\r\n        getParamGroupY: \"<\",\r\n        setParamGroupX: \"<\",\r\n        setParamGroupY: \"<\",\r\n        getParamGroupPointLabel: \"<\",\r\n        pickettSets: \"<\",\r\n        showAdjuster: '<',\r\n        getPickettSetRw: '<',\r\n        getPickettSetA: \"<\",\r\n        getPickettSetM: \"<\",\r\n        getPickettSetN: \"<\",\r\n        setPickettSetRw: '<',\r\n        setPickettSetA: \"<\",\r\n        setPickettSetM: \"<\",\r\n        setPickettSetN: \"<\",\r\n        getPickettSetName: \"<\",\r\n        setPickettSetName: \"<\",\r\n        getPickettSetColor: \"<\",\r\n        overlayLine: \"<\",\r\n        showPickettSetAt: \"<\",\r\n        onInitFn: \"<\",\r\n        onReload: '<'\r\n    },\r\n    transclude: true\r\n});\r\nmultiCrossplotController.$inject = ['$scope', '$timeout', '$element', 'wiToken', 'wiApi', 'wiDialog', 'wiLoading'];\r\nfunction multiCrossplotController($scope, $timeout, $element, wiToken, wiApi, wiDialog, wiLoading) {\r\n    let self = this;\r\n    self.silent = true;\r\n    $scope.tabIndex = 0;\r\n    const svl = [];\r\n\r\n    this.$onInit = async function () {\r\n        if (self.token)\r\n            wiToken.setToken(self.token);\r\n        for (let i = 0; i < self.selectionXValues.length; i++) svl.push([]);\r\n    }\r\n    self.activateTab = function ($index){\r\n        $timeout(()=>{\r\n            $scope.tabIndex = $index;\r\n        })\r\n\r\n    }\r\n    this.getParamGroups = function() {\r\n        if (typeof self.paramGroups == 'function') {\r\n            return self.paramGroups();\r\n        } else {\r\n            return self.paramGroups;\r\n        }\r\n    }\r\n    this.getSelectionValueList = function(idx) {\r\n        svl[idx].length = 0;\r\n        svl[idx].push(self.selectionXValues[idx], self.selectionYValues[idx], self.selectionZ1Values[idx], self.selectionZ2Values[idx], self.selectionZ3Values[idx]);\r\n        return svl[idx];\r\n    }\r\n    this.onDrop = function (event, helper, myData) {\r\n        let idCurves = helper.data(\"idCurves\");\r\n        let selectionXValue;\r\n        let idWell;\r\n        if(idCurves && idCurves.length >= 2){\r\n            $timeout(()=>{\r\n                self.warning = false;\r\n            })\r\n            wiApi.getCurveInfoPromise(idCurves[0]).then(curveInfo => {\r\n                selectionXValue = curveInfo.name;\r\n                return wiApi.getDatasetInfoPromise(curveInfo.idDataset);\r\n            }).then(datasetInfo => {\r\n                idWell = datasetInfo.idWell;\r\n                $timeout(()=>{\r\n                    self.wellSpecs.push([{idWell}]);\r\n                    self.selectionTypes.push('curve');\r\n                    self.selectionXValues.push(selectionXValue);\r\n                    wiApi.getCurveInfoPromise(idCurves[1]).then(curveInfo => {\r\n                        // console.log(curveInfo.name);\r\n                        $timeout(()=>{\r\n                            self.selectionYValues.push(curveInfo.name);\r\n                        });\r\n                    })\r\n                });\r\n            });\r\n            \r\n        } else {\r\n            $timeout(()=>{\r\n                self.warning = true;\r\n            })\r\n        }\r\n        \r\n    }\r\n    // this.removeTab = function ($event, index){\r\n    //     $event.stopPropagation();\r\n    //     $event.preventDefault();\r\n    //     $timeout(() => {\r\n    //         self.wellSpecs.splice(index, 1);\r\n    //     })\r\n    // }\r\n}\r\n\n\n//# sourceURL=webpack:///./multi-crossplot/index.js?");

/***/ }),

/***/ "./multi-crossplot/style.less":
/*!************************************!*\
  !*** ./multi-crossplot/style.less ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\nvar content = __webpack_require__(/*! !../../node_modules/css-loader/dist/cjs.js!../../node_modules/less-loader/dist/cjs.js!./style.less */ \"../node_modules/css-loader/dist/cjs.js!../node_modules/less-loader/dist/cjs.js!./multi-crossplot/style.less\");\n\nif(typeof content === 'string') content = [[module.i, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = __webpack_require__(/*! ../../node_modules/style-loader/lib/addStyles.js */ \"../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(false) {}\n\n//# sourceURL=webpack:///./multi-crossplot/style.less?");

/***/ }),

/***/ "./multi-crossplot/template.html":
/*!***************************************!*\
  !*** ./multi-crossplot/template.html ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<wi-droppable style=\\\"display: flex;width: 100%;background: #ffffff;z-index: 1;box-shadow: 0 4px 9px #00000014;flex-basis: 40px;border-radius: 2px;\\\" on-drop=\\\"self.onDrop\\\"\\n    container-style=\\\"{display:'flex',flex: 1, position: 'relative'}\\\">\\n    <div class=\\\"tab\\\">\\n        <div class=\\\"tab-name\\\" ng-repeat=\\\"(idx, xVal) in self.selectionXValues\\\"\\n            ng-class=\\\"{active: tabIndex === idx}\\\"\\n            ng-click=\\\"self.activateTab(idx)\\\">\\n            <div ng-if=\\\"self.selectionTypes[idx] === 'curve'\\\" class=\\\"curve-16x16\\\" style=\\\"margin-right: 10px;\\\"></div>\\n            <div ng-if=\\\"self.selectionTypes[idx] === 'family'\\\" class=\\\"family-16x16\\\" style=\\\"margin-right: 10px;\\\"></div>\\n            <div ng-if=\\\"self.selectionTypes[idx] === 'family-group'\\\" class=\\\"family-group-16x16\\\"\\n                style=\\\"margin-right: 10px;\\\"></div>\\n            {{self.selectionXValues[idx].value}} - {{self.selectionYValues[idx].value}}\\n        </div>\\n        <div class=\\\"tab-drop\\\">\\n            Drop curves here\\n            <div style=\\\"margin-left: 15px; opacity: 0.4;\\\" class=\\\"ti-plus\\\"></div>\\n        </div>\\n    </div>\\n    <div ng-class=\\\"{'show-warning': self.warning}\\\" class=\\\"warning\\\">\\n        DROP CURVES, TRY AGAIN!\\n    </div>\\n</wi-droppable>\\n<div ng-show=\\\"tabIndex === idx\\\" class=\\\"main\\\" ng-repeat=\\\"(idx, xVal) in self.selectionXValues\\\">\\n    <multi-well-crossplot well-spec=\\\"self.wellSpecs[idx]\\\" zoneset-name=\\\"self.zonesetNames[idx]\\\"\\n        loga-x=\\\"self.logaX\\\"\\n        loga-y=\\\"self.logaY\\\"\\n        scale-left=\\\"self.scaleLeft\\\"\\n        scale-right=\\\"self.scaleRight\\\"\\n        scale-bottom=\\\"self.scaleBottom\\\"\\n        scale-top=\\\"self.scaleTop\\\"\\n        selection-type=\\\"self.selectionTypes[idx]\\\"\\n        selection-value-list=\\\"self.getSelectionValueList(idx)\\\"\\n        param-groups=\\\"self.getParamGroups()\\\"\\n        param-group-points-fn=\\\"self.paramGroupPointsFn\\\"\\n        get-param-group-x=\\\"self.getParamGroupX\\\"\\n        get-param-group-y=\\\"self.getParamGroupY\\\"\\n        set-param-group-x=\\\"self.setParamGroupX\\\"\\n        set-param-group-y=\\\"self.setParamGroupY\\\"\\n        get-param-group-point-label=\\\"self.getParamGroupPointLabel\\\"\\n        silent=\\\"true\\\"\\n        pickett-sets=\\\"self.pickettSets\\\"\\n        show-adjuster=\\\"self.showAdjuster\\\"\\n        get-pickett-set-rw=\\\"self.getPickettSetRw\\\"\\n        set-pickett-set-rw=\\\"self.setPickettSetRw\\\"\\n        get-pickett-set-a=\\\"self.getPickettSetA\\\"\\n        set-pickett-set-a=\\\"self.setPickettSetA\\\"\\n        get-pickett-set-m=\\\"self.getPickettSetM\\\"\\n        set-pickett-set-m=\\\"self.setPickettSetM\\\"\\n        get-pickett-set-n=\\\"self.getPickettSetN\\\"\\n        set-pickett-set-n=\\\"self.setPickettSetN\\\"\\n        set-pickett-set-name=\\\"self.setPickettSetName\\\"\\n        get-pickett-set-name=\\\"self.getPickettSetName\\\"\\n        get-pickett-set-color=\\\"self.getPickettSetColor\\\"\\n        overlay-line=\\\"self.overlayLine\\\"\\n        show-pickett-set-at=\\\"self.showPickettSetAt\\\"\\n        on-init-fn=\\\"self.onInitFn\\\"\\n        on-reload=\\\"self.onReload\\\">\\n    </multi-well-crossplot>\\n</div>\\n\";\n\n//# sourceURL=webpack:///./multi-crossplot/template.html?");

/***/ }),

/***/ "./multi-histogram/index.js":
/*!**********************************!*\
  !*** ./multi-histogram/index.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var componentName = 'multiHistogram';\r\nmodule.exports.name = componentName;\r\n__webpack_require__(/*! ./style.less */ \"./multi-histogram/style.less\");\r\n\r\nconst _DECIMAL_LEN = 4;\r\n\r\nvar app = angular.module(componentName, ['multiWellHistogram','wiLoading']);\r\napp.component(componentName, {\r\n    template: __webpack_require__(/*! ./template.html */ \"./multi-histogram/template.html\"),\r\n    controller: multiHistogramController,\r\n    controllerAs: 'self',\r\n    bindings: {\r\n        token: \"<\",\r\n        idProject: \"<\",\r\n        wellSpecs: \"=\",\r\n        zonesetNames: \"<\",\r\n        selectionTypes: \"<\",\r\n        selectionValues: \"<\",\r\n\t\tidHistograms: \"<\",\r\n        configs: '<',\r\n        noStack: '<',\r\n        stackMode: \"<\",\r\n        ctrlParamsList: '<',\r\n        onSave: '<',\r\n        onSaveAs: '<',\r\n\t\ttitles: '<',\r\n        prefixs: '<',\r\n        cpGetMarkerVal: '<',\r\n        cpSetMarkerVal: '<',\r\n        cpMarkerStyle: '<',\r\n        cpMarkerName: '<',\r\n        cpIcons: '<',\r\n        cpIconStyle: '<',\r\n        onMarkerDragEnd: \"<\",\r\n        onReload: '<'\r\n    },\r\n    transclude: true\r\n});\r\nmultiHistogramController.$inject = ['$scope', '$timeout', '$element', 'wiToken', 'wiApi', 'wiDialog', 'wiLoading']\r\nfunction multiHistogramController($scope, $timeout, $element, wiToken, wiApi, wiDialog, wiLoading) {\r\n    let self = this;\r\n    self.silent = true;\r\n    $scope.tabIndex = 0;\r\n\r\n    this.$onInit = async function () {\r\n        if (self.token)\r\n            wiToken.setToken(self.token);\r\n        console.log(self.zonesetNames);\r\n    }\r\n    self.activateTab = function ($index){\r\n        $timeout(()=>{\r\n            $scope.tabIndex = $index;\r\n        })\r\n\r\n    }\r\n    this.getCtrlParams = function(index) {\r\n        if (typeof self.ctrlParamsList == 'function') {\r\n            return self.ctrlParamsList()[index];\r\n            //self.ctrlParamsList().then(result => {\r\n                //return result[index];\r\n            //});\r\n        } else {\r\n            return self.ctrlParamsList[index];\r\n        }\r\n    }\r\n    this.onDrop = function (event, helper, myData) {\r\n        let idCurves = helper.data(\"idCurves\");\r\n        let curveName;\r\n        let idWell;\r\n        if(idCurves){\r\n            self.warning = false;\r\n            wiLoading.show(document.getElementsByTagName(\"body\")[0], false);\r\n            wiApi.getCurveInfoPromise(idCurves[0]).then(curveInfo => {\r\n                console.log(curveInfo);\r\n                curveName = curveInfo.name;\r\n                return wiApi.getDatasetInfoPromise(curveInfo.idDataset);\r\n            }).then(datasetInfo => {\r\n                idWell = datasetInfo.idWell;\r\n                $timeout(()=>{\r\n                    self.wellSpecs.push([{idWell}]);\r\n                    self.selectionTypes.push('curve');\r\n                    self.selectionValues.push(curveName);\r\n                });\r\n                wiLoading.hide();\r\n            });\r\n        } else {\r\n            $timeout(()=>{\r\n                self.warning = true;\r\n            })\r\n        }\r\n        \r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./multi-histogram/index.js?");

/***/ }),

/***/ "./multi-histogram/style.less":
/*!************************************!*\
  !*** ./multi-histogram/style.less ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\nvar content = __webpack_require__(/*! !../../node_modules/css-loader/dist/cjs.js!../../node_modules/less-loader/dist/cjs.js!./style.less */ \"../node_modules/css-loader/dist/cjs.js!../node_modules/less-loader/dist/cjs.js!./multi-histogram/style.less\");\n\nif(typeof content === 'string') content = [[module.i, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = __webpack_require__(/*! ../../node_modules/style-loader/lib/addStyles.js */ \"../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(false) {}\n\n//# sourceURL=webpack:///./multi-histogram/style.less?");

/***/ }),

/***/ "./multi-histogram/template.html":
/*!***************************************!*\
  !*** ./multi-histogram/template.html ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<wi-droppable style=\\\"display: flex;width: 100%;background: #ffffff;z-index: 1;box-shadow: 0 4px 9px #00000014;flex-basis: 40px;border-radius: 2px;\\\" on-drop=\\\"self.onDrop\\\"\\n    container-style=\\\"{display:'flex',flex: 1, position: 'relative'}\\\">\\n    <div class=\\\"tab\\\">\\n        <div class=\\\"tab-name\\\" ng-repeat=\\\"sV in self.selectionValues\\\" ng-class=\\\"{active: tabIndex === $index}\\\"\\n            ng-click=\\\"self.activateTab($index)\\\">\\n            <div ng-if=\\\"self.selectionTypes[$index] === 'curve'\\\" class=\\\"curve-16x16\\\" style=\\\"margin-right: 10px;\\\"></div>\\n            <div ng-if=\\\"self.selectionTypes[$index] === 'family'\\\" class=\\\"family-16x16\\\" style=\\\"margin-right: 10px;\\\">\\n            </div>\\n            <div ng-if=\\\"self.selectionTypes[$index] === 'family-group'\\\" class=\\\"family-group-16x16\\\"\\n                style=\\\"margin-right: 10px;\\\"></div>\\n            {{self.selectionValues[$index]}}\\n        </div>\\n        <div class=\\\"tab-drop\\\">\\n            Drop curve here\\n            <div style=\\\"margin-left: 15px; opacity: 0.4;\\\" class=\\\"plus-16x16\\\"></div>\\n        </div>\\n    </div>\\n    <div ng-class=\\\"{'show-warning': self.warning}\\\" class=\\\"warning\\\">\\n        DROP CURVE, TRY AGIAN!\\n    </div>\\n</wi-droppable>\\n<div ng-show=\\\"tabIndex === $index\\\" class=\\\"main\\\" ng-repeat=\\\"sV in self.selectionValues\\\">\\n    <multi-well-histogram well-spec=\\\"self.wellSpecs[$index]\\\" zoneset-name=\\\"self.zonesetNames[$index]\\\"\\n        selection-type=\\\"self.selectionTypes[$index]\\\" selection-value=\\\"self.selectionValues[$index]\\\"\\n        ctrl-params=\\\"self.getCtrlParams($index)\\\" zone-set-ctrl-lines=\\\"self.zoneSetCtrlLines\\\"\\n        config=\\\"self.configs[$index]\\\" silent=\\\"self.silent\\\" prefix='self.prefixs[$index]'\\n        cp-get-marker-val='self.cpGetMarkerVal' cp-set-marker-val='self.cpSetMarkerVal'\\n        cp-marker-style='self.cpMarkerStyle' cp-marker-name='self.cpMarkerName'\\n        cp-icons='self.cpIcons' cp-icon-style='self.cpIconStyle' no-stack=\\\"self.noStack\\\"\\n        stack-mode=\\\"self.stackMode\\\" on-marker-drag-end=\\\"self.onMarkerDragEnd\\\"\\n        on-reload=\\\"self.onReload\\\">\\n    </multi-well-histogram>\\n</div>\\n\";\n\n//# sourceURL=webpack:///./multi-histogram/template.html?");

/***/ }),

/***/ "./multi-well-crossplot/fragments/config.html":
/*!****************************************************!*\
  !*** ./multi-well-crossplot/fragments/config.html ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"label-option-sidebar\\\" style=\\\"padding: 12px 20px;display: flex;background: #f4f4f4;border-bottom: 1px solid #dcdcdc;justify-content: space-between;flex-direction: column;\\\">\\n    <div>\\n        Configuration\\n    </div>\\n</div>\\n<div style=\\\"overflow: auto;\\\">\\n    <div class=\\\"label-option-sidebar\\\" style=\\\"padding: 15px 15px 0 15px;\\\">\\n        <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px;\\\">\\n            <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                item-label=\\\"'Title'\\\" item-value=\\\"self.getConfigTitle\\\"\\n                set-value=\\\"self.setConfigTitle\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n            </editable>\\n        </div>\\n    </div>\\n\\n    <div class=\\\"label-option-sidebar\\\" style=\\\"padding: 0 15px;\\\">\\n            <div style=\\\"display: flex;margin: 15px 0;\\\">X-Axis Scale\\n                    <div style=\\\"border-bottom: 1px solid #e4e4e4;flex: 1;margin-left: 15px;margin-bottom: 6px;\\\">\\n                    </div>\\n                </div>\\n        <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px;\\\">\\n            <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                item-label=\\\"'X Label'\\\" item-value=\\\"self.getConfigXLabel\\\"\\n                set-value=\\\"self.setConfigXLabel\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n            </editable>\\n        </div>\\n        <div style=\\\"margin-bottom: 15px; \\\"></div>\\n        <div class=\\\"selection-sidebar\\\" style=\\\"flex: 1;\\\">\\n            <span>Unit</span>\\n            <wi-dropdown-list style=\\\"flex:1; margin-left: 10px;\\\" items='self.xUnitList'\\n                current-select=\\\"self.config.xUnit || self.defaultConfig.xUnit\\\" on-item-changed=\\\"self.onXUnitChange\\\">\\n            </wi-dropdown-list>\\n        </div>\\n        <div style=\\\"margin-bottom: 15px; \\\"></div>\\n        <div style=\\\"display: flex;\\\">\\n                <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px; flex: 1;\\\">\\n                    <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                        item-label=\\\"'Left'\\\" item-value=\\\"self.getLeft\\\" set-value=\\\"self.setConfigLeft\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                        content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n                    </editable>\\n                </div>\\n                <div style=\\\"margin-right: 15px; \\\"></div>\\n                <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px; flex: 1;\\\">\\n                    <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                        item-label=\\\"'Right'\\\" item-value=\\\"self.getRight\\\"\\n                        set-value=\\\"self.setConfigRight\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                        content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n                    </editable>\\n                </div>\\n        </div>\\n        <div style=\\\"margin-bottom: 15px; \\\"></div>\\n        <div style=\\\"display: flex;\\\">\\n                <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px;flex: 1;\\\">\\n                        <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                            item-label=\\\"'Major X'\\\" item-value=\\\"self.getMajorX\\\"\\n                            set-value=\\\"self.setConfigMajorX\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                            content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n                        </editable>\\n                    </div>\\n                    <div style=\\\"margin-right: 15px; \\\"></div>\\n                    <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px;flex: 1;\\\">\\n                        <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                            item-label=\\\"'Minor X'\\\" item-value=\\\"self.getMinorX\\\"\\n                            set-value=\\\"self.setConfigMinorX\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                            content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n                        </editable>\\n                    </div>\\n        </div>\\n    </div>\\n\\n    <div class=\\\"label-option-sidebar\\\" style=\\\"padding: 0 15px;\\\">\\n        <div style=\\\"display: flex;margin: 15px 0;\\\">Y-Axis Scale\\n            <div style=\\\"border-bottom: 1px solid #e4e4e4;flex: 1;margin-left: 15px;margin-bottom: 6px;\\\">\\n            </div>\\n        </div>\\n        <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px;\\\">\\n            <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                item-label=\\\"'Y Label'\\\" item-value=\\\"self.getConfigYLabel\\\"\\n                set-value=\\\"self.setConfigYLabel\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n            </editable>\\n        </div>\\n        <div style=\\\"margin-bottom: 15px; \\\"></div>\\n        <div class=\\\"selection-sidebar\\\" style=\\\"flex: 1;\\\">\\n            <span>Unit</span>\\n            <wi-dropdown-list style=\\\"flex:1; margin-left: 10px;\\\" items='self.yUnitList'\\n                current-select=\\\"self.config.yUnit || self.defaultConfig.yUnit\\\" on-item-changed=\\\"self.onYUnitChange\\\">\\n            </wi-dropdown-list>\\n        </div>\\n        <div style=\\\"margin-bottom: 15px; \\\"></div>\\n        <div style=\\\"display: flex;\\\">\\n            <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px;flex: 1;\\\">\\n                <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                    item-label=\\\"'Bottom'\\\" item-value=\\\"self.getBottom\\\"\\n                    set-value=\\\"self.setConfigBottom\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                    content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n                </editable>\\n            </div>\\n            <div style=\\\"margin-right: 15px; \\\"></div>\\n            <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px; flex: 1;\\\">\\n                <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                    item-label=\\\"'Top'\\\" item-value=\\\"self.getTop\\\" set-value=\\\"self.setConfigTop\\\"\\n                    enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                    content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n                </editable>\\n            </div>\\n        </div>\\n\\n\\n        <div style=\\\"margin-bottom: 15px; \\\"></div>\\n        <div style=\\\"display: flex;\\\">\\n                <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px; flex: 1;\\\">\\n                        <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                            item-label=\\\"'Major Y'\\\" item-value=\\\"self.getMajorY\\\"\\n                            set-value=\\\"self.setConfigMajorY\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                            content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n                        </editable>\\n                    </div>\\n                    <div style=\\\"margin-right: 15px; \\\"></div>\\n                    <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px;flex: 1;\\\">\\n                        <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                            item-label=\\\"'Minor Y'\\\" item-value=\\\"self.getMinorY\\\"\\n                            set-value=\\\"self.setConfigMinorY\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                            content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n                        </editable>\\n                    </div>\\n\\n        </div>\\n\\n    </div>\\n    <div ng-show=\\\"self.getSelectionValue('Z1').isUsed\\\">\\n        <div class=\\\"label-option-sidebar\\\" style=\\\"padding: 0 15px;\\\">\\n            <div style=\\\"display: flex;margin: 15px 0;\\\">Color Z1\\n                    <div style=\\\"border-bottom: 1px solid #e4e4e4;flex: 1;margin-left: 15px;margin-bottom: 6px;\\\">\\n                    </div>\\n            </div>\\n            <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px;\\\">\\n                <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                    item-label=\\\"'Color Z1 Label'\\\" item-value=\\\"self.getConfigZ1Label\\\"\\n                    set-value=\\\"self.setConfigZ1Label\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                    content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n                </editable>\\n            </div>\\n            <div style=\\\"margin-bottom: 15px; \\\"></div>\\n            <div class=\\\"selection-sidebar\\\" style=\\\"flex: 1;\\\">\\n                <span>Unit</span>\\n                <wi-dropdown-list style=\\\"flex:1; margin-left: 10px;\\\" items='self.z1UnitList'\\n                    current-select=\\\"self.config.z1Unit || self.defaultConfig.z1Unit\\\" on-item-changed=\\\"self.onZ2UnitChange\\\">\\n                </wi-dropdown-list>\\n            </div>\\n            <div style=\\\"margin-bottom: 15px; \\\"></div>\\n            <div style=\\\"display: flex;\\\">\\n                <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px; flex: 1;\\\">\\n                    <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                        item-label=\\\"'Min'\\\" item-value=\\\"self.getZ1Min\\\" set-value=\\\"self.setZ1Min\\\"\\n                        enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                        content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n                    </editable>\\n                </div>\\n                <div style=\\\"margin-right: 15px; \\\"></div>\\n                <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px; flex: 1;\\\">\\n                    <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                        item-label=\\\"'Max'\\\" item-value=\\\"self.getZ1Max\\\"\\n                        set-value=\\\"self.setZ1Max\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                        content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n                    </editable>\\n                </div>\\n            </div>\\n            <div style=\\\"margin-bottom: 15px; \\\"></div>\\n            <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px;\\\">\\n                <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                    item-label=\\\"'N'\\\" item-value=\\\"self.getZ1N\\\"\\n                    set-value=\\\"self.setZ1N\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                    content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\"\\n                    edit-type=\\\"'number'\\\" min-value=\\\"1\\\" max-value=\\\"10\\\">\\n                </editable>\\n            </div>\\n        </div>\\n        <div class=\\\"label-option-sidebar\\\"\\n             style=\\\"padding: 15px 15px 5px 15px; display: flex; justify-content: space-between;  flex-direction: column;\\\">\\n            <div>\\n                <div class=\\\"selection-sidebar\\\" >\\n                    <span>Color Palette</span>\\n                    <wi-dropdown-list style=\\\"flex:1; margin-left: 10px;\\\"\\n                          current-select=\\\"self.config.currentPalName\\\"\\n                          on-item-changed=\\\"self.onChangePal\\\"\\n                          on-wi-dropdown-init=\\\"self.onPalsDropdownInit\\\">\\n                    </wi-dropdown-list>\\n                </div>\\n            </div>\\n        </div>\\n        <!-- <div style=\\\"padding: 15px 20px; display: flex; justify-content: space-between;  flex-direction: column;\\\">\\n            <span ng-class=\\\"{}\\\" style=\\\"margin-right: 8px;\\\"\\n                ng-click=\\\"self.modifyColorZ1()\\\" class=\\\"button-with-label\\\">Modify Color</span>\\n        </div> -->\\n    </div>\\n    <div ng-show=\\\"self.getSelectionValue('Z2').isUsed\\\">\\n        <div class=\\\"label-option-sidebar\\\" style=\\\"padding: 0 15px;\\\">\\n            <div style=\\\"display: flex;margin: 15px 0;\\\">Point Size Z2\\n                <div style=\\\"border-bottom: 1px solid #e4e4e4;flex: 1;margin-left: 15px;margin-bottom: 6px;\\\">\\n                </div>\\n            </div>\\n            <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px;\\\">\\n                <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                    item-label=\\\"'Point Size Z2 Label'\\\" item-value=\\\"self.getConfigZ2Label\\\"\\n                    set-value=\\\"self.setConfigZ2Label\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                    content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n                </editable>\\n            </div>\\n            <div style=\\\"margin-bottom: 15px; \\\"></div>\\n            <div class=\\\"selection-sidebar\\\" style=\\\"flex: 1;\\\">\\n                <span>Unit</span>\\n                <wi-dropdown-list style=\\\"flex:1; margin-left: 10px;\\\" items='self.z2UnitList'\\n                    current-select=\\\"self.config.z2Unit || self.defaultConfig.z2Unit\\\" on-item-changed=\\\"self.onZ2UnitChange\\\">\\n                </wi-dropdown-list>\\n            </div>\\n            <div style=\\\"margin-bottom: 15px; \\\"></div>\\n            <div style=\\\"display: flex;\\\">\\n                <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px; flex: 1;\\\">\\n                    <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                        item-label=\\\"'Min'\\\" item-value=\\\"self.getZ2Min\\\" set-value=\\\"self.setZ2Min\\\"\\n                        enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                        content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n                    </editable>\\n                </div>\\n                <div style=\\\"margin-right: 15px; \\\"></div>\\n                <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px; flex: 1;\\\">\\n                    <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                        item-label=\\\"'Max'\\\" item-value=\\\"self.getZ2Max\\\"\\n                        set-value=\\\"self.setZ2Max\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                        content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n                    </editable>\\n                </div>\\n            </div>\\n            <div style=\\\"margin-bottom: 15px; \\\"></div>\\n            <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px;\\\">\\n                <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                    item-label=\\\"'N'\\\" item-value=\\\"self.getZ2N\\\"\\n                    set-value=\\\"self.setZ2N\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                    content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\"\\n                    edit-type=\\\"'number'\\\" min-value=\\\"1\\\" max-value=\\\"10\\\">\\n                </editable>\\n            </div>\\n        </div>\\n    </div>\\n    <div ng-show=\\\"self.getSelectionValue('Z3').isUsed\\\">\\n        <div class=\\\"label-option-sidebar\\\" style=\\\"padding: 0 15px;\\\">\\n            <div style=\\\"display: flex;margin: 15px 0;\\\">Label Z3\\n                <div style=\\\"border-bottom: 1px solid #e4e4e4;flex: 1;margin-left: 15px;margin-bottom: 6px;\\\">\\n                </div>\\n            </div>\\n            <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px;\\\">\\n                <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                    item-label=\\\"'Label Z3 Label'\\\" item-value=\\\"self.getConfigZ3Label\\\"\\n                    set-value=\\\"self.setConfigZ3Label\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                    content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n                </editable>\\n            </div>\\n            <div style=\\\"margin-bottom: 15px; \\\"></div>\\n            <div class=\\\"selection-sidebar\\\" style=\\\"flex: 1;\\\">\\n                <span>Unit</span>\\n                <wi-dropdown-list style=\\\"flex:1; margin-left: 10px;\\\" items='self.z3UnitList'\\n                                  current-select=\\\"self.config.z3Unit || self.defaultConfig.z3Unit\\\" on-item-changed=\\\"self.onZ3UnitChange\\\">\\n                </wi-dropdown-list>\\n            </div>\\n            <div style=\\\"margin-bottom: 15px; \\\"></div>\\n            <div style=\\\"display: flex;\\\">\\n                <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px; flex: 1;\\\">\\n                    <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                        item-label=\\\"'Min'\\\" item-value=\\\"self.getZ3Min\\\" set-value=\\\"self.setZ3Min\\\"\\n                        enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                        content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n                    </editable>\\n                </div>\\n                <div style=\\\"margin-right: 15px; \\\"></div>\\n                <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px; flex: 1;\\\">\\n                    <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                        item-label=\\\"'Max'\\\" item-value=\\\"self.getZ3Max\\\"\\n                        set-value=\\\"self.setZ3Max\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                        content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n                    </editable>\\n                </div>\\n            </div>\\n\\n            <div style=\\\"margin-bottom: 15px; \\\"></div>\\n            <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px;\\\">\\n                <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                    item-label=\\\"'N'\\\" item-value=\\\"self.getZ3N\\\"\\n                    set-value=\\\"self.setZ3N\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                    content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\"\\n                    edit-type=\\\"'number'\\\" min-value=\\\"1\\\" max-value=\\\"10\\\">\\n                </editable>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"label-option-sidebar\\\"\\n        style=\\\"padding: 10px 15px; display: flex; justify-content: space-between;  flex-direction: column;\\\">\\n        <div style=\\\"display: flex;margin-bottom: 16px;\\\">Point Size\\n            <div\\n                style=\\\"border-bottom: 1px solid #e4e4e4;flex: 1;margin-left: 15px;margin-bottom: 6px;\\\">\\n            </div>\\n        </div>\\n        <div>\\n            <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px;\\\">\\n                <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                    item-label=\\\"'Point Size'\\\" item-value=\\\"self.getPointSize\\\" set-value=\\\"self.setPointSize\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                    content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n                </editable>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"label-option-sidebar\\\"\\n        style=\\\"padding: 10px 15px; display: flex; justify-content: space-between;  flex-direction: column;\\\">\\n        <div style=\\\"display: flex;margin-bottom: 16px;\\\">Log scales\\n            <div\\n                style=\\\"border-bottom: 1px solid #e4e4e4;flex: 1;margin-left: 15px;margin-bottom: 6px;\\\">\\n            </div>\\n        </div>\\n        <div>\\n            <span ng-class=\\\"{'active' : self.getLogaX()}\\\" style=\\\"margin-right: 8px;\\\"\\n                ng-click=\\\"self.config.logaX=!self.config.logaX\\\" class=\\\"button-with-label\\\">Loga\\n                X</span>\\n            <span ng-class=\\\"{'active' : self.getLogaY()}\\\" style=\\\"margin-right: 8px;\\\"\\n                ng-click=\\\"self.config.logaY=!self.config.logaY\\\" class=\\\"button-with-label\\\">Loga\\n                Y</span>\\n        </div>\\n    </div>\\n    <div class=\\\"label-option-sidebar\\\"\\n        style=\\\"padding: 10px 15px; display: flex; justify-content: space-between;  flex-direction: column;\\\">\\n        <div style=\\\"display: flex;margin-bottom: 16px;\\\">Color Mode\\n            <div\\n                style=\\\"border-bottom: 1px solid #e4e4e4;flex: 1;margin-left: 15px;margin-bottom: 6px;\\\">\\n            </div>\\n        </div>\\n        <div>\\n            <span ng-class=\\\"{'active' : self.config.colorMode === 'zone'}\\\"\\n                ng-click=\\\"self.config.colorMode='zone'\\\" class=\\\"button-with-label\\\"\\n                style=\\\"margin-right: 8px;\\\"> Zone Color</span>\\n            <span ng-class=\\\"{'active' : self.config.colorMode === 'well'}\\\"\\n                style=\\\"margin-right: 8px;\\\" ng-click=\\\"self.config.colorMode='well'\\\"\\n                class=\\\"button-with-label\\\">Well Color</span>\\n            <span ng-class=\\\"{'active' : self.config.colorMode === 'index'}\\\"\\n                style=\\\"margin-right: 8px;\\\" ng-click=\\\"self.config.colorMode='index'\\\"\\n                class=\\\"button-with-label\\\">Index Color</span>\\n            <!-- <span ng-class=\\\"{'active' : self.config.colorMode === 'user'}\\\"\\n                ng-click=\\\"self.config.colorMode='user'\\\" class=\\\"button-with-label\\\">User\\n                Defined</span> -->\\n        </div>\\n    </div>\\n    <div class=\\\"label-option-sidebar\\\"\\n        style=\\\"padding: 10px 15px; display: flex; justify-content: space-between;  flex-direction: column;\\\">\\n        <div style=\\\"display: flex;margin-bottom: 16px;\\\">Reverse Axis\\n            <div\\n                style=\\\"border-bottom: 1px solid #e4e4e4;flex: 1;margin-left: 15px;margin-bottom: 6px;\\\">\\n            </div>\\n        </div>\\n        <div>\\n            <span ng-click=\\\"self.reverseAxis()\\\" class=\\\"button-with-label\\\"\\n                style=\\\"margin-right: 8px;\\\">Reverse Axis</span>\\n        </div>\\n    </div>\\n    <div class=\\\"label-option-sidebar\\\"\\n        style=\\\"padding: 10px 15px; display: flex; justify-content: space-between;  flex-direction: column;\\\">\\n        <div style=\\\"display: flex;margin-bottom: 16px;\\\">Table Information\\n            <div style=\\\"border-bottom: 1px solid #e4e4e4;flex: 1;margin-left: 15px;margin-bottom: 6px;\\\">\\n            </div>\\n        </div>\\n        <div style=\\\"display: flex; flex-wrap: wrap;\\\">\\n            <span ng-repeat=\\\"(headerIdx, header) in self.statisticHeaders\\\"\\n                class=\\\"select-table-header\\\" ng-class=\\\"{'active' : self.statisticHeaderMasks[headerIdx]}\\\"\\n                ng-click=\\\"self.statisticHeaderMasks[headerIdx]= !self.statisticHeaderMasks[headerIdx]\\\">\\n                {{header}}</span>\\n        </div>\\n    </div>\\n</div>\\n\\n\";\n\n//# sourceURL=webpack:///./multi-well-crossplot/fragments/config.html?");

/***/ }),

/***/ "./multi-well-crossplot/fragments/layers.html":
/*!****************************************************!*\
  !*** ./multi-well-crossplot/fragments/layers.html ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"label-option-sidebar\\\" style=\\\"padding: 12px 20px;display: flex;background: #f4f4f4;border-bottom: 1px solid #dcdcdc;justify-content: space-between;flex-direction: column;\\\">\\n    <div>Layer Setting</div>\\n</div>\\n<div style=\\\"display: flex; padding: 16px 16px 10px 16px;\\\">\\n    <span ng-click=\\\"self.hideSelectedLayer()\\\" class=\\\"button-with-label-layer\\\"\\n        style=\\\"margin-left: 0px;\\\">Deactivate</span>\\n    <span ng-click=\\\"self.showSelectedLayer()\\\" class=\\\"button-with-label-layer\\\"\\n        style=\\\"margin-left: 15px;\\\">Activate</span>\\n    <span ng-click=\\\"self.hideAllLayer()\\\" class=\\\"button-with-label-layer\\\"\\n        style=\\\"margin-left: 15px;\\\">Deactivate All</span>\\n    <span ng-click=\\\"self.showAllLayer()\\\" class=\\\"button-with-label-layer\\\"\\n        style=\\\"margin-left: 15px;\\\">Activate All</span>\\n</div>\\n<div ng-show=\\\"self.layers\\\"\\n    style=\\\"border: 1px solid #e4e4e4;margin: 5px 15px;border-radius: 2px;flex: 1;overflow: auto; \\\" class=\\\"disable-node-caret\\\">\\n    <wi-tree-view-virtual tree-root=\\\"self.getLayerTree()\\\" get-label=\\\"self.getLayerLabel\\\"\\n        filter=\\\"self.layerFilter\\\" get-icon=\\\"self.getLayerIcon\\\"\\n        get-icons=\\\"self.getLayerIcons\\\" icon-style=\\\"self.getLayerIconStyle\\\" get-children=\\\"self.noChildren\\\" keep-children='true'\\n        run-match=\\\"self.runLayerMatch\\\" hide-unmatched=\\\"true\\\" hide-search='false'\\n        click-fn='self.click2ToggleLayer'>\\n    </wi-tree-view-virtual>\\n</div>\\n\";\n\n//# sourceURL=webpack:///./multi-well-crossplot/fragments/layers.html?");

/***/ }),

/***/ "./multi-well-crossplot/fragments/main-area.html":
/*!*******************************************************!*\
  !*** ./multi-well-crossplot/fragments/main-area.html ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"label-list-view ng-scope\\\"\\n    style=\\\"display :flex; background: #f4f4f4; padding: 9px 15px; justify-content: flex-start;\\\">\\n\\n    <span class=\\\"fn-button\\\" ng-click=\\\"self.refresh()\\\">RELOAD</span>\\n    <span class=\\\"fn-button\\\" ng-click=\\\"self.saveToAsset()\\\">SAVE</span>\\n    <span class=\\\"fn-button\\\" ng-click=\\\"self.saveAs()\\\">SAVE AS</span>\\n    <span class=\\\"fn-button\\\" ng-click=\\\"self.print()\\\">PRINT</span>\\n    <span class=\\\"fn-button\\\" ng-class=\\\"{'active' : self.showTooltip}\\\" ng-click=\\\"self.showTooltip = !self.showTooltip\\\">TOOLTIP</span>\\n    <span class=\\\"fn-button\\\" ng-click=\\\"self.exportStatistic()\\\">Export Statistic</span>\\n</div>\\n<div style=\\\"flex: 1; display: flex; flex-direction: column;\\\">\\n    <div class=\\\"main-body-center border-style printable\\\" style=\\\"position: relative;\\\" id='layer-collection'>\\n        <layer-collection v-padding=\\\"vPadding\\\" h-padding='hPadding'>\\n            <axis-layer min-val='self.getLeft()' max-val='self.getRight()' n-ticks=\\\"self.getMajorX() * self.getMinorX()\\\"\\n                minor-ticks=\\\"self.getMinorX()\\\" loga=\\\"self.getLogaX()\\\" precision=\\\"4\\\" grid=\\\"!!self.config.grid\\\"\\n                placement=\\\"1\\\" get-min-val='self.getLeft' get-max-val='self.getRight'></axis-layer>\\n            <axis-layer min-val='self.getBottom()' max-val='self.getTop()' n-ticks=\\\"self.getMajorY() * self.getMinorY()\\\"\\n                minor-ticks=\\\"self.getMinorY()\\\" loga=\\\"self.getLogaY()\\\" precision=\\\"4\\\" grid=\\\"!!self.config.grid\\\"\\n                axis-direction=\\\"'up'\\\" placement=\\\"0\\\" get-min-val='self.getBottom' get-max-val='self.getTop'></axis-layer>\\n            <scatter-layer ng-show=\\\"!layer._notUsed\\\" min-val=\\\"self.getLeft()\\\" max-val=\\\"self.getRight()\\\"\\n                min-y=\\\"self.getBottom()\\\" max-y=\\\"self.getTop()\\\" loga=\\\"self.getLogaX()\\\" ortho-loga=\\\"self.getLogaY()\\\"\\n                my-data-x=\\\"layer.dataX\\\" my-data-y=\\\"layer.dataY\\\"\\n                symbol=\\\"self.getSelectionValue('Z3').isUsed ? 'textSymbol' : 'circle'\\\" symbol-size=\\\"5\\\"\\n                symbol-fill-style=\\\"layer.color\\\" symbol-stroke-style=\\\"'transparent'\\\" color-func=\\\"layer.color\\\"\\n                point-size-func=\\\"layer.size\\\" symbol-func=\\\"layer.textSymbol\\\" ng-repeat=\\\"layer in self.layers\\\">\\n            </scatter-layer>\\n            <heat-map\\n                min-val=\\\"self.getLeft()\\\" max-val=\\\"self.getRight()\\\"\\n                min-y=\\\"self.getBottom()\\\" max-y=\\\"self.getTop()\\\"\\n                loga=\\\"self.getLogaX()\\\" ortho-loga=\\\"self.getLogaY()\\\" update-trigger=\\\"self.propMapUpdateTrigger\\\"\\n                n-row=\\\"self.getRowsNumPropMap()\\\" n-col=\\\"self.getColsNumPropMap()\\\" cell-value-fn=\\\"self.cellValuePropMap\\\" cell-color-fn=\\\"self.cellColorPropMap\\\">\\n            </heat-map>\\n            <line-formula-layer min-val='self.getLeft()' max-val=\\\"self.getRight()\\\" min-draw='self.getLeft()'\\n                max-draw=\\\"self.getRight()\\\" min-y=\\\"self.getBottom()\\\" min-draw-y=\\\"self.getBottom()\\\" max-y=\\\"self.getTop()\\\"\\n                max-draw-y=\\\"self.getTop()\\\" ortho-loga=\\\"self.getLogaY()\\\" loga=\\\"self.getLogaX()\\\" formula=\\\"self.regLine\\\"\\n                eqn-offsets=\\\"['50px', '0%']\\\" line-color=\\\"self.regLine.lineStyle.lineColor\\\"\\n                line-dash=\\\"self.regLine.lineStyle.lineStyle.join(' ')\\\" line-width=\\\"self.regLine.lineStyle.lineWidth\\\" show-equation='true'\\n                mse=\\\"self.mse\\\" ng-if='self.regLine && self.regLine.family' resolution='500'>\\n            </line-formula-layer>\\n            <line-formula-layer min-val='self.getLeft()' max-val=\\\"self.getRight()\\\" min-draw='self.getLeft()'\\n                max-draw=\\\"self.getRight()\\\" min-y=\\\"self.getBottom()\\\" min-draw-y=\\\"self.getBottom()\\\" max-y=\\\"self.getTop()\\\"\\n                max-draw-y=\\\"self.getTop()\\\" ortho-loga=\\\"self.getLogaY()\\\" loga=\\\"self.getLogaX()\\\" formula=\\\"udl\\\"\\n                eqn-offsets=\\\"['65px', self.eqnOffsetY(udlIdx)]\\\" line-color=\\\"udl.lineStyle.lineColor\\\"\\n                line-dash=\\\"udl.lineStyle.lineStyle.join(' ')\\\" line-width=\\\"udl.lineStyle.lineWidth\\\"\\n                ng-repeat=\\\"(udlIdx, udl) in self.udls \\\" show-equation='udl.displayEquation' ng-show='!udl._notUsed'\\n                resolution='500' ng-if=\\\"self.validPlotRegion()\\\">\\n            </line-formula-layer>\\n            <line-formula-layer min-val='self.getLeft()' max-val=\\\"self.getRight()\\\" min-draw='self.getLeft()'\\n                max-draw=\\\"self.getRight()\\\" min-y=\\\"self.getBottom()\\\" max-y=\\\"self.getTop()\\\" min-draw-y=\\\"self.getBottom()\\\"\\n                max-draw-y=\\\"self.getTop()\\\" ortho-loga=\\\"self.getLogaY()\\\" loga=\\\"self.getLogaX()\\\" formula=\\\"pickett\\\"\\n                show-equation='false' ng-repeat=\\\"(pickettIdx, pickett) in self.allPickettLines \\\"\\n                ng-if='self.validPlotRegion() && self.conditionForPickettPlot() && self.allPickettLines && !self.notShowPickett' resolution='5000'\\n                line-label='pickett.label' line-label-style=\\\"pickett.style\\\" ng-show='pickett._used'\\n                line-color=\\\"self.pickettLineColor(pickett)\\\">\\n            </line-formula-layer>\\n            <segment-layer min-val='self.getLeft()' max-val=\\\"self.getRight()\\\" min-draw='self.getLeft()'\\n                max-draw=\\\"self.getRight()\\\" min-y=\\\"self.getBottom()\\\" max-y=\\\"self.getTop()\\\" min-draw-y=\\\"self.getBottom()\\\"\\n                max-draw-y=\\\"self.getTop()\\\" ortho-loga=\\\"self.getLogaY()\\\" loga=\\\"self.getLogaX()\\\"\\n                ng-if='self.validPlotRegion() && self.conditionForPickettPlot() && self.allPickettLines && !self.notShowPickett'\\n                ng-repeat=\\\"(pickettSetIdx, pickettSet) in self.pickettSets \\\"\\n                show-equation='false'\\n                points=\\\"self.pickettAdjusterArray[pickettSetIdx]\\\"\\n                ng-show='pickettSet._used' mode=\\\"pickettSet._used ? 'edit' : ''\\\"\\n                on-eqn-changed=\\\"self.getUpdatePickettParamsFn(pickettSetIdx)\\\"\\n                get-point-label=\\\"self.noLabel\\\">\\n            </segment-layer>\\n            <polygon-layer ng-show=\\\"!polygon._notShow\\\" min-val=\\\"self.getLeft()\\\" max-val=\\\"self.getRight()\\\"\\n                min-y=\\\"self.getBottom()\\\" max-y=\\\"self.getTop()\\\" ng-repeat=\\\"polygon in self.polygons \\\"\\n                points=\\\"polygon.points\\\" mode=\\\"polygon.mode\\\" ortho-loga=\\\"self.getLogaY()\\\" loga=\\\"self.getLogaX()\\\"\\n                fill-style=\\\"self.polygonFillStyle(polygon)\\\" stroke-style=\\\"self.polygonStrokeStyle(polygon)\\\"\\n                show-coordinates=\\\"self.showTooltip\\\" stroke-width=\\\"self.polygonStrokeWidth(polygon)\\\">\\n            </polygon-layer>\\n            <overlay-line-layer ng-if=\\\"self.overlayLineSpec && self.overlayLineSpec.lines\\\" min-val='self.getLeft()' max-val=\\\"self.getRight()\\\"\\n                min-draw='self.getLeft()' max-draw=\\\"self.getRight()\\\" min-y=\\\"self.getBottom()\\\"\\n                min-draw-y=\\\"self.getBottom()\\\" max-y=\\\"self.getTop()\\\" max-draw-y=\\\"self.getTop()\\\"\\n                ortho-loga=\\\"self.getLogaY()\\\" loga=\\\"self.getLogaX()\\\" overlay-line-spec=\\\"self.overlayLineSpec\\\">\\n            </overlay-line-layer>\\n            <polygon-layer ng-if=\\\"self.paramGroups && self.paramGroups.length\\\" ng-show=\\\"!paramGroup._notShow\\\"\\n                ng-repeat=\\\"paramGroup in self.paramGroups \\\"\\n                min-val=\\\"self.getLeft()\\\" max-val=\\\"self.getRight()\\\"\\n                min-y=\\\"self.getBottom()\\\" max-y=\\\"self.getTop()\\\"\\n                points=\\\"self.paramGroupPointsFn(paramGroup, $index)\\\" get-x-fn=\\\"self.getParamGroupX\\\" get-y-fn=\\\"self.getParamGroupY\\\"\\n                set-x-fn=\\\"self.setParamGroupX\\\" set-y-fn=\\\"self.setParamGroupY\\\"\\n                get-point-label=\\\"self.getParamGroupPointLabel\\\"\\n                params=\\\"[$index]\\\"\\n                mode=\\\"!paramGroup._notShow\\\"\\n                show-vertex=\\\"true\\\" fill-style=\\\"'transparent'\\\">\\n            </polygon-layer>\\n            <tooltip-layer ng-if=\\\"self.showTooltip\\\" min-val=\\\"self.getLeft()\\\" max-val=\\\"self.getRight()\\\"\\n                min-y=\\\"self.getBottom()\\\" max-y=\\\"self.getTop()\\\" loga=\\\"self.getLogaX()\\\" ortho-loga=\\\"self.getLogaY()\\\"\\n                frequency-x-fn=\\\"self.getFrequencyX\\\" frequency-y-fn=\\\"self.getFrequencyY\\\" test-binding=\\\"self.getFrequencyX\\\">\\n            </tooltip-layer>\\n        </layer-collection>\\n        <p style=\\\"position: absolute; font-weight: bold; left: 50%; transform: translateX(-50%); bottom: 0\\\">\\n            {{self.getConfigXLabel()}} ({{ self.config.xUnit || self.defaultConfig.xUnit }})</p>\\n        <p style=\\\"position: absolute; top: 23px; right: 45%;text-transform: uppercase; font-weight: bold; transform: translateY(-50%);\\\">\\n            {{self.getConfigTitle()}}</p>\\n        <p style=\\\"position: absolute;left: 18px; top: 50%;font-weight: bold;transform: translate(-50%, -50%) rotate(-90deg);\\\">\\n            {{self.getConfigYLabel()}} ({{ self.config.yUnit || self.defaultConfig.yUnit }})</p>\\n    </div>\\n\\n    <div class=\\\"axis-info\\\" ng-if=\\\"(self.getSelectionValue('Z1').isUsed && self.zColors) || (self.getSelectionValue('Z2').isUsed && self.zSizes) || (self.getSelectionValue('Z3').isUsed && self.zSymbols)\\\">\\n        <div class=\\\"axis-Z\\\" ng-if=\\\"self.getSelectionValue('Z1').isUsed && self.zColors\\\">\\n            <div class=\\\"axis axis-type label\\\">\\n                <span class=\\\"ellipsis-text\\\">\\n                        {{ self.getConfigZ1Label() }}\\n                </span>\\n            </div>\\n            <div style=\\\"display: flex; flex: 1;\\\">\\n                <div class=\\\"axis axis-min label\\\">\\n                    <span class=\\\"ellipsis-text\\\">\\n                            {{ self.getZ1Min() }}\\n                    </span>\\n                </div>\\n                <div style=\\\"display: flex; flex: 1;position: relative;\\\">\\n                    <div style=\\\"display: flex; flex: 1; z-index: 1; \\\">\\n                        <div class=\\\"axis axis-line\\\" ng-repeat=\\\"segColor in self.zColors \\\"\\n                            ng-style=\\\"{'background-color':segColor}\\\">\\n                            <span></span>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"axis axis-max label\\\" style=\\\"margin-right: 0;\\\">\\n                    <span class=\\\"ellipsis-text\\\">\\n                            {{ self.getZ1Max() }}\\n                    </span>\\n                </div>\\n            </div>\\n\\n        </div>\\n        <div class=\\\"axis-Z\\\" ng-if=\\\"self.getSelectionValue('Z2').isUsed && self.zSizes\\\">\\n            <div class=\\\"axis axis-type label\\\">\\n                <span class=\\\"ellipsis-text\\\">\\n                        {{ self.getConfigZ2Label() }}\\n                </span>\\n            </div>\\n            <div style=\\\"display: flex; flex: 1;\\\">\\n                <div class=\\\"axis axis-min label\\\">\\n                    <span class=\\\"ellipsis-text\\\">\\n                            {{ self.getZ2Min() }}\\n                    </span>\\n                </div>\\n                <div style=\\\"display: flex; flex: 1;position: relative;\\\">\\n                    <div style=\\\"display: flex; flex: 1; z-index: 1; \\\">\\n                        <div class=\\\"axis axis-line\\\" ng-repeat=\\\"segSize in self.zSizes \\\">\\n                            <span>{{segSize}}</span>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"axis axis-max label\\\" style=\\\"margin-right: 0;\\\">\\n                    <span class=\\\"ellipsis-text\\\">\\n                            {{ self.getZ2Max() }}\\n                    </span>\\n                </div>\\n            </div>\\n\\n        </div>\\n        <div class=\\\"axis-Z\\\" style=\\\"margin-bottom: 0;\\\" ng-if=\\\"self.getSelectionValue('Z3').isUsed && self.zSymbols\\\">\\n            <div class=\\\"axis axis-type label\\\">\\n                <span class=\\\"ellipsis-text\\\">\\n                        {{ self.getConfigZ3Label() }}\\n                </span>\\n            </div>\\n            <div style=\\\"display: flex; flex: 1;\\\">\\n                <div class=\\\"axis axis-min label\\\">\\n                    <span class=\\\"ellipsis-text\\\">\\n                            {{ self.getZ3Min() }}\\n                    </span>\\n                </div>\\n                <div style=\\\"display: flex; flex: 1;position: relative;\\\">\\n                    <div style=\\\"display: flex; flex: 1; z-index: 1; \\\">\\n                        <div class=\\\"axis axis-line\\\" ng-repeat=\\\"segSymbol in self.zSymbols \\\">\\n                            <span>{{segSymbol}}</span>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"axis axis-max label\\\" style=\\\"margin-right: 0;\\\">\\n                    <span class=\\\"ellipsis-text\\\">\\n                            {{ self.getZ3Max() }}\\n                    </span>\\n                </div>\\n            </div>\\n\\n        </div>\\n    </div>\\n    <div class=\\\"statistic-table\\\" resizable r-directions=\\\"['top']\\\" r-flex=\\\"true\\\">\\n        <div style=\\\"overflow-x: auto; position: absolute; top: 0; right: 0; left: 0; bottom: 0;\\\">\\n            <wi-table-view ng-if=\\\"self.layers.length\\\" row-count=\\\"self.getZoneNames().length\\\"\\n                col-count=\\\"self.getHeaders().length\\\" col-headers=\\\"self.getHeaders()\\\"\\n                get-row-icons=\\\"self.getStatsRowIcons\\\" get-row-icon-style=\\\"self.getStatsIconStyle\\\"\\n                row-headers=\\\"self.getZoneNames()\\\" accessor=\\\"self.statsValue\\\" valid-row=\\\"self.isLayerUsed\\\">\\n            </wi-table-view>\\n        </div>\\n    </div>\\n</div>\\n\";\n\n//# sourceURL=webpack:///./multi-well-crossplot/fragments/main-area.html?");

/***/ }),

/***/ "./multi-well-crossplot/fragments/overlay-line.html":
/*!**********************************************************!*\
  !*** ./multi-well-crossplot/fragments/overlay-line.html ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"label-option-sidebar\\\" style=\\\"padding: 12px 20px;display: flex;background: #f4f4f4;border-bottom: 1px solid #dcdcdc;justify-content: space-between;flex-direction: column;\\\">\\n    <div>Overlay Line</div>\\n</div>\\n<div style=\\\"margin: 15px;overflow: hidden;border: 1px solid #ddd;border-radius: 2px; flex: 1;\\\" class=\\\"disable-node-caret\\\">\\n    <wi-tree-view-virtual tree-root=\\\"self.listOverlayLine\\\" \\n        get-label=\\\"self.getOvlLabel\\\" get-icon=\\\"self.getOvlIcon\\\"\\n        get-children=\\\"self.getOvlChildren\\\" keep-children='true' uncollapsible='true'\\n        run-match=\\\"self.runOvlMatch\\\" hide-unmatched=\\\"true\\\" hide-search='false'\\n        click-fn='self.clickOvlFunction'\\n        vlist-height=\\\"500\\\">\\n    </wi-tree-view-virtual>\\n</div>\\n\";\n\n//# sourceURL=webpack:///./multi-well-crossplot/fragments/overlay-line.html?");

/***/ }),

/***/ "./multi-well-crossplot/fragments/parameters.html":
/*!********************************************************!*\
  !*** ./multi-well-crossplot/fragments/parameters.html ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"label-option-sidebar\\\" style=\\\"padding: 12px 20px;display: flex;background: #f4f4f4;border-bottom: 1px solid #dcdcdc;justify-content: space-between;flex-direction: column;\\\">\\n    <div>Parameters</div>\\n</div>\\n<div style=\\\"display: flex; padding: 15px 15px 10px 15px;\\\">\\n    <span ng-click=\\\"self.hideSelectedParamGroup()\\\" class=\\\"button-with-label-layer\\\"\\n        style=\\\"margin-left: 0;\\\">Hide</span>\\n    <span ng-click=\\\"self.showSelectedParamGroup()\\\" class=\\\"button-with-label-layer\\\"\\n        style=\\\"margin-left: 10px;\\\">Show</span>\\n    <span ng-click=\\\"self.hideAllParamGroup()\\\" class=\\\"button-with-label-layer\\\"\\n        style=\\\"margin-left: 10px;\\\">Hide All</span>\\n    <span ng-click=\\\"self.showAllParamGroup()\\\" class=\\\"button-with-label-layer\\\"\\n        style=\\\"margin-left: 10px;\\\">Show All</span>\\n</div>\\n<div ng-show=\\\"self.paramGroups\\\"\\n    style=\\\"border: 1px solid #e4e4e4;margin: 5px 15px;border-radius: 2px;flex: 1;overflow: auto; \\\" class=\\\"disable-node-caret\\\">\\n    <wi-tree-view-virtual tree-root=\\\"self.paramGroups\\\" get-label=\\\"self.getParamGroupLabel\\\"\\n        filter=\\\"self.paramGroupFilter\\\" get-icon=\\\"self.getParamGroupIcon\\\" get-children=\\\"self.noChildren\\\"\\n        run-match=\\\"self.runParamGroupMatch\\\" hide-unmatched=\\\"true\\\"\\n        hide-search='false' click-fn='self.click2ToggleParamGroup'>\\n    </wi-tree-view-virtual>\\n</div>\\n\";\n\n//# sourceURL=webpack:///./multi-well-crossplot/fragments/parameters.html?");

/***/ }),

/***/ "./multi-well-crossplot/fragments/pickett-line.html":
/*!**********************************************************!*\
  !*** ./multi-well-crossplot/fragments/pickett-line.html ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"label-option-sidebar\\\" style=\\\"padding: 12px 20px;display: flex;background: #f4f4f4;border-bottom: 1px solid #dcdcdc;justify-content: space-between;flex-direction: column;\\\">\\n    <div>\\n        Picket Plot\\n    </div>\\n</div>\\n<div style=\\\"padding-bottom:0;\\\" class=\\\"label-option-sidebar\\\">\\n    <div>\\n        <div class=\\\"switch-label\\\">\\n           Show Pickett\\n            <label class=\\\"switch\\\">\\n                      <input type=\\\"checkbox\\\" checked>\\n                      <span class=\\\"slider round\\\" ng-click=\\\"self.notShowPickett = !self.notShowPickett\\\"></span>\\n            </label>\\n        </div>\\n        <div\\n            style=\\\"border-bottom: 1px solid #e4e4e4;flex: 1;margin-bottom: 6px; margin-top: 18px;\\\">\\n        </div>\\n    </div>\\n</div>\\n<div style=\\\"display: flex; flex-direction: column; height: 100%;\\\">\\n        <div style=\\\"flex: 1; overflow: auto;\\\">\\n            <div style=\\\"margin: 15px;margin-bottom:0;\\\" class='bottom-add' ng-click=\\\"self.addPickettSet()\\\">Add</div>\\n            <div style=\\\"overflow: overlay; display:flex; flex-direction: column;\\\">\\n                <div style=\\\"border: 1px solid #e4e4e4;margin: 5px 15px;border-radius: 2px; cursor: pointer;\\\"\\n                    ng-repeat='(pickettSetIdx, pickettSet) in self.pickettSets'>\\n                    <div style=\\\"display: flex; flex-direction: row;padding: 10px;background: #f4f4f4; align-items: center;justify-content: space-between;text-align: center;\\\">\\n                        <div style=\\\" display: flex;align-items: center;\\\">\\n                            <i class=\\\"header-icon\\\"\\n                                ng-class=\\\"{'fa fa-caret-down': pickettSet._notHidden, 'fa fa-caret-right': !pickettSet._notHidden}\\\"\\n                                ng-click=\\\"self.toggleShowPickettSet(pickettSetIdx)\\\"></i>\\n                            <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;margin-top:5px;\\\"\\n                                item-label=\\\"'Name: '\\\" item-value=\\\"self.pickettSetName\\\" set-value=\\\"self.changePickettSetName\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                                content-style=\\\"{flex:1,float:'none','text-align':'left'}\\\" params=\\\"pickettSetIdx\\\">\\n                            </editable>\\n                        </div>\\n                        <div>\\n                            <span\\n                                ng-class=\\\"{'red-color fa fa-eye-slash': !pickettSet._used, 'blue-color fa fa-eye': pickettSet._used }\\\"\\n                                ng-click=\\\"self.turnOnPickettSet(pickettSetIdx)\\\"\\n                                style=\\\"cursor: pointer; margin-right: 15px;\\\">\\n                            </span>\\n                            <span class=\\\"fa fa-times-circle\\\" ng-click=\\\"self.removePickettSet(pickettSetIdx)\\\"\\n                                style=\\\"color: rgb(163, 163, 163);cursor: pointer;margin-right: 5px;\\\">\\n                            </span>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"label-option-sidebar\\\" ng-show=\\\"pickettSet._notHidden\\\">\\n                        <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px;\\\">\\n                            <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                                item-label=\\\"'Rw'\\\" item-value=\\\"self.getRwParam\\\" set-value=\\\"self.setRwParam\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                                content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\" params=\\\"pickettSetIdx\\\">\\n                            </editable>\\n                        </div>\\n                        <div style=\\\"margin-bottom: 15px; \\\"></div>\\n                        <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px;\\\">\\n                            <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                                item-label=\\\"'m'\\\" item-value=\\\"self.getMParam\\\"\\n                                set-value=\\\"self.setMParam\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                                content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\" params=\\\"pickettSetIdx\\\">\\n                            </editable>\\n                        </div>\\n                        <div style=\\\"margin-bottom: 15px; \\\"></div>\\n                        <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px;\\\">\\n                            <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                                item-label=\\\"'n'\\\" item-value=\\\"self.getNParam\\\"\\n                                set-value=\\\"self.setNParam\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                                content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\" params=\\\"pickettSetIdx\\\">\\n                            </editable>\\n                        </div>\\n                        <div style=\\\"margin-bottom: 15px; \\\"></div>\\n                        <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px;\\\">\\n                            <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                                item-label=\\\"'a'\\\" item-value=\\\"self.getAParam\\\"\\n                                set-value=\\\"self.setAParam\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                                content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\" params=\\\"pickettSetIdx\\\">\\n                            </editable>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n        <div resizable r-directions=\\\"['top']\\\" r-flex=\\\"true\\\" style=\\\"flex-basis: 40%;\\\">\\n            <div style=\\\"margin: 15px;margin-bottom:0;\\\" class='bottom-add' ng-click=\\\"self.addSwParam()\\\">Add</div>\\n            <div style=\\\"overflow: overlay; display:flex; flex-direction: column;\\\">\\n                <div style=\\\"border: 1px solid #e4e4e4;margin: 5px 15px;border-radius: 2px; cursor: pointer;\\\">\\n                    <div style=\\\"display: flex; flex-direction: row;padding: 10px;background: #f4f4f4; align-items: center;justify-content: space-between;text-align: center;\\\">\\n                        <div style=\\\" display: flex;align-items: center;\\\">\\n                            <i class=\\\"header-icon\\\"\\n                                ng-class=\\\"{'fa fa-caret-down': self._showSwParams, 'fa fa-caret-right': !self._showSwParams}\\\"\\n                                ng-click=\\\"self._showSwParams = !self._showSwParams\\\"></i>\\n                            <div ng-bind=\\\"'Sw Param List'\\\" style=\\\"font-weight: bold; max-width: 120px; white-space: nowrap;text-overflow: ellipsis; overflow: hidden;\\\"></div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"label-option-sidebar\\\" ng-show=\\\"self._showSwParams\\\">\\n                        <div style=\\\"overflow: overlay;\\\">\\n                            <div class=\\\"list-formular\\\" ng-repeat=\\\"(pickettIdx, pickett) in self.swParamList\\\">\\n                                <div class=\\\"selection-sidebar\\\"\\n                                    style=\\\"padding: 9px 10px 5px 10px; flex: 4; margin-right: 15px; border: none;\\\">\\n                                    <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                                        item-label=\\\"'Sw'\\\" item-value=\\\"self.getSwParam\\\" params=\\\"pickettIdx\\\"\\n                                        set-value=\\\"self.setSwParam\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                                        content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n                                    </editable>\\n                                </div>\\n                                <div class=\\\"fa fa-times delete-button\\\" ng-click=\\\"self.removeSwParam(pickettIdx)\\\"></div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n</div>\\n<!--<div class=\\\"label-option-sidebar\\\">-->\\n    <!--<div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px;\\\">-->\\n        <!--<editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"-->\\n            <!--item-label=\\\"'Rw'\\\" item-value=\\\"self.getRwParam\\\" set-value=\\\"self.setRwParam\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"-->\\n            <!--content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">-->\\n        <!--</editable>-->\\n    <!--</div>-->\\n    <!--<div style=\\\"margin-bottom: 15px; \\\"></div>-->\\n    <!--<div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px;\\\">-->\\n        <!--<editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"-->\\n            <!--item-label=\\\"'m'\\\" item-value=\\\"self.getMParam\\\"-->\\n            <!--set-value=\\\"self.setMParam\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"-->\\n            <!--content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">-->\\n        <!--</editable>-->\\n    <!--</div>-->\\n    <!--<div style=\\\"margin-bottom: 15px; \\\"></div>-->\\n    <!--<div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px;\\\">-->\\n        <!--<editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"-->\\n            <!--item-label=\\\"'n'\\\" item-value=\\\"self.getNParam\\\"-->\\n            <!--set-value=\\\"self.setNParam\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"-->\\n            <!--content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">-->\\n        <!--</editable>-->\\n    <!--</div>-->\\n    <!--<div style=\\\"margin-bottom: 15px; \\\"></div>-->\\n    <!--<div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px;\\\">-->\\n        <!--<editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"-->\\n            <!--item-label=\\\"'a'\\\" item-value=\\\"self.getAParam\\\"-->\\n            <!--set-value=\\\"self.setNParam\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"-->\\n            <!--content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">-->\\n        <!--</editable>-->\\n    <!--</div>-->\\n    <!--<div style=\\\"margin-bottom: 15px; \\\"></div>-->\\n<!--</div>-->\\n\";\n\n//# sourceURL=webpack:///./multi-well-crossplot/fragments/pickett-line.html?");

/***/ }),

/***/ "./multi-well-crossplot/fragments/print-settings.html":
/*!************************************************************!*\
  !*** ./multi-well-crossplot/fragments/print-settings.html ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"label-option-sidebar\\\" style=\\\"padding: 12px 20px;display: flex;background: #f4f4f4;border-bottom: 1px solid #dcdcdc;justify-content: space-between;flex-direction: column;\\\">\\n    <div>Print Setting</div>\\n</div>\\n<print-settings style=\\\"overflow: auto;\\\" plot-ctrl=\\\"self\\\"></print-settings>\\n\";\n\n//# sourceURL=webpack:///./multi-well-crossplot/fragments/print-settings.html?");

/***/ }),

/***/ "./multi-well-crossplot/fragments/probability-map.html":
/*!*************************************************************!*\
  !*** ./multi-well-crossplot/fragments/probability-map.html ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"label-option-sidebar\\\" style=\\\"padding: 12px 20px;display: flex;background: #f4f4f4;border-bottom: 1px solid #dcdcdc;justify-content: space-between;flex-direction: column;\\\">\\n    <div>\\n       Probability Map \\n    </div>\\n</div>\\n<div class=\\\"label-option-sidebar\\\" style=\\\"padding: 10px 15px 0;\\\">\\n    <div style=\\\"display: flex;\\\">\\n        <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px; flex: 1;\\\">\\n            <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                item-label=\\\"'Rows'\\\" item-value=\\\"self.getRowsNumPropMap\\\" set-value=\\\"self.setRowsNumPropMap\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n            </editable>\\n        </div>\\n        <div style=\\\"margin-right: 15px; \\\"></div>\\n        <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px; flex: 1;\\\">\\n            <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                item-label=\\\"'Columns'\\\" item-value=\\\"self.getColsNumPropMap\\\"\\n                set-value=\\\"self.setColsNumPropMap\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n            </editable>\\n        </div>\\n    </div>\\n</div>\\n<div style=\\\"display: flex; padding: 10px 15px 10px 15px;\\\">\\n    <span ng-click=\\\"self.hideSelectedPropMap()\\\" class=\\\"button-with-label-layer\\\"\\n        style=\\\"margin-left: 0;\\\">Deactivate</span>\\n    <span ng-click=\\\"self.showSelectedPropMap()\\\" class=\\\"button-with-label-layer\\\"\\n        style=\\\"margin-left: 10px;\\\">Activate</span>\\n    <span ng-click=\\\"self.hideAllPropMap()\\\" class=\\\"button-with-label-layer\\\"\\n        style=\\\"margin-left: 10px;\\\">Deactivate All</span>\\n    <span ng-click=\\\"self.showAllPropMap()\\\" class=\\\"button-with-label-layer\\\"\\n        style=\\\"margin-left: 10px;\\\">Activate All</span>\\n</div>\\n<div ng-show=\\\"self.layers\\\"\\n    style=\\\"border: 1px solid #e4e4e4;margin:0 15px;border-radius: 2px;flex: 1;overflow: hidden; \\\" class=\\\"disable-node-caret\\\">\\n    <wi-tree-view-virtual tree-root=\\\"self.getLayerTree()\\\" get-label=\\\"self.getLayerLabel\\\"\\n        filter=\\\"self.layerFilter\\\" get-icon=\\\"self.getPropMapTreeIcon\\\"\\n        get-icons=\\\"self.getPropMapTreeIcons\\\" icon-style=\\\"self.getPropMapTreeIconStyle\\\" get-children=\\\"self.noChildren\\\" keep-children='true'\\n        run-match=\\\"self.runLayerMatch\\\" hide-unmatched=\\\"true\\\" hide-search='false'\\n        click-fn='self.click2TogglePropMap'>\\n    </wi-tree-view-virtual>\\n</div>\\n\";\n\n//# sourceURL=webpack:///./multi-well-crossplot/fragments/probability-map.html?");

/***/ }),

/***/ "./multi-well-crossplot/fragments/regression.html":
/*!********************************************************!*\
  !*** ./multi-well-crossplot/fragments/regression.html ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"label-option-sidebar\\\" style=\\\"padding: 12px 20px;display: flex;background: #f4f4f4;border-bottom: 1px solid #dcdcdc;justify-content: space-between;flex-direction: column;\\\">\\n    <div>\\n        Regression Line\\n    </div>\\n</div>\\n<div style=\\\"padding: 15px 15px 10px;\\\" class=\\\"label-option-sidebar\\\">\\n    <div class=\\\"selection-sidebar\\\">\\n        <span>Type</span>\\n        <wi-dropdown-list style=\\\"flex:1; margin-left: 10px;\\\" items='self.regressionTypeList'\\n            current-select=\\\"self.regressionType\\\"\\n            on-item-changed=\\\"self.onRegressionTypeChange\\\">\\n        </wi-dropdown-list>\\n    </div>\\n</div>\\n<div class=\\\"label-option-sidebar\\\"\\n    style=\\\"padding: 0 15px 10px; display: flex; justify-content: space-between;  flex-direction: column;\\\">\\n    <div ng-if=\\\"self.regressionType == 'Polynomial'\\\">\\n        <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px;\\\">\\n            <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                item-label=\\\"'Order'\\\" item-value=\\\"self.getPolynomialOrder\\\" set-value=\\\"self.setPolynomialOrder\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n            </editable>\\n        </div>\\n    </div>\\n    <div style=\\\"display: flex;\\\" ng-if=\\\"self.regressionType != 'Polynomial'\\\">\\n        <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px; flex: 1;\\\">\\n            <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                item-label=\\\"'FitX'\\\" item-value=\\\"self.getFitX\\\"\\n                set-value=\\\"self.setFitX\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n            </editable>\\n        </div>\\n        <div style=\\\"margin-right: 15px; \\\"></div>\\n        <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px; flex: 1;\\\">\\n            <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                item-label=\\\"'FitY'\\\" item-value=\\\"self.getFitY\\\"\\n                set-value=\\\"self.setFitY\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n            </editable>\\n        </div>\\n    </div>\\n</div>\\n<div style=\\\"display: flex; padding: 0 15px 10px 15px;\\\">\\n    <span ng-click=\\\"self.hideSelectedRegression()\\\" class=\\\"button-with-label-layer\\\"\\n        style=\\\"margin-left: 0;\\\">Deactivate</span>\\n    <span ng-click=\\\"self.showSelectedRegression()\\\" class=\\\"button-with-label-layer\\\"\\n        style=\\\"margin-left: 10px;\\\">Activate</span>\\n    <span ng-click=\\\"self.hideAllRegression()\\\" class=\\\"button-with-label-layer\\\"\\n        style=\\\"margin-left: 10px;\\\">Deactivate All</span>\\n    <span ng-click=\\\"self.showAllRegression()\\\" class=\\\"button-with-label-layer\\\"\\n        style=\\\"margin-left: 10px;\\\">Activate All</span>\\n</div>\\n<div ng-if=\\\"self.regLine && self.regLine.lineStyle\\\" style=\\\"display: flex; padding: 0 15px 10px 15px;\\\">\\n    <line-style style=\\\"width: 100%; padding: 0 15px;\\\" bind-line-style=\\\"self.regLine.lineStyle\\\"></line-style>\\n</div>\\n<div ng-show=\\\"self.layers\\\"\\n    style=\\\"border: 1px solid #e4e4e4;margin:0 15px;border-radius: 2px;flex: 1;overflow: hidden; \\\" class=\\\"disable-node-caret\\\">\\n    <wi-tree-view-virtual tree-root=\\\"self.getLayerTree()\\\" get-label=\\\"self.getLayerLabel\\\"\\n        filter=\\\"self.layerFilter\\\" get-icon=\\\"self.getRegIcon\\\"\\n        get-icons=\\\"self.getRegIcons\\\" icon-style=\\\"self.getRegIconStyle\\\" get-children=\\\"self.noChildren\\\" keep-children='true'\\n        run-match=\\\"self.runLayerMatch\\\" hide-unmatched=\\\"true\\\" hide-search='false'\\n        click-fn='self.click2ToggleRegression'>\\n    </wi-tree-view-virtual>\\n</div>\\n<div class=\\\"label-option-sidebar\\\"\\n    style=\\\"padding: 15px; display: flex; flex-direction: column; overflow: auto; flex: 1;\\\">\\n    <div style=\\\"display: flex;margin-bottom: 0;align-items: center;\\\">Polygon\\n        <div style=\\\"border-bottom: 1px solid #e4e4e4;flex: 1;margin: 9px;\\\"></div>\\n        <div class=\\\"ti ti-plus add-polygon\\\" ng-click=\\\"self.addPolygon()\\\"></div>\\n    </div>\\n\\n    <div style=\\\"overflow: auto; padding-top: 15px;\\\">\\n        <div class=\\\"list-polygon\\\" ng-repeat=\\\"polygon in self.polygons\\\">\\n            <div style=\\\"margin: 0 10px; border: none;\\\">\\n                <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                    item-label=\\\"\\\" item-value=\\\"polygon.label\\\" params=\\\"$index\\\"\\n                    set-value=\\\"self.setPolygonLabel\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                    content-style=\\\"self.polygonContentStyle(polygon)\\\">\\n                </editable>\\n            </div>\\n            <div style=\\\"display: flex;\\\">\\n                <div ng-class=\\\"{'red-color': !polygon.exclude, 'blue-color ': polygon.exclude }\\\"\\n                    class=\\\"button-list-polygon ti ti-control-play\\\"\\n                    title=\\\"Include\\\"\\n                    ng-click=\\\"polygon.exclude = !polygon.exclude\\\" >\\n                </div>\\n                <div ng-class=\\\"{'red-color': polygon._notUsed, 'blue-color ': !polygon._notUsed }\\\"\\n                    ng-click=\\\"polygon._notUsed = !polygon._notUsed\\\"\\n                    title=\\\"Use\\\"\\n                    class=\\\"button-list-polygon ti ti-check\\\">\\n                </div>\\n                <div ng-class=\\\"{'red-color ': polygon._notShow, 'blue-color ': !polygon._notShow }\\\"\\n                    class=\\\"button-list-polygon ti ti-eye\\\"\\n                    title=\\\"Show/hide\\\"\\n                    ng-click=\\\"polygon._notShow = !polygon._notShow\\\">\\n                </div>\\n                <div ng-class=\\\"{'red-color': !polygon.mode, 'blue-color': polygon.mode == 'edit' }\\\"\\n                    class=\\\"button-list-polygon ti ti-pencil\\\"\\n                    title=\\\"Edit\\\"\\n                    ng-click=\\\"self.toggleEditPolygon(polygon)\\\">\\n                </div>\\n                <div\\n                    class=\\\"button-list-polygon ti ti-close\\\"\\n                    title=\\\"Close\\\"\\n                    ng-click=\\\"self.removePolygon($index)\\\">\\n                </div>\\n            </div>\\n            <!-- <div style=\\\"cursor: pointer; flex: 1; border: none;\\\">\\n                <span ng-class=\\\"{'active' : true}\\\" style=\\\"margin-right: 8px;\\\"\\n                    ng-click=\\\"polygon.exclude = !polygon.exclude\\\" class=\\\"button-with-label\\\">\\n                    {{ polygon.exclude ? 'Exclude' : 'Include' }}\\n                </span>\\n                <span\\n                    ng-class=\\\"{'red-color fa fa-check': polygon._notUsed, 'blue-color fa fa-check': !polygon._notUsed }\\\"\\n                    ng-click=\\\"polygon._notUsed = !polygon._notUsed\\\"\\n                    style=\\\"cursor: pointer; margin-right: 15px;\\\">\\n                </span>\\n                <span\\n                    ng-class=\\\"{'red-color fa fa-eye-slash': polygon._notShow, 'blue-color fa fa-eye': !polygon._notShow }\\\"\\n                    ng-click=\\\"polygon._notShow = !polygon._notShow\\\"\\n                    style=\\\"cursor: pointer; margin-right: 15px;\\\">\\n                </span>\\n                <span\\n                    ng-class=\\\"{'red-color fa fa-edit': !polygon.mode, 'blue-color fa fa-edit': polygon.mode == 'edit' }\\\"\\n                    ng-click=\\\"self.toggleEditPolygon(polygon)\\\"\\n                    style=\\\"cursor: pointer; margin-right: 15px;\\\">\\n                </span>\\n            </div>\\n            <div class=\\\"fa fa-times delete-button\\\" ng-click=\\\"self.removePolygon($index)\\\"></div> -->\\n        </div>\\n    </div>\\n</div>\\n\";\n\n//# sourceURL=webpack:///./multi-well-crossplot/fragments/regression.html?");

/***/ }),

/***/ "./multi-well-crossplot/fragments/side-bar.html":
/*!******************************************************!*\
  !*** ./multi-well-crossplot/fragments/side-bar.html ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = \"<!-- <side-bar my-default-width=\\\"420\\\" orientation=\\\"w\\\" collapsed=\\\"false\\\" ng-if=\\\"self.familyTable && self.pals\\\"> -->\\n<side-bar my-default-width=\\\"420\\\" orientation=\\\"w\\\" collapsed=\\\"false\\\">\\n    <div style=\\\"display: flex; flex-direction: column; height: 100%;flex: 1;\\\">\\n        <div style=\\\"display: flex; flex-direction: column; width: 100%; height: 100%;\\\">\\n            <!-- -----WELLS----- -->\\n            <div ng-show=\\\"isSet(1)\\\" style=\\\"overflow: auto;flex: 1;display:flex;flex-direction:column;\\\">\\n                \" + __webpack_require__(/*! ./wells.html */ \"./multi-well-crossplot/fragments/wells.html\") + \"\\n            </div>\\n            <!-- -----ZONE----- -->\\n            <div ng-show=\\\"isSet(2)\\\" style=\\\"overflow: hidden;flex: 1; display: flex; flex-direction: column;\\\">\\n                \" + __webpack_require__(/*! ./zone.html */ \"./multi-well-crossplot/fragments/zone.html\") + \"\\n            </div>\\n            <!-- -----CONFIG----- -->\\n            <div ng-show=\\\"isSet(3)\\\" style=\\\"overflow: hidden; flex: 1; display: flex; flex-direction: column;\\\">\\n                \" + __webpack_require__(/*! ./config.html */ \"./multi-well-crossplot/fragments/config.html\") + \"\\n            </div>\\n            <!-- -----FORMULA----- -->\\n            <div ng-show=\\\"isSet(4)\\\"\\n                style=\\\"overflow: hidden;flex: 1; display: flex; flex-direction: column;\\\">\\n                \" + __webpack_require__(/*! ./udl.html */ \"./multi-well-crossplot/fragments/udl.html\") + \"\\n            </div>\\n            <!-- -----REGRESSION----- -->\\n            <div ng-show=\\\"isSet(5)\\\" ng-if=\\\"self.getColorPalette();\\\"\\n                style=\\\"overflow: auto;flex: 1; display: flex; flex-direction: column;\\\">\\n                \" + __webpack_require__(/*! ./regression.html */ \"./multi-well-crossplot/fragments/regression.html\") + \"\\n            </div>\\n            <!-- -----LAYERS----- -->\\n            <div ng-show=\\\"isSet(6)\\\"\\n                style=\\\"overflow: hidden;flex: 1; display: flex; flex-direction: column;\\\">\\n                \" + __webpack_require__(/*! ./layers.html */ \"./multi-well-crossplot/fragments/layers.html\") + \"\\n            </div>\\n            <!-- -----PRINT SETTINGS----- -->\\n            <div ng-show=\\\"isSet(7)\\\" style=\\\"overflow: hidden;flex: 1; display: flex; flex-direction: column;\\\">\\n                \" + __webpack_require__(/*! ./print-settings.html */ \"./multi-well-crossplot/fragments/print-settings.html\") + \"\\n            </div>\\n            <!-- -----Overlay Line----- -->\\n            <div ng-show=\\\"isSet(8)\\\" style=\\\"overflow: hidden;flex: 1; display: flex; flex-direction: column;\\\">\\n                \" + __webpack_require__(/*! ./overlay-line.html */ \"./multi-well-crossplot/fragments/overlay-line.html\") + \"\\n            </div>\\n            <!-- -----Pickett Line----- -->\\n            <div ng-show=\\\"isSet(9)\\\" style=\\\"overflow: hidden;flex: 1; display: flex; flex-direction: column;\\\">\\n                \" + __webpack_require__(/*! ./pickett-line.html */ \"./multi-well-crossplot/fragments/pickett-line.html\") + \"\\n            </div>\\n            <!-- ---- PARAMETERS ----- -->\\n            <div ng-if=\\\"self.paramGroups && self.paramGroups.length\\\" ng-show=\\\"isSet(10)\\\" style=\\\"overflow: hidden;flex: 1; display: flex; flex-direction: column;\\\">\\n                \" + __webpack_require__(/*! ./parameters.html */ \"./multi-well-crossplot/fragments/parameters.html\") + \"\\n            </div>\\n            <!-- -----Probability Map----- -->\\n            <div ng-show=\\\"isSet(10)\\\"\\n                style=\\\"overflow: auto;flex: 1; display: flex; flex-direction: column;\\\">\\n                \" + __webpack_require__(/*! ./probability-map.html */ \"./multi-well-crossplot/fragments/probability-map.html\") + \"\\n            </div>\\n        </div>\\n        <div style=\\\"display: flex;\\\" >\\n            <span class=\\\"button-update\\\" ng-class=\\\"{'disabled-click': !self.isSettingChange}\\\"\\n                ng-click=\\\"self.genLayers()\\\">\\n                Update\\n            </span>\\n        </div>\\n    </div>\\n    <div class=\\\"label-list-view\\\" style=\\\"   \\n            display: flex;\\n            border-left: 1px solid #e4e4e4;\\n            flex-direction: column;\\n            justify-content: start;\\n            padding: 0px;\\n            right: 0;\\n            min-width: 40px;\\n            background: #fff;\\n            overflow-y: overlay;\\n            overflow-x: hidden;\\n            position: sticky;\\n            box-shadow: 0 10px 10px #00000017;\\\">\\n        <div style=\\\"\\n            transform-origin: left;\\n            transform: translate(20px, -50%) rotate(90deg);\\n            display: flex;\\n            position: absolute;\\\">\\n            <div class=\\\"tab-with-label\\\" ng-class=\\\"{'active' : isSet(1)}\\\" ng-click=\\\"setTab(1)\\\">\\n                <div >\\n                    Wells\\n                </div>\\n            </div>\\n            <div class=\\\"tab-with-label\\\" ng-class=\\\"{'active' : isSet(3)}\\\" ng-click=\\\"setTab(3)\\\">\\n                <div>\\n                    Configuration\\n                </div>\\n            </div>\\n            <div class=\\\"tab-with-label\\\" ng-class=\\\"{'active' : isSet(2)}\\\" ng-click=\\\"setTab(2)\\\" ng-show=\\\"!self.paramGroups || !self.paramGroups.length\\\">\\n                <div >\\n                    Zone\\n                </div>\\n            </div>\\n            <!--<div ng-if=\\\"self.paramGroups && self.paramGroups.length\\\" class=\\\"tab-with-label\\\" ng-class=\\\"{'active' : isSet(10)}\\\" ng-click=\\\"setTab(10)\\\">-->\\n                <!--<div>Parameters</div>-->\\n            <!--</div>-->\\n            <div class=\\\"tab-with-label\\\" ng-class=\\\"{'active' : isSet(4)}\\\" ng-click=\\\"setTab(4)\\\">\\n                <div>Formula</div>\\n            </div>\\n            <div class=\\\"tab-with-label\\\" ng-class=\\\"{'active' : isSet(5)}\\\" ng-click=\\\"setTab(5)\\\">\\n                <div>Regression Line</div>\\n            </div>\\n            <div class=\\\"tab-with-label\\\" ng-class=\\\"{'active' : isSet(10)}\\\" ng-click=\\\"setTab(10)\\\">\\n                <div>Probability Map</div>\\n            </div>\\n            <div class=\\\"tab-with-label\\\" ng-class=\\\"{'active' : isSet(6)}\\\" ng-click=\\\"setTab(6)\\\">\\n                <div >\\n                    Layers\\n                </div>\\n            </div>\\n            <div class=\\\"tab-with-label\\\" ng-class=\\\"{'active' : isSet(8)}\\\" ng-click=\\\"setTab(8)\\\">\\n                <div >\\n                    Overlay Line\\n                </div>\\n            </div>\\n            <div class=\\\"tab-with-label\\\" ng-class=\\\"{'active' : isSet(9)}\\\" ng-click=\\\"setTab(9)\\\" ng-if='self.showPickettTabCondition()'>\\n                <div >\\n                    Pickett Plot\\n                </div>\\n            </div>\\n            <div class=\\\"tab-with-label\\\" ng-class=\\\"{'active' : isSet(7)}\\\" ng-click=\\\"setTab(7)\\\">\\n                <div >\\n                    Print Setting\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n </side-bar>\\n\";\n\n//# sourceURL=webpack:///./multi-well-crossplot/fragments/side-bar.html?");

/***/ }),

/***/ "./multi-well-crossplot/fragments/udl.html":
/*!*************************************************!*\
  !*** ./multi-well-crossplot/fragments/udl.html ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"label-option-sidebar\\\" style=\\\"padding: 12px 20px;display: flex;background: #f4f4f4;border-bottom: 1px solid #dcdcdc;justify-content: space-between;flex-direction: column;\\\">\\n    <div>\\n        Formular: {{self.udls.name}}\\n    </div>\\n</div>\\n<div style=\\\"display: flex; padding: 15px;\\\">\\n    <span ng-click=\\\"self.addUDL()\\\" class=\\\"button-with-label-layer\\\"\\n        style=\\\"margin-left: 0px;\\\">Add</span>\\n    <span ng-click=\\\"self.saveUDL()\\\" class=\\\"button-with-label-layer\\\"\\n        style=\\\"margin-left: 15px;\\\">Save</span>\\n    <span ng-click=\\\"self.saveAsUDL()\\\" class=\\\"button-with-label-layer\\\"\\n        style=\\\"margin-left: 15px;\\\">Save As</span>\\n    <span ng-click=\\\"self.loadUDL()\\\" class=\\\"button-with-label-layer\\\"\\n        style=\\\"margin-left: 15px;\\\">Load</span>\\n</div>\\n<!-- <div style=\\\"margin: 15px;\\\" class='bottom-add' ng-click=\\\"self.addUDL()\\\">Add</div>\\n<div style=\\\"margin: 15px;\\\" class='bottom-add' ng-click=\\\"self.saveUDL()\\\">Save</div>\\n<div style=\\\"margin: 15px;\\\" class='bottom-add' ng-click=\\\"self.saveAsUDL()\\\">Save As</div>\\n<div style=\\\"margin: 15px;\\\" class='bottom-add' ng-click=\\\"self.loadUDL()\\\">Load</div> -->\\n<div class=\\\"label-option-sidebar\\\" style=\\\"overflow: auto;\\\">\\n    <div style=\\\"overflow: overlay;\\\">\\n        <div class=\\\"list-formular\\\" ng-repeat=\\\"udl in self.udls\\\">\\n            <div class=\\\"selection-sidebar\\\"\\n                style=\\\"padding: 9px 10px 5px 10px; flex: 4; margin-right: 15px; border: none;\\\">\\n                <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                    item-label=\\\"'Y = '\\\" item-value=\\\"self.getFnUDL\\\" params=\\\"$index\\\"\\n                    set-value=\\\"self.setFnUDL\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                    content-style=\\\"{flex:1,float:'none','text-align':'left'}\\\">\\n                </editable>\\n            </div>\\n            <div class=\\\"selection-sidebar\\\"\\n                style=\\\"padding: 9px 10px 5px 10px; cursor: pointer; flex: 1; border: none;\\\">\\n                <span\\n                    ng-class=\\\"{'red-color ti ti-layout-cta-left': !udl.displayEquation, 'blue-color ti ti-layout-cta-left': udl.displayEquation }\\\"\\n                    ng-click=\\\"udl.displayEquation = !udl.displayEquation\\\"\\n                    style=\\\"cursor: pointer; margin-right: 15px; margin-top: -5px;\\\">\\n                </span>\\n                <span\\n                    ng-class=\\\"{'red-color fa fa-eye-slash': udl._notUsed, 'blue-color fa fa-eye': !udl._notUsed }\\\"\\n                    ng-click=\\\"udl._notUsed = !udl._notUsed\\\"\\n                    style=\\\"cursor: pointer; margin-right: 15px; margin-top: -5px;\\\">\\n                </span>\\n                <line-style style=\\\"min-width: 30px;\\\" bind-line-style=\\\"udl.lineStyle\\\"></line-style>\\n            </div>\\n            <div class=\\\"fa fa-times delete-button\\\" ng-click=\\\"self.removeUDL($index)\\\"></div>\\n        </div>\\n    </div>\\n</div>\\n\";\n\n//# sourceURL=webpack:///./multi-well-crossplot/fragments/udl.html?");

/***/ }),

/***/ "./multi-well-crossplot/fragments/wells.html":
/*!***************************************************!*\
  !*** ./multi-well-crossplot/fragments/wells.html ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"label-option-sidebar\\\" style=\\\"padding: 12px 20px;display: flex;background: #f4f4f4;border-bottom: 1px solid #dcdcdc;justify-content: space-between;flex-direction: column;\\\">\\n    <div>Wells</div>\\n</div>\\n<div class=\\\"label-option-sidebar\\\"\\n    style=\\\" margin-top: 5px;padding-bottom: 5px; display: flex; justify-content: space-between;\\\">\\n    <span>Input</span>\\n    <div>\\n        <span ng-class=\\\"{'active' : self.selectionType === 'family-group'}\\\"\\n            ng-click=\\\"self.selectionType='family-group'\\\" class=\\\"button-with-label\\\"\\n            style=\\\"margin-right: 8px;\\\">Family Group</span>\\n        <span ng-class=\\\"{'active' : self.selectionType === 'family'}\\\"\\n            ng-click=\\\"self.selectionType='family'\\\" class=\\\"button-with-label\\\"\\n            style=\\\"margin-right: 8px;\\\">Family</span>\\n        <span ng-class=\\\"{'active' : self.selectionType === 'curve'}\\\"\\n            ng-click=\\\"self.selectionType='curve'\\\" class=\\\"button-with-label\\\">Curve</span>\\n    </div>\\n</div>\\n<div class=\\\"label-option-sidebar\\\"\\n    style=\\\"display: flex; justify-content: space-between; padding-top: 20px;\\\">\\n    <span>Scale Axis</span>\\n    <div>\\n        <span ng-class=\\\"{'active' : self.getSelectionValue('Z1').isUsed}\\\" style=\\\"margin-right: 8px;\\\"\\n            ng-click=\\\"self.getSelectionValue('Z1').isUsed = !self.getSelectionValue('Z1').isUsed\\\" class=\\\"button-with-label\\\">\\n            Color Z1\\n        </span>\\n        <span ng-class=\\\"{'active' : self.getSelectionValue('Z2').isUsed}\\\" style=\\\"margin-right: 8px;\\\"\\n            ng-click=\\\"self.getSelectionValue('Z2').isUsed = !self.getSelectionValue('Z2').isUsed\\\" class=\\\"button-with-label\\\">\\n            Point Size Z2\\n        </span>\\n        <span ng-class=\\\"{'active' : self.getSelectionValue('Z3').isUsed}\\\" style=\\\"margin-right: 8px;\\\"\\n            ng-click=\\\"self.getSelectionValue('Z3').isUsed = !self.getSelectionValue('Z3').isUsed\\\" class=\\\"button-with-label\\\">\\n            Label Z3\\n        </span>\\n    </div>\\n</div>\\n<div style=\\\"padding: 8px 15px;\\\" class=\\\"label-option-sidebar\\\"\\n    ng-repeat=\\\"selectionValue in self.selectionValueList\\\"\\n    ng-show=\\\"selectionValue.isUsed\\\">\\n    <div class=\\\"selection-sidebar\\\">\\n        <span>{{selectionValue.label}}</span>\\n        <wi-dropdown-list style=\\\"flex:1; margin-left: 10px;\\\" items='self.selectionList'\\n            current-select=\\\"selectionValue.value\\\"\\n            on-item-changed=\\\"selectionValue.onChange\\\">\\n        </wi-dropdown-list>\\n    </div>\\n</div>\\n<div style=\\\"overflow: overlay; display:flex; flex-direction: column;\\\">\\n    <wi-sortable item-list=\\\"self.treeConfig\\\" related-list=\\\"[self.wellSpec]\\\" update-fn=\\\"self.sortableUpdate\\\">\\n        <div class=\\\"sort-item\\\" style=\\\"border: 1px solid #e4e4e4;margin: 5px 15px;border-radius: 2px; cursor: pointer;\\\"\\n            ng-repeat='well in self.treeConfig'>\\n            <div style=\\\"display: flex; flex-direction: row;padding: 10px;background: #f4f4f4; align-items: center;justify-content: space-between;text-align: center;\\\">\\n                    <div style=\\\" display: flex;align-items: center;\\\">\\n                        <i class=\\\"header-icon\\\"\\n                            ng-class=\\\"{'fa fa-caret-down': well._notHidden, 'fa fa-caret-right': !well._notHidden}\\\"\\n                            ng-click=\\\"well._notHidden = !well._notHidden\\\"></i>\\n                        <div ng-bind=\\\"well.name\\\" style=\\\"font-weight: bold; max-width: 120px; white-space: nowrap;text-overflow: ellipsis; overflow: hidden;\\\"></div>\\n                    </div>\\n\\n                    <div>\\n                        <span\\n                            ng-class=\\\"{'red-color fa fa-eye-slash': well._notUsed, 'blue-color fa fa-eye': !well._notUsed }\\\"\\n                            ng-click=\\\"self.toggleWell(well)\\\"\\n                            style=\\\"cursor: pointer; margin-right: 15px;\\\">\\n                        </span>\\n                        <span class=\\\"fa fa-filter\\\"\\n                            ng-class=\\\"{'blue-color': self.hasDiscriminator(well)}\\\"\\n                            ng-click=\\\"self.discriminatorDialog(well)\\\"\\n                            style=\\\"cursor: pointer; margin-right: 17px;\\\">\\n                        </span>\\n                        <span class=\\\"fa fa-times-circle\\\" ng-click=\\\"self.removeWell(well)\\\"\\n                            style=\\\"color: rgb(163, 163, 163);cursor: pointer;margin-right: 5px;\\\">\\n                        </span>\\n                    </div>\\n            </div>\\n            <div style=\\\"display: flex; flex-direction: row ; flex-wrap: wrap; max-width: 420px; background: #f4f4f4; align-items: center;justify-content: flex-start;text-align: center;\\\">\\n                <div class=\\\"axis-bar\\\" ng-class='{\\\"selected\\\": well.isSettingAxis == selectionValue.name}'\\n                    ng-click=\\\"well.isSettingAxis = selectionValue.name\\\"\\n                    ng-repeat=\\\"selectionValue in self.selectionValueList\\\" ng-show=\\\"selectionValue.isUsed\\\">\\n                    <div ng-bind=\\\"selectionValue.name\\\" style=\\\"font-weight: bold;\\\"></div>\\n                    <div style=\\\"margin: 0 10px; max-width: 70px; flex: 1;white-space: nowrap; text-overflow: ellipsis; overflow: hidden;\\\"\\n                        ng-bind=\\\"self.getWellSpec(well)[self.getAxisKey(selectionValue.name)].datasetName\\\"></div>\\n                    <div ng-bind=\\\"self.getCurve(well, self.getAxisKey(selectionValue.name)).name\\\"></div>\\n                </div>\\n            </div>\\n            <wi-tree-view-virtual ng-show=\\\"well._notHidden\\\" tree-root=\\\"well\\\" get-label=\\\"self.getLabel\\\"\\n                filter=\\\"self.getFilterForWell(self.getAxisKey(well.isSettingAxis))\\\" get-icon=\\\"self.getIcon\\\"\\n                get-children=\\\"self.getChildren\\\" keep-children='true' uncollapsible='true'\\n                run-match=\\\"self.runWellMatch\\\" hide-unmatched=\\\"true\\\" hide-search='true'\\n                click-fn='self.clickFunction' collapsed=\\\"false\\\">\\n            </wi-tree-view-virtual>\\n        </div>\\n    </wi-sortable>\\n</div>\\n\";\n\n//# sourceURL=webpack:///./multi-well-crossplot/fragments/wells.html?");

/***/ }),

/***/ "./multi-well-crossplot/fragments/zone.html":
/*!**************************************************!*\
  !*** ./multi-well-crossplot/fragments/zone.html ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"label-option-sidebar\\\" style=\\\"padding: 12px 20px;display: flex;background: #f4f4f4;border-bottom: 1px solid #dcdcdc;justify-content: space-between;flex-direction: column;\\\">\\n    <div>Zone</div>\\n</div>\\n<div class=\\\"label-option-sidebar\\\">\\n    <div class=\\\"selection-sidebar\\\">\\n        <span>Zoneset</span>\\n        <wi-dropdown-list style=\\\"flex:1; margin-left: 10px;\\\" items='self.zonesetList'\\n            current-select=\\\"self.zonesetName\\\"\\n            on-item-changed=\\\"self.onZonesetSelectionChanged\\\">\\n        </wi-dropdown-list>\\n    </div>\\n</div>\\n<div style=\\\"display: flex; padding: 0 15px 10px 15px;\\\">\\n    <span ng-click=\\\"self.hideSelectedZone()\\\" class=\\\"button-with-label-layer\\\"\\n        style=\\\"margin-left: 0;\\\">Deactivate</span>\\n    <span ng-click=\\\"self.showSelectedZone()\\\" class=\\\"button-with-label-layer\\\"\\n        style=\\\"margin-left: 10px;\\\">Activate</span>\\n    <span ng-click=\\\"self.hideAllZone()\\\" class=\\\"button-with-label-layer\\\"\\n        style=\\\"margin-left: 10px;\\\">Deactivate All</span>\\n    <span ng-click=\\\"self.showAllZone()\\\" class=\\\"button-with-label-layer\\\"\\n        style=\\\"margin-left: 10px;\\\">Activate All</span>\\n</div>\\n<div ng-show=\\\"self.zoneTreeUniq\\\"\\n    style=\\\"border: 1px solid #e4e4e4;margin: 5px 15px;border-radius: 2px;flex: 1;overflow: auto; \\\" class=\\\"disable-node-caret\\\">\\n    <wi-tree-view-virtual tree-root=\\\"self.zoneTreeUniq\\\" get-label=\\\"self.getZoneLabel\\\"\\n        filter=\\\"self.zoneFilter\\\" get-icon=\\\"self.getZoneIcon\\\" get-children=\\\"self.noChildren\\\"\\n        keep-children='true' run-match=\\\"self.runZoneMatch\\\" hide-unmatched=\\\"true\\\"\\n        hide-search='false' click-fn='self.click2ToggleZone'>\\n    </wi-tree-view-virtual>\\n</div>\\n<div ng-hide=\\\"self.zoneTreeUniq\\\" style=\\\"border: 1px solid #e4e4e4; margin: 5px 15px;\\\">\\n    zonationAll\\n</div>\\n\";\n\n//# sourceURL=webpack:///./multi-well-crossplot/fragments/zone.html?");

/***/ }),

/***/ "./multi-well-crossplot/index.js":
/*!***************************************!*\
  !*** ./multi-well-crossplot/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var componentName = 'multiWellCrossplot';\r\nmodule.exports.name = componentName;\r\n__webpack_require__(/*! ./style.less */ \"./multi-well-crossplot/style.less\");\r\nconst regression = __webpack_require__(/*! ../vendor/js/wi-regression */ \"./vendor/js/wi-regression.js\");\r\nconst utils = __webpack_require__(/*! ../utils */ \"./utils.js\");\r\nvar PrintableController = Printable.klass;\r\nvar component = Printable.component;\r\n\r\nconst _DECIMAL_LEN = 4;\r\nconst _PICKETT_LIMIT = 5;\r\nconst _POLYGON_LIMIT = 5;\r\n\r\nvar app = angular.module(componentName, [\r\n    'sideBar', 'wiTreeView','wiTreeViewVirtual', 'wiTableView',\r\n    'wiApi', 'editable',\r\n    'wiDialog',\r\n    'wiDroppable', 'wiDropdownList', 'angularResizable',\r\n    'plot-toolkit', 'printSettings',\r\n    'wiLoading', 'line-style'\r\n]);\r\napp.component(componentName, component({\r\n    controller: multiWellCrossplotController,\r\n    template: __webpack_require__(/*! ./template.html */ \"./multi-well-crossplot/template.html\"),\r\n    bindings: {\r\n        token: \"<\",\r\n        idProject: \"<\",\r\n        wellSpec: \"<\",\r\n        zonesetName: \"<\",\r\n        selectionType: \"=\",\r\n        selectionValueList: '<',\r\n        idCrossplot: \"<\",\r\n        config: '<',\r\n        logaX: '<',\r\n        logaY: \"<\",\r\n        scaleLeft: \"<\",\r\n        scaleRight: \"<\",\r\n        scaleBottom: \"<\",\r\n        scaleTop: \"<\",\r\n        //printSettings: '<',\r\n        onSave: '<',\r\n        onSaveAs: '<',\r\n        onInitFn: '<',\r\n        polygons: '<',\r\n        polygonExclude: '<',\r\n        regressionType: '<',\r\n        silent: \"<\",\r\n        pointSize: '<',\r\n        udlsAssetId: '<',\r\n        pickettSets: '<',\r\n        swParamList: '<',\r\n        paramGroups: '<',\r\n        paramGroupPointsFn: \"<\",\r\n        getParamGroupX: \"<\",\r\n        getParamGroupY: \"<\",\r\n        setParamGroupX: \"<\",\r\n        setParamGroupY: \"<\",\r\n        getParamGroupPointLabel: \"<\",\r\n        showAdjuster: '<',\r\n        getPickettSetRw: '<',\r\n        getPickettSetA: \"<\",\r\n        getPickettSetM: \"<\",\r\n        getPickettSetN: \"<\",\r\n        setPickettSetRw: '<',\r\n        setPickettSetA: \"<\",\r\n        setPickettSetM: \"<\",\r\n        setPickettSetN: \"<\",\r\n        getPickettSetName: \"<\",\r\n        setPickettSetName: \"<\",\r\n        getPickettSetColor: '<',\r\n        overlayLine: \"<\",\r\n        showPickettSetAt: \"<\",\r\n        showTooltip: \"<\",\r\n        onReload: '<',\r\n        afterNewPlotCreated: '<'\r\n    },\r\n    transclude: true\r\n}));\r\nmultiWellCrossplotController.$inject = ['$scope', '$timeout', '$element', '$compile', 'wiToken', 'wiApi', 'wiDialog', 'wiLoading'];\r\nfunction multiWellCrossplotController($scope, $timeout, $element, $compile, wiToken, wiApi, wiDialog, wiLoading) {\r\n    window.crossCtrl = this;\r\n    let self = this;\r\n    PrintableController.call(this, $scope, $element, $timeout, $compile, wiApi, wiLoading);\r\n    self.treeConfig = [];\r\n    self.silent = true;\r\n    self.selectedNode = null;\r\n    self.datasets = {};\r\n    self.logsData = [];\r\n    //--------------\r\n    $scope.tab = 1;\r\n    self.selectionTab = self.selectionTab || 'Wells';\r\n\r\n    $scope.setTab = function(newTab){\r\n        $scope.tab = newTab;\r\n    };\r\n\r\n    $scope.isSet = function(tabNum){\r\n        return $scope.tab === tabNum;\r\n    };\r\n    //--------------\r\n    this.getDataset = function(well) {\r\n        wiApi.getCachedWellPromise(well.idWell).then((well) => {\r\n            self.datasets[well] = well.datasets;\r\n        }).catch(e => console.error(e));\r\n    }\r\n\r\n    function getCurvesInWell(well) {\r\n        let curves = [];\r\n        well.datasets.forEach(dataset => {\r\n            curves.push(...dataset.curves);\r\n        });\r\n        return curves;\r\n    }\r\n    this.getFamilyTable = function() {\r\n        return wiApi.getFamilyTable();\r\n    }\r\n    this.getPals = function() {\r\n        return wiApi.getPalettes();\r\n    }\r\n\r\n    this.defaultBindings = function() {\r\n        if (self.token)\r\n            wiToken.setToken(self.token);\r\n        self.verticalMargin = 0;\r\n        self.horizontalMargin = 0;\r\n        self.pickettAdjusterArray = [];\r\n        self.allPickettLines = [];\r\n        self.pickettSets = self.pickettSets || [\r\n            {rw: 0.03, m: 2, n: 2, a: 1, color: 'blue'},\r\n        ];\r\n        self.pickettSets.forEach(pickettSet => {\r\n            pickettSet._used = false;\r\n        })\r\n        if (self.showPickettSetAt !== undefined) self.pickettSets[self.showPickettSetAt]._used = true;\r\n        self.pickettSets[0]._notHidden = true;\r\n        self.swParamList = self.swParamList || [{sw: 1}, {sw: 0.5}, {sw: 0.3}, {sw: 0.2}];\r\n        self.pointSize = self.pointSize || 10;\r\n        self.isSettingChange = true;\r\n        self.defaultConfig = self.defaultConfig || {};\r\n        self.showTooltip = self.showTooltip == undefined ? true : self.showTooltip;\r\n        self.wellSpec = self.wellSpec || [];\r\n        self.listOverlayLine = self.listOverlayLine || [];\r\n        self.selectionType = self.selectionType || 'family-group';\r\n        self.zoneTree = [];\r\n        self.zonesetName = self.zonesetName || \"ZonationAll\";\r\n        self.config = self.config || {familyX: \"\", familyY: \"\", familyZ1: \"\",\r\n            familyZ2: \"\", familyZ3: \"\", grid:true, displayMode: 'bar',\r\n            colorMode: 'zone', stackMode: 'well', binGap: 5, title: self.title || '',\r\n            rowsNumPropMap: 5, colsNumPropMap:7, polynomialOrder: 2\r\n        };\r\n        /*self.printSettings = self.printSettings || {orientation: 'portrait', aspectRatio: '16:9', alignment: 'left', border: false,\r\n            width: 210,\r\n            vMargin: 0,\r\n            hMargin: 0\r\n        };*/\r\n        self.polygons = self.polygons || [];\r\n        self.polygonExclude = self.polygonExclude || false;\r\n        self.selectionValueList = self.selectionValueList || self.initSelectionValueList();\r\n        self.selectionValueList.forEach(s => {\r\n            setOnChangeFn(s);\r\n        })\r\n        self.statisticHeaders = ['X-Axis','Y-Axis','Z1-Axis','Z2-Axis', 'Z3-Axis', 'Filter', 'Points', 'MSE', 'Correlation'];\r\n        self.statisticHeaderMasks = [true,true, self.getSelectionValue('Z1').isUsed, self.getSelectionValue('Z2').isUsed, self.getSelectionValue('Z3').isUsed,true,true,true,true];\r\n        self.regressionType = self.regressionType || 'Linear';\r\n        // regression type list\r\n        self.regressionTypeList = [{\r\n            data: {label: 'Linear'},\r\n            properties: {name: 'Linear'}\r\n        }, {\r\n            data: {label: 'Exponential'},\r\n            properties: {name: 'Exponential'}\r\n        }, {\r\n            data: {label: 'Power'},\r\n            properties: {name: 'Power'}\r\n        }, {\r\n            data: {label: 'Polynomial'},\r\n            properties: {name: 'Polynomial'}\r\n        }];\r\n\r\n        if (self.udlsAssetId) {\r\n            initUDL();\r\n        } else {\r\n            self.udls = [];\r\n            self.udls.name = 'Untitled';\r\n        }\r\n        if (self.overlayLine) {\r\n            self.overlayLineSpec = {idOverlayLine: self.overlayLine.idOverlayLine, name: self.overlayLine.name};\r\n        }\r\n\r\n        $scope.vPadding = 50;\r\n        $scope.hPadding = 60;\r\n        self.paramGroupPointsFn = self.paramGroupPointsFn || function(paramGroup) {\r\n            return paramGroup.points;\r\n        }\r\n        this.getParamGroupX = this.getParamGroupX || function(point) {\r\n            return point.params[0].value;\r\n        }\r\n        this.getParamGroupY = this.getParamGroupY || function(point) {\r\n            let xAxis = self.getSelectionValueList(\"X\");\r\n            if (xAxis.family) {\r\n                let param = point.params.find(param => param.$res.family === xAxis.family);\r\n                return param.value;\r\n            }\r\n            return point.params[1].value;\r\n        }\r\n        this.setParamGroupX = this.setParamGroupX || function (point, value) {\r\n            point.params[0].value = value;\r\n        }\r\n        this.setParamGroupY = this.setParamGroupY || function (point, value) {\r\n            point.params[1].value = value;\r\n        }\r\n        self.paramGroups = self.paramGroups || [];\r\n        //let zoneInfoList = self.paramGroups.map(paramGroup => paramGroup.properties);\r\n        //wiApi.indexZonesForCorrelation(zoneInfoList);\r\n\r\n        self.getPickettSetRw = self.getPickettSetRw || function(pickettSet, index) {\r\n            return pickettSet.rw || '[empty]';\r\n        }\r\n        self.setPickettSetRw = self.setPickettSetRw || function(pickettSet, index, newValue) {\r\n            pickettSet.rw = newValue;\r\n        }\r\n        self.getPickettSetA = self.getPickettSetA || function(pickettSet, index) {\r\n            return pickettSet.a || '[empty]';\r\n        }\r\n        self.setPickettSetA = self.setPickettSetA || function(pickettSet, index, newValue) {\r\n            pickettSet.a = newValue;\r\n        }\r\n        self.getPickettSetM = self.getPickettSetM || function(pickettSet, index) {\r\n            return pickettSet.m || '[empty]';\r\n        }\r\n        self.setPickettSetM = self.setPickettSetM || function(pickettSet, index, newValue) {\r\n            pickettSet.m = newValue;\r\n        }\r\n        self.getPickettSetN = self.getPickettSetN || function(pickettSet, index) {\r\n            return pickettSet.n || '[empty]';\r\n        }\r\n        self.setPickettSetN = self.setPickettSetN || function(pickettSet, index, newValue) {\r\n            pickettSet.n = newValue;\r\n        }\r\n        self.getPickettSetName = self.getPickettSetName || function(pickettSet, index) {\r\n            return self.pickettSets[index].name || `[empty]`;\r\n        }\r\n        self.setPickettSetName = self.setPickettSetName || function(pickettSet, index, newVal) {\r\n            self.pickettSets[index].name = newVal;\r\n        }\r\n        self.getPickettSetColor = self.getPickettSetColor || function(pickettSet, idx) {\r\n            return pickettSet.color || 'black';\r\n        }\r\n        self.xUnitList = self.xUnitList || [];\r\n        self.yUnitList = self.yUnitList || [];\r\n    }\r\n    this.exportStatistic = function () {\r\n        if (!self.layers.length) {\r\n            let msg = `No statistic data to export`;\r\n            if (__toastr) __toastr.error(msg);\r\n            console.error(msg);\r\n            return;\r\n        }\r\n        let rowHeaders = self.getZoneNames();\r\n        let colHeaders = self.getHeaders();\r\n        let items = [];\r\n        let headers = {\r\n            Layer: 'Layer'\r\n        };\r\n\r\n        colHeaders.forEach((cHeader, cHeaderIdx) => {\r\n            headers[cHeader] = cHeader;\r\n        })\r\n        rowHeaders.forEach((rHeader, rHeaderIdx) => {\r\n            let item = {\r\n                \"Layer\": rHeader\r\n            };\r\n            colHeaders.forEach((cHeader, cHeaderIdx) => {\r\n                item[cHeader] = self.statsValue([rHeaderIdx, cHeaderIdx]);\r\n            })\r\n            items.push(item);\r\n        });\r\n        let fileTitle = self.getConfigTitle();\r\n        utils.exportCSVFile(headers, items, fileTitle);\r\n    }\r\n    this.$onInit = function () {\r\n        self.doInit();\r\n        self.onInitFn && self.onInitFn(self);\r\n\r\n        $timeout(() => {\r\n            $scope.$watch(() => {\r\n                return self.getFamilyTable();\r\n            }, (newVal, oldVal) => {\r\n                self.familyTable = newVal;\r\n            })\r\n            $scope.$watch(() => {\r\n                return self.getPals();\r\n            }, (newVal, oldVal) => {\r\n                self.palTable = newVal;\r\n            })\r\n            $scope.$watch(() => self.config, (newVal, oldVal) => {\r\n                self.isSettingChange = true;\r\n            }, true);\r\n            $scope.$watch(() => (self.selectionType), (newVal, oldVal) => {\r\n                if (newVal === oldVal) return;\r\n                self.isSettingChange = true;\r\n                self.selectionValueList.forEach(s => s.value = '');\r\n                getSelectionList(self.selectionType, self.treeConfig);\r\n                updateDefaultConfig();\r\n            });\r\n            $scope.$watch(() => {\r\n                return self.wellSpec.map(wsp => {\r\n                    return `${wsp.xAxis ? wsp.xAxis.idCurve : ''}-\r\n                        ${wsp.yAxis ? wsp.yAxis.idCurve : ''}-\r\n                        ${wsp.z1Axis ? wsp.z1Axis.idCurve : ''}-\r\n                        ${wsp.z2Axis ? wsp.z2Axis.idCurve : ''}-\r\n                        ${wsp.z3Axis ? wsp.z3Axis.idCurve : ''}`;\r\n                }).join('');\r\n            }, () => {\r\n                self.isSettingChange = true;\r\n                updateDefaultConfig();\r\n            }, true);\r\n            $scope.$watch(() => {\r\n                return `${JSON.stringify(self.selectionValueList)}`;\r\n            }, () => {\r\n                self.isSettingChange = true;\r\n                self.updateShowZStats();\r\n                updateDefaultConfig()\r\n            });\r\n            $scope.$watch(() => (self.treeConfig.map(w => w.idWell)), () => {\r\n                self.isSettingChange = true;\r\n                getSelectionList(self.selectionType, self.treeConfig);\r\n                getZonesetsFromWells(self.treeConfig);\r\n                updateDefaultConfig();\r\n            }, true);\r\n            $scope.$watch(() => `${self.regressionType}-${JSON.stringify(self.polygons)}`, () => {\r\n                self.isSettingChange = true;\r\n                self.updateRegressionLine(self.regressionType, self.polygons);\r\n            })\r\n            $scope.$watch('tab', () => {\r\n                onTabChange();\r\n            })\r\n            $scope.$watch(() => {\r\n                return self.pickettSets.map(pickettSet => `\r\n                    ${self.getPickettSetRw(pickettSet)}-\r\n                    ${self.getPickettSetM(pickettSet)}-\r\n                    ${self.getPickettSetN(pickettSet)}-\r\n                    ${self.getPickettSetA(pickettSet)}\r\n                    `).join('');\r\n            }, () => {\r\n                self.updatePickettAdjusterArrayDebounce();\r\n            })\r\n            $scope.$watch(() => {\r\n                return self.layers.map(layer => layer._use4PropMap).join('');\r\n            }, () => {\r\n                updatePropMap();\r\n            })\r\n            getTrees();\r\n        }, 700);\r\n\r\n    }\r\n    function onTabChange() {\r\n        if ($scope.tab != 5) {\r\n            self.polygons.forEach(polygon => {\r\n                polygon.mode = null;\r\n            })\r\n        }\r\n    }\r\n    this.showPickettTabCondition = function() {\r\n        return self.validPlotRegion() && self.conditionForPickettPlot() && self.allPickettLines && !self.notShowPickett;\r\n    }\r\n\r\n    this.sortableUpdate = function() {\r\n        $scope.$digest();\r\n    }\r\n\r\n    this.eqnOffsetY = function($index) {\r\n        return `calc(${$index * 100}% + ${$scope.vPadding}px)`;\r\n    }\r\n\r\n    self.updateShowZStats = function() {\r\n        let z1Idx = self.statisticHeaders.indexOf('z1Axis');\r\n        let z2Idx = self.statisticHeaders.indexOf('z2Axis');\r\n        let z3Idx = self.statisticHeaders.indexOf('z3Axis');\r\n        self.statisticHeaderMasks[z1Idx] = self.getSelectionValue('Z1').isUsed;\r\n        self.statisticHeaderMasks[z2Idx] = self.getSelectionValue('Z2').isUsed;\r\n        self.statisticHeaderMasks[z3Idx] = self.getSelectionValue('Z3').isUsed;\r\n    }\r\n    self.statsValue = function ([row, col]) {\r\n        let statsArray = self.layers;\r\n        try {\r\n            switch(_headers[col]){\r\n                case 'X-Axis':\r\n                    return statsArray[row].curveXInfo || 'N/A';\r\n                case 'Y-Axis':\r\n                    return statsArray[row].curveYInfo || 'N/A';\r\n                case 'Z1-Axis':\r\n                    return statsArray[row].curveZ1Info || 'N/A';\r\n                case 'Z2-Axis':\r\n                    return statsArray[row].curveZ2Info || 'N/A';\r\n                case 'Z3-Axis':\r\n                    return statsArray[row].curveZ3Info || 'N/A';\r\n                case 'Filter':\r\n                    return statsArray[row].conditionExpr || 'N/A';\r\n                case 'Points':\r\n                    return statsArray[row].numPoints;\r\n                case 'MSE':\r\n                    return statsArray[row].mse || 'N/A'\r\n                case 'Correlation':\r\n                    return statsArray[row].correlation;\r\n                default:\r\n                    return \"this default\";\r\n            }\r\n        } catch {\r\n            return 'N/A';\r\n        }\r\n    }\r\n    self.getStatsRowIcons = function(rowIdx) {\r\n        return ['rectangle'];\r\n    }\r\n    self.getStatsIconStyle = function(rowIdx) {\r\n        return {\r\n            'background-color': self.layers[rowIdx].layerColor\r\n        }\r\n    }\r\n    this.calcMSE = function(a, b) {\r\n        let error = 0\r\n        for (let i = 0; i < a.length; i++) {\r\n            error += Math.pow((b[i] - a[i]), 2)\r\n        }\r\n        return error / a.length\r\n    }\r\n    this.calcCorrelation = function(x, y) {\r\n        let xDeviation = deviation(x);\r\n        let yDeviation = deviation(y);\r\n        let num = _.sum(xDeviation.map(function (xi, i) {\r\n            return xi * yDeviation[i];\r\n        }));\r\n        let den = Math.sqrt(_.sum(xDeviation.map(function (xi) {\r\n            return Math.pow(xi, 2);\r\n        })) * _.sum(yDeviation.map(function (yi) {\r\n            return Math.pow(yi, 2);\r\n        })));\r\n        return (num / den).toFixed(4);\r\n        function deviation(x) {\r\n            var xBar, n, d, i;\r\n            xBar = _.mean(x);\r\n            n = x.length;\r\n            d = new Array(n);\r\n            for (i = 0; i < n; i++) {\r\n                d[i] = x[i] - xBar;\r\n            }\r\n            return d;\r\n        }\r\n    }\r\n\r\n    this.onSelectionValueListChange = function(axisName) {\r\n        switch(axisName) {\r\n            case 'X':\r\n                delete self.config.left;\r\n                delete self.config.right;\r\n                delete self.config.xLabel;\r\n                delete self.config.logaX;\r\n                break;\r\n            case 'Y':\r\n                delete self.config.top;\r\n                delete self.config.bottom;\r\n                delete self.config.yLabel;\r\n                delete self.config.logaY;\r\n                break;\r\n        }\r\n    }\r\n    this.initSelectionValueList = () => {\r\n        let selectionValueList = [{\r\n            name: 'X',\r\n            label: 'X Axis',\r\n            value: '',\r\n            isUsed: true\r\n        }, {\r\n            name: 'Y',\r\n            label: 'Y Axis',\r\n            value: '',\r\n            isUsed: true\r\n        }, {\r\n            name: 'Z1',\r\n            label: 'Z1 Axis',\r\n            value: ''\r\n        }, {\r\n            name: 'Z2',\r\n            label: 'Z2 Axis',\r\n            value: ''\r\n        }, {\r\n            name: 'Z3',\r\n            label: 'Z3 Axis',\r\n            value: ''\r\n        }]\r\n        return selectionValueList;\r\n    }\r\n    function setOnChangeFn(obj) {\r\n        if (!obj) return;\r\n        if (!obj.onChange) {\r\n            obj.onChange = (function(selectedItemProps) {\r\n                this.value = (selectedItemProps || {}).name;\r\n            }).bind(obj);\r\n        }\r\n    }\r\n    this.getSelectionValue = (name) => {\r\n        if (!self.selectionValueList.length) return '';\r\n        let selectionValue = self.selectionValueList.find(s => {\r\n            return s.name == name;\r\n        })\r\n        return selectionValue;\r\n    }\r\n\r\n    function getSelectionList(selectionType, wellArray) {\r\n        let selectionHash = {};\r\n        let allCurves = [];\r\n        wellArray.forEach(well => {\r\n            let curvesInWell = getCurvesInWell(well);\r\n            allCurves.push(...curvesInWell);\r\n        });\r\n        switch(selectionType) {\r\n            case 'curve':\r\n                allCurves.forEach(curve => {\r\n                    selectionHash[curve.name] = 1;\r\n                })\r\n                break;\r\n            case 'family':\r\n                allCurves.forEach(curve => {\r\n                    let family = wiApi.getFamily(curve.idFamily);\r\n                    if(family)\r\n                        selectionHash[family.name] = 1;\r\n                })\r\n                break;\r\n            case 'family-group':\r\n                allCurves.forEach(curve => {\r\n                    let family = wiApi.getFamily(curve.idFamily);\r\n                    if(family)\r\n                        selectionHash[family.familyGroup] = 1;\r\n                })\r\n                break;\r\n        }\r\n        self.selectionList = Object.keys(selectionHash).map(item => ({\r\n            data:{label:item},\r\n            properties:{name:item}\r\n        }));\r\n        self.selectionList.sort((a, b) => {\r\n            return a.data.label.localeCompare(b.data.label);\r\n        })\r\n    }\r\n\r\n    this.getLabel = function (node) {\r\n        return node.name;\r\n    }\r\n    this.getIcon = function (node) {\r\n        if (node.idCurve) return 'curve-16x16';\r\n        if (node.idDataset) return 'curve-data-16x16';\r\n        if (node.idWell) return 'well-16x16';\r\n    }\r\n    this.getChildren = function (node) {\r\n        if (node.idDataset) {\r\n            return node.curves;\r\n        }\r\n        if (node.idWell) {\r\n            return node.datasets;\r\n        }\r\n        return [];\r\n    }\r\n    this.clickFunction = clickFunction;\r\n    function clickFunction($event, node, selectedObjs, treeRoot) {\r\n        let wellSpec = self.wellSpec.find(wsp => wsp.idWell === treeRoot.idWell && wsp._idx === treeRoot._idx);\r\n        switch(treeRoot.isSettingAxis) {\r\n            case 'X':\r\n                wellSpec.xAxis = {};\r\n                wellSpec.xAxis.idCurve = node.idCurve;\r\n                wellSpec.xAxis.idDataset = node.idDataset;\r\n                break;\r\n            case 'Y':\r\n                wellSpec.yAxis = {};\r\n                wellSpec.yAxis.idCurve = node.idCurve;\r\n                wellSpec.yAxis.idDataset = node.idDataset;\r\n                break;\r\n            case 'Z1':\r\n                wellSpec.z1Axis = {};\r\n                wellSpec.z1Axis.idCurve = node.idCurve;\r\n                wellSpec.z1Axis.idDataset = node.idDataset;\r\n                break;\r\n            case 'Z2':\r\n                wellSpec.z2Axis = {};\r\n                wellSpec.z2Axis.idCurve = node.idCurve;\r\n                wellSpec.z2Axis.idDataset = node.idDataset;\r\n                break;\r\n            case 'Z3':\r\n                wellSpec.z3Axis = {};\r\n                wellSpec.z3Axis.idCurve = node.idCurve;\r\n                wellSpec.z3Axis.idDataset = node.idDataset;\r\n                break;\r\n            default:\r\n        }\r\n    }\r\n    this.refresh = function(){\r\n        if (self.onReload) {\r\n            self.onReload(refresh);\r\n        } else {\r\n            refresh();\r\n        }\r\n        function refresh() {\r\n            getTrees(() => {\r\n                getZonesetsFromWells(self.treeConfig);\r\n                self.genLayers();\r\n                self.isSettingChange = true;\r\n            });\r\n            wiApi.updatePalettes(() => {\r\n                self.palTable = wiApi.getPalettes();\r\n                self.wiDropdownCtrl.items = Object.keys(self.palTable).map(palName => ({\r\n                    data: {\r\n                        label: palName\r\n                    },\r\n                    properties: {\r\n                        name: palName,\r\n                        palette: self.palTable[palName]\r\n                    }\r\n                }));\r\n            });\r\n        }\r\n    };\r\n    async function getTree(wellSpec, callback) {\r\n        let wellIdx = self.treeConfig.findIndex(wellTree => wellTree.idWell === wellSpec.idWell && wellTree._idx === wellSpec._idx);\r\n        let well = await wiApi.getCachedWellPromise(wellSpec.idWell);\r\n        wellSpec.name = well.name;\r\n        well = Object.assign({}, well);\r\n        well.isSettingAxis = 'X';\r\n        well._idx = wellSpec._idx;\r\n        $timeout(() => {\r\n            self.treeConfig.push(well);\r\n        })\r\n        return well;\r\n    }\r\n    async function getTrees(callback) {\r\n        wiLoading.show($element.find('.main')[0], self.silent);\r\n        self.treeConfig.length = 0;\r\n        for (let w of self.wellSpec) {\r\n            try {\r\n                let well = await wiApi.getCachedWellPromise(w.idWell || w);\r\n                w.name = well.name;\r\n                well = Object.assign({}, well);\r\n                well.isSettingAxis = 'X';\r\n                well._idx = w._idx;\r\n                $timeout(() => {\r\n                    self.treeConfig.push(well);\r\n                });\r\n            }\r\n            catch(e) {\r\n                w.notFound = true;\r\n                let msg = `Well ${w.name} not found`;\r\n                if (__toastr) __toastr.error(msg);\r\n                console.error(e);\r\n            }\r\n        }\r\n        self.wellSpec = self.wellSpec.filter(wellspec => !wellspec.notFound);\r\n        //if (self.idCrossplot) {\r\n        //self.saveToAsset();\r\n        //}\r\n        if (!$scope.$root.$$phase) $scope.$digest();\r\n        callback && callback();\r\n        wiLoading.hide();\r\n    }\r\n    function getZonesetsFromWells(wells) {\r\n        if (!wells.length) return;\r\n        let zsList;\r\n        for (let well of wells) {\r\n            let zonesets = well.zone_sets;\r\n            if (!zsList) {\r\n                zsList = angular.copy(zonesets);\r\n            }\r\n            else if (zsList.length) {\r\n                zsList = intersectAndMerge(zsList, zonesets);\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        self.zonesetList = (zsList || []).map( zs => ({\r\n            data: {\r\n                label: zs.name\r\n            },\r\n            properties: zs\r\n        }));\r\n        self.zonesetList.splice(0, 0, {data: {label: 'ZonationAll'}, properties: genZonationAllZS(0, 1)});\r\n        let selectedZonesetProps = (self.zonesetList.find(zs => zs.properties.name === self.zonesetName) || {}).properties;\r\n        if (!selectedZonesetProps) {\r\n            selectedZonesetProps = self.zonesetList[0].properties;\r\n        }\r\n        self.onZonesetSelectionChanged(selectedZonesetProps, false);\r\n        if (!$scope.$root.$$phase) $scope.$digest();\r\n    }\r\n    function intersectAndMerge(dstZoneList, srcZoneList) {\r\n        return dstZoneList.filter(zs => {\r\n            let zoneset = srcZoneList.find(zs1 => zs.name === zs1.name);\r\n            if (!zoneset) return false;\r\n            for (let z of zoneset.zones) {\r\n                let zone = zs.zones.find(zo => zo.zone_template.name == z.zone_template.name);\r\n                if (!zone) {\r\n                    zs.zones.push(angular.copy(z));\r\n                }\r\n            }\r\n            return true;\r\n        });\r\n    }\r\n    this.getAxisKey = function(isSettingAxis) {\r\n        switch(isSettingAxis) {\r\n            case 'X':\r\n                return 'xAxis';\r\n            case 'Y':\r\n                return 'yAxis';\r\n            case 'Z1':\r\n                return 'z1Axis';\r\n            case 'Z2':\r\n                return 'z2Axis';\r\n            case 'Z3':\r\n                return 'z3Axis';\r\n            default:\r\n        }\r\n    }\r\n    this.getCurve = getCurve;\r\n    function getCurve(well, requiredAxis) {\r\n        let wellSpec = getWellSpec(well);\r\n        if (!Object.keys(wellSpec).length) return {};\r\n        let axis = requiredAxis || self.getAxisKey(well.isSettingAxis);\r\n        let curves = getCurvesInWell(well).filter(c => self.runWellMatch(c, self.getFilterForWell(axis)));\r\n        let curve = wellSpec[axis] && wellSpec[axis].idCurve ? (curves.find(c => c.idCurve === wellSpec[axis].idCurve) || curves[0]) : curves[0];\r\n        if (!curve) {\r\n            wellSpec[axis] = {};\r\n            return undefined;\r\n        }\r\n        if (wellSpec[axis] == undefined) wellSpec[axis] = {};\r\n        wellSpec[axis].curveName = curve.name;\r\n        wellSpec[axis].idCurve = curve.idCurve;\r\n        wellSpec[axis].idDataset = curve.idDataset;\r\n\r\n        let datasets = self.getChildren(well);\r\n        let dataset = wellSpec[axis] && wellSpec[axis].idDataset ? datasets.find(ds => ds.idDataset === wellSpec[axis].idDataset):datasets[0];\r\n        wellSpec[axis].datasetName = dataset.name;\r\n        wellSpec[axis].datasetTop = parseFloat(dataset.top);\r\n        wellSpec[axis].datasetBottom = parseFloat(dataset.bottom);\r\n        wellSpec[axis].datasetStep = parseFloat(dataset.step);\r\n        return curve;\r\n    }\r\n    const EMPTY_ARRAY = []\r\n    this.noChildren = function (node) {\r\n        return EMPTY_ARRAY;\r\n    }\r\n    this.noLabel = function() {\r\n        return '';\r\n    }\r\n\r\n    // ---CONFIG---\r\n    this.getConfigLeft = function() {\r\n        self.config = self.config || {};\r\n        return isNaN(self.config.left) ? \"[empty]\": wiApi.bestNumberFormat(self.config.left, 3);\r\n    }\r\n    this.getConfigLimitTop = function () {\r\n        self.config = self.config || {};\r\n        return isNaN(self.config.limitTop) ? \"[empty]\": wiApi.bestNumberFormat(self.config.limitTop, 3);\r\n    }\r\n    this.getConfigLimitBottom = function () {\r\n        self.config = self.config || {};\r\n        return isNaN(self.config.limitBottom) ? \"[empty]\": wiApi.bestNumberFormat(self.config.limitBottom, 3);\r\n    }\r\n    this.setConfigLimitTop = function (notUse, newValue) {\r\n        self.config.limitTop = parseFloat(newValue)\r\n    }\r\n    this.setConfigLimitBottom = function (notUse, newValue) {\r\n        self.config.limitBottom = parseFloat(newValue)\r\n    }\r\n    this.setConfigLeft = function(notUse, newValue) {\r\n        self.config.left = parseFloat(newValue);\r\n    }\r\n    this.getConfigRight = function() {\r\n        self.config = self.config || {};\r\n        return isNaN(self.config.right) ? \"[empty]\": wiApi.bestNumberFormat(self.config.right, 3);\r\n    }\r\n    this.setConfigRight = function(notUse, newValue) {\r\n        self.config.right = parseFloat(newValue);\r\n    }\r\n    this.getConfigMajorX = function() {\r\n        self.config = self.config || {};\r\n        return isNaN(self.config.majorX) ? \"[empty]\": self.config.majorX;\r\n    }\r\n    this.setConfigMajorX = function(notUse, newValue) {\r\n        self.config.majorX = parseFloat(newValue);\r\n    }\r\n    this.getConfigMajorY = function() {\r\n        self.config = self.config || {};\r\n        return isNaN(self.config.majorY) ? \"[empty]\": self.config.majorY;\r\n    }\r\n    this.setConfigMajorY = function(notUse, newValue) {\r\n        self.config.majorY = parseFloat(newValue);\r\n    }\r\n    this.getConfigMinorX = function() {\r\n        self.config = self.config || {};\r\n        return isNaN(self.config.minorX) ? \"[empty]\": self.config.minorX;\r\n    }\r\n    this.setConfigMinorX = function(notUse, newValue) {\r\n        self.config.minorX = parseFloat(newValue);\r\n    }\r\n    this.getConfigMinorY = function() {\r\n        self.config = self.config || {};\r\n        return isNaN(self.config.minorY) ? \"[empty]\": self.config.minorY;\r\n    }\r\n    this.setConfigMinorY = function(notUse, newValue) {\r\n        self.config.minorY = parseFloat(newValue);\r\n    }\r\n    this.getConfigTop = function() {\r\n        self.config = self.config || {};\r\n        return isNaN(self.config.top) ? \"[empty]\": wiApi.bestNumberFormat(self.config.top, 3);\r\n    }\r\n    this.setConfigTop = function(notUse, newValue) {\r\n        self.config.top = parseFloat(newValue);\r\n    }\r\n    this.getConfigBottom = function() {\r\n        self.config = self.config || {};\r\n        return isNaN(self.config.bottom) ? \"[empty]\": wiApi.bestNumberFormat(self.config.bottom, 3);\r\n    }\r\n    this.setConfigBottom = function(notUse, newValue) {\r\n        self.config.bottom = parseFloat(newValue);\r\n    }\r\n    this.getConfigTitle = function() {\r\n        self.config = self.config || {};\r\n        return (self.config.title || \"\").length ? self.config.title : \"New Crossplot\";\r\n    }\r\n    this.setConfigTitle = function(notUse, newValue) {\r\n        self.config.title = newValue;\r\n    }\r\n    this.getConfigXLabel = function() {\r\n        self.config = self.config || {};\r\n        return (self.config.xLabel || \"\").length ? self.config.xLabel : ((self.getSelectionValue('X')||{}).value || '[Unknown]');\r\n    }\r\n    this.setConfigXLabel = function(notUse, newValue) {\r\n        self.config.xLabel = newValue;\r\n    }\r\n    this.getConfigYLabel = function() {\r\n        self.config = self.config || {};\r\n        return (self.config.yLabel || \"\").length ? self.config.yLabel : ((self.getSelectionValue('Y') || {}).value || '[Unknown]');\r\n    }\r\n    this.setConfigYLabel = function(notUse, newValue) {\r\n        self.config.yLabel = newValue;\r\n    }\r\n    this.getConfigZ1Label = function() {\r\n        self.config = self.config || {};\r\n        return (self.config.z1Label || \"\").length ? self.config.z1Label : ((self.getSelectionValue('Z1') || {}).value || '[Unknown]');\r\n    }\r\n    this.setConfigZ1Label = function(notUse, newValue) {\r\n        self.config.z1Label = newValue;\r\n    }\r\n    this.getConfigZ2Label = function() {\r\n        self.config = self.config || {};\r\n        return (self.config.z2Label || \"\").length ? self.config.z2Label : ((self.getSelectionValue('Z2') || {}).value || '[Unknown]');\r\n    }\r\n    this.setConfigZ2Label = function(notUse, newValue) {\r\n        self.config.z2Label = newValue;\r\n    }\r\n    this.getConfigZ3Label = function() {\r\n        self.config = self.config || {};\r\n        return (self.config.z3Label || \"\").length ? self.config.z3Label : ((self.getSelectionValue('Z3') || {}).value || '[Unknown]');\r\n    }\r\n    this.setConfigZ3Label = function(notUse, newValue) {\r\n        self.config.z3Label = newValue;\r\n    }\r\n    this.setZ1Min = function(notUse, newValue) {\r\n        self.config.z1Min = parseFloat(newValue);\r\n    }\r\n    this.getConfigZ1Min = function() {\r\n        self.config = self.config || {};\r\n        return isNaN(self.config.z1Min) ? \"[empty]\": wiApi.bestNumberFormat(self.config.z1Min, 3);\r\n    }\r\n    this.setZ1Max = function(notUse, newValue) {\r\n        self.config.z1Max = parseFloat(newValue);\r\n    }\r\n    this.getConfigZ1Max = function() {\r\n        self.config = self.config || {};\r\n        return isNaN(self.config.z1Max) ? \"[empty]\": wiApi.bestNumberFormat(self.config.z1Max, 3);\r\n    }\r\n    this.setZ1N = function(notUse, newValue) {\r\n        self.config.z1N = parseFloat(newValue);\r\n    }\r\n    this.setZ2Min = function(notUse, newValue) {\r\n        self.config.z2Min = parseFloat(newValue);\r\n    }\r\n    this.getConfigZ2Min = function() {\r\n        self.config = self.config || {};\r\n        return isNaN(self.config.z2Min) ? \"[empty]\": wiApi.bestNumberFormat(self.config.z2Min, 3);\r\n    }\r\n    this.setZ2Max = function(notUse, newValue) {\r\n        self.config.z2Max = parseFloat(newValue);\r\n    }\r\n    this.getConfigZ2Max = function() {\r\n        self.config = self.config || {};\r\n        return isNaN(self.config.z2Max) ? \"[empty]\": wiApi.bestNumberFormat(self.config.z2Max, 3);\r\n    }\r\n    this.setZ2N = function(notUse, newValue) {\r\n        self.config.z2N = parseFloat(newValue);\r\n    }\r\n    this.setZ3Min = function(notUse, newValue) {\r\n        self.config.z3Min = parseFloat(newValue);\r\n    }\r\n    this.getConfigZ3Min = function() {\r\n        self.config = self.config || {};\r\n        return isNaN(self.config.z3Min) ? \"[empty]\": wiApi.bestNumberFormat(self.config.z3Min, 3);\r\n    }\r\n    this.setZ3Max = function(notUse, newValue) {\r\n        self.config.z3Max = parseFloat(newValue);\r\n    }\r\n    this.getConfigZ3Max = function() {\r\n        self.config = self.config || {};\r\n        return isNaN(self.config.z3Max) ? \"[empty]\": wiApi.bestNumberFormat(self.config.z3Max, 3);\r\n    }\r\n    this.setZ3N = function(notUse, newValue) {\r\n        self.config.z3N = parseFloat(newValue);\r\n    }\r\n    this.getZ1Min = () => (isNaN(self.config.z1Min) ? (isNaN(self.defaultConfig.z1Min) ? '[empty]' : self.defaultConfig.z1Min) : self.config.z1Min)\r\n    this.getZ1Max = () => (isNaN(self.config.z1Max) ? (isNaN(self.defaultConfig.z1Max) ? '[empty]' : self.defaultConfig.z1Max) : self.config.z1Max)\r\n    this.getZ1N = () => (isNaN(self.config.z1N) ? (isNaN(self.defaultConfig.z1N) ? '[empty]' : self.defaultConfig.z1N) : self.config.z1N)\r\n    this.getZ2Min = () => (isNaN(self.config.z2Min) ? (isNaN(self.defaultConfig.z2Min) ? '[empty]' : self.defaultConfig.z2Min) : self.config.z2Min)\r\n    this.getZ2Max = () => (isNaN(self.config.z2Max) ? (isNaN(self.defaultConfig.z2Max) ? '[empty]' : self.defaultConfig.z2Max) : self.config.z2Max)\r\n    this.getZ2N = () => (isNaN(self.config.z2N) ? (isNaN(self.defaultConfig.z2N) ? '[empty]' : self.defaultConfig.z2N) : self.config.z2N)\r\n    this.getZ3Min = () => (isNaN(self.config.z3Min) ? (isNaN(self.defaultConfig.z3Min) ? '[empty]' : self.defaultConfig.z3Min) : self.config.z3Min)\r\n    this.getZ3Max = () => (isNaN(self.config.z3Max) ? (isNaN(self.defaultConfig.z3Max) ? '[empty]' : self.defaultConfig.z3Max) : self.config.z3Max)\r\n    this.getZ3N = () => (isNaN(self.config.z3N) ? (isNaN(self.defaultConfig.z3N) ? '[empty]' : self.defaultConfig.z3N) : self.config.z3N)\r\n    this.getTop = () => (isNaN(self.config.top) ? (self.scaleTop || self.defaultConfig.top || 0) : self.config.top)\r\n    this.getBottom = () => (isNaN(self.config.bottom) ? (self.scaleBottom || self.defaultConfig.bottom || 0) : self.config.bottom)\r\n    this.getLeft = () => (isNaN(self.config.left) ? (self.scaleLeft || self.defaultConfig.left || 0) : self.config.left)\r\n    //this.getRight = () => (isNaN(self.config.right) ? (self.scaleRight || self.defaultConfig.right || 0) : self.config.right)\r\n    this.getRight = function() {\r\n        if (isNaN(self.config.right)) {\r\n            return (self.scaleRight || self.defaultConfig.right || 0);\r\n        }\r\n        return self.config.right;\r\n    }\r\n    this.getMajorX = () => ( isNaN(self.config.majorX) ? (self.defaultConfig.majorX || 5) : self.config.majorX)\r\n    this.getMajorY = () => ( isNaN(self.config.majorY) ? (self.defaultConfig.majorY || 5) : self.config.majorY)\r\n    this.getMinorX = () => ( isNaN(self.config.minorX) ? (self.defaultConfig.minorX || 1) : self.config.minorX)\r\n    this.getMinorY = () => ( isNaN(self.config.minorY) ? (self.defaultConfig.minorY || 1) : self.config.minorY)\r\n    this.getLogaX = () => (self.config.logaX == undefined ? (self.logaX || self.defaultConfig.logaX || false) : self.config.logaX)\r\n    this.getLogaY = () => (self.config.logaY == undefined ? (self.logaY || self.defaultConfig.logaY || false) : self.config.logaY)\r\n    this.getColorMode = () => (self.config.colorMode || self.defaultConfig.colorMode || 'zone')\r\n    this.getColor = (zone, well, layerIdx) => {\r\n        let cMode = self.getColorMode();\r\n        switch(cMode) {\r\n            case 'zone':\r\n                return zone.zone_template.background;\r\n            case 'index':\r\n                if (!layerIdx) {\r\n                    return zone.zone_template.background;\r\n                }\r\n                let palette = self.palTable.RandomColor || self.palTable.HFU;\r\n                return utils.palette2RGB(palette[layerIdx % palette.length], false);\r\n            default:\r\n                return cMode === 'well'?utils.getWellColor(well):'red';\r\n        }\r\n    }\r\n    this.getFitX = () => self.config.fitX || 'NaN';\r\n    this.setFitX = (notUse, newVal) => {\r\n        self.config.fitX = parseFloat(newVal);\r\n    }\r\n    this.getFitY = () => self.config.fitY || 'NaN';\r\n    this.setFitY = (notUse, newVal) => {\r\n        self.config.fitY = parseFloat(newVal);\r\n    }\r\n    this.getPointSize = () => (self.pointSize);\r\n    this.setPointSize = (notUse, newVal) => {\r\n        self.isSettingChange = true;\r\n        self.pointSize = parseFloat(newVal);\r\n    }\r\n    this.getPolynomialOrder = () => (self.config.polynomialOrder || 2);\r\n    this.setPolynomialOrder = (notUse, newVal) => {\r\n        self.isSettingChange = true;\r\n        self.config.polynomialOrder = parseFloat(newVal);\r\n    }\r\n\r\n    // ---DEFAULT CONFIG\r\n    function clearDefaultConfig() {\r\n        self.defaultConfig = {};\r\n    }\r\n    function updateDefaultConfig() {\r\n        clearDefaultConfig();\r\n        self.selectionValueList.forEach(s => {\r\n            if (s.isUsed) {\r\n                setDefaultConfig(self.getAxisKey(s.name), 0);\r\n            }\r\n        })\r\n\r\n        //overlay line---------------------------------------------------\r\n        if(self.treeConfig.length){\r\n            let well = self.treeConfig[0];\r\n            let curveX = self.getCurve(well, 'xAxis');\r\n            let curveY = self.getCurve(well, 'yAxis');\r\n            if(curveX && curveY && curveX.idCurve && curveY.idCurve){\r\n                wiApi.getOverlayLinesPromise(curveX.idCurve, curveY.idCurve).then((data) => {\r\n                    $timeout(()=>{\r\n                        self.listOverlayLine = data;\r\n                        if (self.overlayLineSpec && (self.overlayLineSpec.idOverlayLine || self.overlayLineSpec.name)) {\r\n                            let showedOvl = self.listOverlayLine.find(ovl => ovl.idOverlayLine === self.overlayLineSpec.idOverlayLine ||\r\n                                self.overlayLineSpec.name === ovl.name);\r\n                            if (showedOvl) {\r\n                                clickOvlFunction(null, showedOvl);\r\n                            } else {\r\n                                self.overlayLineSpec = undefined;\r\n                            }\r\n                        }\r\n                    })\r\n                }).catch((err) => {\r\n                    console.error(err);\r\n                })\r\n            }\r\n        }\r\n        //END overlay line---------------------------------------------------\r\n\r\n        async function updateUnitList(axis, idFamily, idCurve) {\r\n            let list = await wiApi.getListUnit({\r\n                idFamily: idFamily,\r\n                idCurve: idCurve\r\n            })\r\n            list = list.map(item => ({\r\n                data: {label: item.name},\r\n                properties: {name: item.name}\r\n            }))\r\n            switch (axis) {\r\n                case 'xAxis':\r\n                    self.xUnitList = list;\r\n                    break;\r\n                case 'yAxis':\r\n                    self.yUnitList = list;\r\n                    break;\r\n                case 'z1Axis':\r\n                    self.z1UnitList = list;\r\n                    break;\r\n                case 'z2Axis':\r\n                    self.z2UnitList = list;\r\n                    break;\r\n                case 'z3Axis':\r\n                    self.z3UnitList = list;\r\n                    break;\r\n            }\r\n        }\r\n        function setDefaultConfig(axis, index) {\r\n            if (index >= self.treeConfig.length) return;\r\n            let curve = getCurve(self.treeConfig[index], axis);\r\n            if (!curve) {\r\n                setDefaultConfig(axis, index + 1);\r\n            } else {\r\n                let family = wiApi.getFamily(curve.idFamily);\r\n                if (!family) return;\r\n                updateUnitList(axis, family.idFamily, curve.idCurve);\r\n                switch (axis) {\r\n                    case 'xAxis':\r\n                        self.defaultConfig.xLabel = self.getSelectionValue('X').value;\r\n                        self.defaultConfig.left = family.family_spec[0].minScale;\r\n                        self.defaultConfig.right = family.family_spec[0].maxScale;\r\n                        self.defaultConfig.logaX = family.family_spec[0].displayType.toLowerCase() === 'logarithmic';\r\n                        self.defaultConfig.xUnit = family.family_spec[0].unit;\r\n                        if (family.idFamily != self.config.xIdFamily) {\r\n                            self.config.xIdFamily = family.idFamily;\r\n                            delete self.config.xUnit;\r\n                            delete self.config.left;\r\n                            delete self.config.right;\r\n                            delete self.config.logaX;\r\n                        }\r\n                        break;\r\n                    case 'yAxis':\r\n                        self.defaultConfig.yLabel = self.getSelectionValue('Y').value;\r\n                        self.defaultConfig.top = family.family_spec[0].maxScale;\r\n                        self.defaultConfig.bottom = family.family_spec[0].minScale;\r\n                        self.defaultConfig.logaY = family.family_spec[0].displayType.toLowerCase() === 'logarithmic';\r\n                        self.defaultConfig.yUnit = family.family_spec[0].unit;\r\n                        if (family.idFamily != self.config.yIdFamily) {\r\n                            self.config.yIdFamily = family.idFamily;\r\n                            delete self.config.yUnit;\r\n                            delete self.config.top;\r\n                            delete self.config.bottom;\r\n                            delete self.config.logaY;\r\n                        }\r\n                        break;\r\n                    case 'z1Axis':\r\n                        self.defaultConfig.z1Max = family.family_spec[0].maxScale || 100;\r\n                        self.defaultConfig.z1Min = family.family_spec[0].minScale || 0;\r\n                        self.defaultConfig.z1Unit = family.family_spec[0].unit;\r\n                        self.defaultConfig.z1N = 5;\r\n                        if (family.idFamily != self.config.z1IdFamily) {\r\n                            self.config.z1IdFamily = family.idFamily;\r\n                            delete self.config.z1Unit;\r\n                            delete self.config.z1Max;\r\n                            delete self.config.z1Min;\r\n                            delete self.config.z1N;\r\n                        }\r\n                        break;\r\n                    case 'z2Axis':\r\n                        self.defaultConfig.z2Max = family.family_spec[0].maxScale || 100;\r\n                        self.defaultConfig.z2Min = family.family_spec[0].minScale || 0;\r\n                        self.defaultConfig.z2N = 5;\r\n                        self.defaultConfig.z2Unit = family.family_spec[0].unit;\r\n                        if (family.idFamily != self.config.z2IdFamily) {\r\n                            self.config.z2IdFamily = family.idFamily;\r\n                            delete self.config.z2Unit;\r\n                            delete self.config.z2Max;\r\n                            delete self.config.z2Min;\r\n                            delete self.config.z2N;\r\n                        }\r\n                        break;\r\n                    case 'z3Axis':\r\n                        self.defaultConfig.z3Max = family.family_spec[0].maxScale || 100;\r\n                        self.defaultConfig.z3Min = family.family_spec[0].minScale || 0;\r\n                        self.defaultConfig.z3Unit = family.family_spec[0].unit;\r\n                        self.defaultConfig.z3N = 5;\r\n                        if (family.idFamily != self.config.z3IdFamily) {\r\n                            self.config.z3IdFamily = family.idFamily;\r\n                            delete self.config.z3Unit;\r\n                            delete self.config.z3Max;\r\n                            delete self.config.z3Min;\r\n                            delete self.config.z3N;\r\n                        }\r\n                        break;\r\n                    default:\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    this.onXUnitChange = function(selectedItemProps) {\r\n        let oldUnit = self.config.xUnit;\r\n        self.config.xUnit = (selectedItemProps || {}).name;\r\n        self.config.left = wiApi.convertUnit(self.getLeft(), oldUnit, self.config.xUnit);\r\n        self.config.left = parseFloat(wiApi.bestNumberFormat(self.config.left), 4)\r\n        self.config.right = wiApi.convertUnit(self.getRight(), oldUnit, self.config.xUnit);\r\n        self.config.right = parseFloat(wiApi.bestNumberFormat(self.config.right), 4)\r\n    }\r\n\r\n    this.onYUnitChange = function(selectedItemProps) {\r\n        let oldUnit = self.config.yUnit;\r\n        self.config.yUnit = (selectedItemProps || {}).name;\r\n        self.config.top = wiApi.convertUnit(self.getTop(), oldUnit, self.config.yUnit);\r\n        self.config.top = parseFloat(wiApi.bestNumberFormat(self.config.top), 4)\r\n        self.config.bottom = wiApi.convertUnit(self.getBottom(), oldUnit, self.config.yUnit);\r\n        self.config.bottom = parseFloat(wiApi.bestNumberFormat(self.config.bottom), 4)\r\n    }\r\n\r\n    this.onZ1UnitChange = function(selectedItemProps) {\r\n        let oldUnit = self.config.z1Unit;\r\n        self.config.z1Unit = (selectedItemProps || {}).name;\r\n        self.config.z1Min = wiApi.convertUnit(self.getZ1Min(), oldUnit, self.config.z1Unit);\r\n        self.config.z1Min = parseFloat(wiApi.bestNumberFormat(self.config.z1Min), 4)\r\n        self.config.z1Max = wiApi.convertUnit(self.getZ1Max(), oldUnit, self.config.z1Unit);\r\n        self.config.z1Max = parseFloat(wiApi.bestNumberFormat(self.config.z1Max), 4)\r\n    }\r\n\r\n    this.onZ2UnitChange = function(selectedItemProps) {\r\n        let oldUnit = self.config.z2Unit;\r\n        self.config.z2Unit = (selectedItemProps || {}).name;\r\n        self.config.z2Min = wiApi.convertUnit(self.getZ2Min(), oldUnit, self.config.z2Unit);\r\n        self.config.z2Min = parseFloat(wiApi.bestNumberFormat(self.config.z2Min), 4)\r\n        self.config.z2Max = wiApi.convertUnit(self.getZ2Max(), oldUnit, self.config.z2Unit);\r\n        self.config.z2Max = parseFloat(wiApi.bestNumberFormat(self.config.z2Max), 4)\r\n    }\r\n\r\n    this.onZ3UnitChange = function(selectedItemProps) {\r\n        let oldUnit = self.config.z3Unit;\r\n        self.config.z3Unit = (selectedItemProps || {}).name;\r\n        self.config.z3Min = wiApi.convertUnit(self.getZ3Min(), oldUnit, self.config.z3Unit);\r\n        self.config.z3Min = parseFloat(wiApi.bestNumberFormat(self.config.z3Min), 4)\r\n        self.config.z3Max = wiApi.convertUnit(self.getZ3Max(), oldUnit, self.config.z3Unit);\r\n        self.config.z3Max = parseFloat(wiApi.bestNumberFormat(self.config.z3Max), 4)\r\n    }\r\n\r\n    function genZonationAllZS(top, bottom, color = 'blue') {\r\n        return {\r\n            name: 'ZonationAll',\r\n            zones: [{\r\n                startDepth: top,\r\n                endDepth: bottom,\r\n                zone_template: {\r\n                    name: 'ZonationAll',\r\n                    background: color\r\n                }\r\n            }]\r\n        }\r\n    }\r\n\r\n    function filterData(curveData, zone) {\r\n        return curveData.filter(d => ((zone.startDepth - d.depth)*(zone.endDepth - d.depth) <= 0));\r\n    }\r\n\r\n    // ---ASSET\r\n    this.saveToAsset = function(close) {\r\n        let type = 'CROSSPLOT';\r\n        let content = {\r\n            wellSpec: self.wellSpec,\r\n            zonesetName: self.zonesetName,\r\n            selectionType: self.selectionType,\r\n            selectionValueList: self.selectionValueList,\r\n            polygons: self.polygons,\r\n            polygonExclude: self.polygonExclude,\r\n            regressionType: self.regressionType,\r\n            config: self.config,\r\n            pointSize: self.pointSize,\r\n            udlsAssetId: self.udlsAssetId,\r\n            pickettSets: self.pickettSets,\r\n            swParamList: self.swParamList,\r\n            showTooltip: self.showTooltip\r\n        }\r\n        if (self.overlayLineSpec) {\r\n            content.overlayLine = {\r\n                idOverlayLine: self.overlayLineSpec.idOverlayLine,\r\n                name: self.overlayLineSpec.name\r\n            };\r\n        }\r\n        if (!self.idCrossplot) {\r\n            wiDialog.promptDialog({\r\n                title: 'New Crossplot',\r\n                inputName: 'Crossplot Name',\r\n                input: self.getConfigTitle(),\r\n            }, function(name) {\r\n                wiLoading.show($element.find('.main')[0],self.silent);\r\n                wiApi.newAssetPromise(self.idProject, name, type, content)\r\n                    .then(res => {\r\n                        self.idCrossplot = res.idParameterSet;\r\n                        wiLoading.hide();\r\n                        close && close();\r\n                        self.onSave && self.onSave(res);\r\n                        __toastr && __toastr.success('Successfully saved Crossplot ' + name)\r\n                        self.afterNewPlotCreated && self.afterNewPlotCreated(res);\r\n                    })\r\n                    .catch(e => {\r\n                        wiLoading.hide();\r\n                        let msg = `Asset ${name} has been existed`;\r\n                        if (__toastr) __toastr.error(msg);\r\n                        self.saveToAsset();\r\n                    })\r\n            });\r\n        } else {\r\n            wiLoading.show($element.find('.main')[0],self.silent);\r\n            content.idParameterSet = self.idParameterSet;\r\n            wiApi.editAssetPromise(self.idCrossplot, content).then(res => {\r\n                wiLoading.hide();\r\n                __toastr && __toastr.success('Successfully saved Crossplot ' + res.name)\r\n                close && close();\r\n                self.afterNewPlotCreated && self.afterNewPlotCreated(res);\r\n            })\r\n                .catch(e => {\r\n                    wiLoading.hide();\r\n                });\r\n        }\r\n    }\r\n    this.saveAs = function() {\r\n        wiDialog.promptDialog({\r\n            title: 'Save As Crossplot',\r\n            inputName: 'Crossplot Name',\r\n            input: '',\r\n        }, function(name) {\r\n            let type = 'CROSSPLOT';\r\n            let content = {\r\n                wellSpec: self.wellSpec,\r\n                zonesetName: self.zonesetName,\r\n                selectionType: self.selectionType,\r\n                selectionValueList: self.selectionValueList,\r\n                polygons: self.polygons,\r\n                polygonExclude: self.polygonExclude,\r\n                regressionType: self.regressionType,\r\n                config: self.config,\r\n                pointSize: self.pointSize,\r\n                udlsAssetId: self.udlsAssetId,\r\n                pickettSets: self.pickettSets,\r\n                swParamList: self.swParamList,\r\n                showTooltip: self.showTooltip\r\n            }\r\n            if (self.overlayLineSpec) {\r\n                content.overlayLine = {\r\n                    idOverlayLine: self.overlayLineSpec.idOverlayLine,\r\n                    name: self.overlayLineSpec.name\r\n                };\r\n            }\r\n            wiApi.newAssetPromise(self.idProject, name, type, content)\r\n                .then(res => {\r\n                    self.onSaveAs && self.onSaveAs(res);\r\n                    __toastr && __toastr.success('Successfully saved Crossplot ' + name)\r\n                    self.afterNewPlotCreated && self.afterNewPlotCreated(res);\r\n                })\r\n                .catch(e => {\r\n                    let msg = `Asset ${name} has been existed`;\r\n                    if (__toastr) __toastr.error(msg);\r\n                    self.saveAs();\r\n                })\r\n        });\r\n    }\r\n\r\n    // ---ZONE\r\n    let _zoneNames = []\r\n    self.getZoneNames = function() {\r\n        _zoneNames.length = 0;\r\n        Object.assign(_zoneNames, self.layers.map(bins => bins.name));\r\n        return _zoneNames;\r\n    }\r\n    this.isLayerUsed = function($index) {\r\n        return !self.layers[$index]._notUsed;\r\n    }\r\n    let _headers = [];\r\n    self.getHeaders = function (){\r\n        _headers.length = 0;\r\n        Object.assign(_headers, self.statisticHeaders.filter((item, idx) => self.statisticHeaderMasks[idx]));\r\n        return _headers;\r\n    }\r\n    this.hideSelectedZone = function() {\r\n        if(!self.selectedZones) return;\r\n        self.selectedZones.forEach(layer => {\r\n            layer._notUsed = true;\r\n        });\r\n        $timeout(() => {\r\n            self.onUseZoneChange(self.selectedZones);\r\n        });\r\n    }\r\n    this.showSelectedZone = function() {\r\n        if(!self.selectedZones) return;\r\n        self.selectedZones.forEach(layer => {\r\n            layer._notUsed = false;\r\n        });\r\n        $timeout(() => {\r\n            self.onUseZoneChange(self.selectedZones);\r\n        });\r\n    }\r\n    this.hideAllZone = function() {\r\n        self.zoneTreeUniq.forEach(bins => {\r\n            bins._notUsed = true;\r\n        });\r\n        $timeout(() => {\r\n            self.layers.length = 0;\r\n        });\r\n    }\r\n    this.showAllZone = function() {\r\n        self.zoneTreeUniq.forEach(bins => {\r\n            bins._notUsed = false\r\n        });\r\n        $timeout(() => {\r\n            self.isSettingChange = true;\r\n            self.genLayers();\r\n        });\r\n    }\r\n    self._hiddenZone = [];\r\n    this.getHiddenZone = function() {\r\n        return self._hiddenZone;\r\n    }\r\n    this.getZoneIcon = (node) => ( (node && !node._notUsed) ? 'zone-16x16': 'fa fa-eye-slash' )\r\n    this._notUsedLayer = [];\r\n    this.click2ToggleZone = function ($event, node, selectedObjs) {\r\n        self.isSettingChange = true;\r\n        node._notUsed = !node._notUsed;\r\n        //self.onUseZoneChange([node]);\r\n        self.selectedZones = Object.values(selectedObjs).map(o => o.data);\r\n    }\r\n    this.onUseZoneChange = (zones) => {\r\n        switch(self.getColorMode()) {\r\n            case 'zone':\r\n                zones.forEach(zone => {\r\n                    if (zone._notUsed) {\r\n                        let layers = self.layers.filter(layer => {\r\n                            return layer.zone == `${zone.name}`;\r\n                        })\r\n                        layers.forEach(layer => {\r\n                            self._notUsedLayer.push(layer);\r\n                            self.layers.splice(self.layers.indexOf(layer), 1);\r\n                        })\r\n                    } else {\r\n                        let layers = self._notUsedLayer.filter(layer => {\r\n                            return layer.zone == `${zone.name}`;\r\n                        })\r\n                        self.layers = self.layers.concat(layers);\r\n                        self._notUsedLayer = self._notUsedLayer.filter(layer => {\r\n                            return layer.zone != `${zone.name}`;\r\n                        })\r\n                    }\r\n                })\r\n                break;\r\n            case 'well':\r\n                self.genLayers();\r\n                break;\r\n        }\r\n    }\r\n    function getZoneset(well, zonesetName = \"\") {\r\n        let zonesets = well.zone_sets;\r\n        if (zonesetName === \"\" || zonesetName === \"ZonationAll\")\r\n            return null;\r\n        return zonesets.find(zs => zs.name === zonesetName);\r\n    }\r\n    this.onZonesetSelectionChanged = function(selectedItemProps, putLog = true) {\r\n        self.isSettingChange = true;\r\n        wiApi.indexZonesForCorrelation((selectedItemProps || {}).zones)\r\n        self.zoneTree = (selectedItemProps || {}).zones;\r\n        self.zoneTreeUniq = _.uniqBy(self.zoneTree.map(zone => ({name: zone.zone_template.name})), zone => {\r\n            return zone.name;\r\n        });\r\n        self.zonesetName = (selectedItemProps || {}).name || 'ZonationAll';\r\n        if (putLog) self.addLog('success', `Change zoneset`)\r\n    }\r\n    this.runZoneMatch = function (node, criteria) {\r\n        let keySearch = criteria.toLowerCase();\r\n        let searchArray = node.name.toLowerCase();\r\n        return searchArray.includes(keySearch);\r\n    }\r\n    this.getZoneLabel = function (node) {\r\n        if(!node){\r\n            return 'aaa';\r\n        }\r\n        return `${node.name}`;\r\n    }\r\n    // ---PARAMETER GROUP\r\n    this.getParamGroupLabel = (node) => (node.properties.zone_template.name || \"N/A\")\r\n    this.getParamGroupIcon = (node) => ((node && !node._notShow)?'parameter-management-16x16':'fa fa-eye-slash')\r\n    this.runParamGroupMatch = (node, criteria) => {\r\n        let keySearch = criteria.toLowerCase();\r\n        let searchArray = self.getParamGroupLabel(node).toLowerCase();\r\n        return searchArray.includes(keySearch);\r\n    };\r\n    this.click2ToggleParamGroup = function($event, node, selectedObjs) {\r\n        node._notShow = !node._notShow;\r\n        self.selectedParamGroup = Object.values(selectedObjs).map(o => o.data);\r\n    }\r\n    this.showAllParamGroup = function() {\r\n        self.paramGroups.forEach(param => {\r\n            param._notShow = false;\r\n        })\r\n    }\r\n    this.hideAllParamGroup = function() {\r\n        self.paramGroups.forEach(param => {\r\n            param._notShow = true;\r\n        })\r\n    }\r\n    this.showSelectedParamGroup = function() {\r\n        if (!self.selectedParamGroup || !self.selectedParamGroup.length) return;\r\n        self.selectedParamGroup.forEach(param => {\r\n            param._notShow = false;\r\n        })\r\n    }\r\n    this.hideSelectedParamGroup = function() {\r\n        if (!self.selectedParamGroup || !self.selectedParamGroup.length) return;\r\n        self.selectedParamGroup.forEach(param => {\r\n            param._notShow = true;\r\n        })\r\n    }\r\n\r\n    // ---WELL\r\n    this.getWellSpec = getWellSpec;\r\n    function getWellSpec(well) {\r\n        if (!well) return {};\r\n        return self.wellSpec.find(wsp => wsp.idWell === well.idWell && well._idx === wsp._idx);\r\n    }\r\n    this.onDrop = function (event, helper, myData) {\r\n        let idWells = helper.data('idWells');\r\n        if (idWells && idWells.length) {\r\n            $timeout(() => {\r\n                async.eachSeries(idWells, (idWell, next) => {\r\n                    wiApi.getCachedWellPromise(idWell)\r\n                        .then((well) => {\r\n                            let zonesets = well.zone_sets;\r\n                            let hasZonesetName = self.zonesetName != 'ZonationAll' ? zonesets.some(zs => zs.name == self.zonesetName) : true;\r\n                            $timeout(() => {\r\n                                if (hasZonesetName) {\r\n                                    let _idx = _.max(self.wellSpec.filter(ws => ws.idWell === idWell).map(ws => ws._idx));\r\n                                    _idx = (_idx >= 0 ? _idx : -1) + 1;\r\n                                    self.wellSpec.push({idWell, _idx});\r\n                                    self.addLog('success', `Add well ${well.name}`)\r\n                                    let wellTree = getTree(self.wellSpec[self.wellSpec.length - 1]);\r\n                                    let curveX = getCurve({...well, _idx}, 'xAxis');\r\n                                    let curveY = getCurve({...well, _idx}, 'yAxis');\r\n                                    if ((self.getSelectionValue('X').value && !curveX) || (self.getSelectionValue('Y').value && !curveY)) {\r\n                                        let msg = `Well ${well.name} does not meet requirement`;\r\n                                        if (__toastr) __toastr.warning(msg);\r\n                                        console.warn(msg);\r\n                                    }\r\n                                } else {\r\n                                    let msg = `Well ${well.name} does not meet input Zone ${self.zonesetName}`;\r\n                                    if (__toastr) __toastr.error(msg);\r\n                                    console.error(new Error(msg));\r\n                                }\r\n                                next();\r\n                            })\r\n                        })\r\n                        .catch(e => {\r\n                            console.error(e);\r\n                            next();\r\n                        });\r\n                }, err => {\r\n                    if (err) {\r\n                        console.error(err);\r\n                    }\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    this.getOvlLabel = function(node){\r\n        return node.name;\r\n    }\r\n    this.getOvlIcon = function (node){\r\n        return (node && !node._used) ? 'fa fa-eye-slash': 'blue-color fa fa-eye';\r\n    }\r\n    this.getOvlChildren = function (node){\r\n        return [];\r\n    }\r\n    this.runOvlMatch = function (node, keysearch){\r\n        return node.name.toLowerCase().includes(keysearch.toLowerCase());\r\n    }\r\n    this.clickOvlFunction = clickOvlFunction;\r\n    function clickOvlFunction(event, node){\r\n        let _used = node._used;\r\n        self.listOverlayLine.forEach((item)=>{\r\n            item._used = false;\r\n        });\r\n        if (!_used) {\r\n            node._used = true;\r\n\r\n            let idCurveX = self.wellSpec[0].xAxis.idCurve;\r\n            let idCurveY = self.wellSpec[0].yAxis.idCurve;\r\n            wiApi.getOverlayLinePromise(node.idOverlayLine, idCurveX, idCurveY).then((ovlProps) => {\r\n                $timeout(() => {\r\n                    self.addLog('success', `Change Overlayline`)\r\n                    let isSwap = ovlProps.data.isSwap;\r\n                    self.overlayLineSpec = ovlProps.data;\r\n                    self.overlayLineSpec.idOverlayLine = ovlProps.idOverlayLine;\r\n                    self.overlayLineSpec.name = ovlProps.name;\r\n                    if (isSwap) {\r\n                        reverseOverlayLine();\r\n                    }\r\n                })\r\n            }).catch((err) => {\r\n                console.error(err);\r\n            })\r\n        } else {\r\n            self.overlayLineSpec = undefined;\r\n        }\r\n    }\r\n    this.toggleWell = function(well) {\r\n        self.isSettingChange = true;\r\n        well._notUsed = !well._notUsed;\r\n        let layers = self.layers.filter(layer => layer.well === `${well.name}:${well._idx}`);\r\n        layers.forEach(layer => {\r\n            layer._notUsed = well._notUsed;\r\n        })\r\n    }\r\n    this.removeWell = function(well) {\r\n        let index = self.wellSpec.findIndex(wsp => wsp.idWell === well.idWell && wsp._idx === well._idx);\r\n        if(index >= 0) {\r\n            self.wellSpec.splice(index, 1);\r\n            self.addLog('success', `Delete well ${well.name}`)\r\n            let wellTreeIdx = self.treeConfig.findIndex(wTI => wTI.idWell === well.idWell && wTI._idx === well._idx);\r\n            self.treeConfig.splice(wellTreeIdx, 1);\r\n        }\r\n    }\r\n    this.getFilterForWell = (axis) => {\r\n        switch(axis) {\r\n            case 'xAxis':\r\n                return self.getSelectionValue('X').value;\r\n            case 'yAxis':\r\n                return self.getSelectionValue('Y').value;\r\n            case 'z1Axis':\r\n                return self.getSelectionValue('Z1').value;\r\n            case 'z2Axis':\r\n                return self.getSelectionValue('Z2').value;\r\n            case 'z3Axis':\r\n                return self.getSelectionValue('Z3').value;\r\n            default:\r\n        }\r\n    }\r\n    this.runWellMatch = function (node, criteria) {\r\n        let family;\r\n        if (!criteria) return true;\r\n        switch(self.selectionType) {\r\n            case 'family-group':\r\n                family = wiApi.getFamily(node.idFamily);\r\n                if (!family) return null;\r\n                return family.familyGroup.trim().toLowerCase() === criteria.trim().toLowerCase();\r\n\r\n            case 'family':\r\n                family = wiApi.getFamily(node.idFamily);\r\n                if (!family) return null;\r\n                return family.name.trim().toLowerCase() === criteria.trim().toLowerCase();\r\n\r\n            case 'curve':\r\n                return node.name.trim().toLowerCase() === criteria.trim().toLowerCase();\r\n        }\r\n    }\r\n\r\n    // ---POLYGON---\r\n    this.currentPolygon = {};\r\n    this.addPolygon = function() {\r\n        if (self.polygons.length >= _POLYGON_LIMIT) {\r\n            let msg = \"Too many polygons\";\r\n            if (__toastr) __toastr.error(msg);\r\n            console.error(new Error(msg));\r\n            return;\r\n        }\r\n        self.isSettingChange = true;\r\n        let polygon = {};\r\n        polygon.label = 'New polygon';\r\n        polygon.mode = 'edit';\r\n        polygon._notUsed = false;\r\n        polygon._notShow = false;\r\n        polygon.exclude = true;\r\n        polygon.points = [];\r\n        polygon.lineStyle = {\r\n            fillStyle: colorGenerator(null, true),\r\n            strokeStyle: '',\r\n            strokeWidth: '2'\r\n        }\r\n        polygon.contentStyle = {flex:1,float:'none','text-align':'left', color: polygon.lineStyle.fillStyle.replace(/\\d+\\.?\\d*\\s*\\)$/g, '1)')}\r\n        Object.assign(self.currentPolygon, polygon);\r\n        self.polygons.forEach(p => {\r\n            p.mode = null;\r\n        })\r\n        self.polygons.push(polygon);\r\n        self.addLog('success', `Change Polygon`)\r\n    }\r\n    this.removePolygon = ($index) => {\r\n        self.polygons.splice($index, 1);\r\n        self.addLog('success', `Change Polygon`)\r\n    }\r\n    this.filterByPolygons = function(polygons, data, exclude) {\r\n        let ppoints = polygons.map(function(p) {\r\n            return p.points.map(function(point) {\r\n                let x = point.x;\r\n                let y = point.y;\r\n                return [x, y];\r\n            });\r\n        });\r\n        if (exclude) {\r\n            return data.filter(function(d) {\r\n                let pass = exclude ? false : true;\r\n                for (let p of ppoints)\r\n                    if (d3.polygonContains(p, d))\r\n                        return pass;\r\n                return !pass;\r\n            });\r\n        } else {\r\n            let resultData = [];\r\n            for (let d of data) {\r\n                for (let p of ppoints) {\r\n                    if (d3.polygonContains(p, d)) {\r\n                        resultData.push(d);\r\n                    }\r\n                }\r\n            }\r\n            return resultData;\r\n        }\r\n    }\r\n    this.setPolygonLabel = function($index, newLabel) {\r\n        self.polygons[$index].label = newLabel;\r\n        self.polygons[$index].lineStyle.fillStyle = colorGenerator(newLabel, true);\r\n        self.polygons[$index].contentStyle.color = self.polygons[$index].lineStyle.fillStyle.replace(/\\d+\\.?\\d*\\s*\\)$/g, '1)');\r\n    }\r\n\r\n    this.polygonContentStyle = (polygon) => {\r\n        return polygon.contentStyle;\r\n    }\r\n    this.polygonFillStyle = polygon => polygon.lineStyle.fillStyle\r\n    this.polygonStrokeStyle = polygon => polygon.lineStyle.strokeStyle\r\n    this.polygonStrokeWidth = polygon => polygon.lineStyle.strokeWidth\r\n\r\n    this.toggleEditPolygon = function(polygon) {\r\n        let idx = self.polygons.indexOf(polygon);\r\n        self.polygons.forEach((p, i) => {\r\n            if (i != idx) p.mode = null;\r\n        })\r\n        if (polygon.mode == 'edit') {\r\n            polygon.mode = null;\r\n        } else {\r\n            polygon._notShow = false;\r\n            polygon.mode = 'edit';\r\n        }\r\n    }\r\n\r\n    // ---UDL\r\n    this.addUDL = function() {\r\n        if (!self.wellSpec || !self.wellSpec.length) return;\r\n        let udl = {};\r\n        udl.text = \"\";\r\n        setUDLFn(udl);\r\n        udl.latex = normalizeFormation(udl.text);\r\n        udl.lineStyle = {\r\n            lineColor: colorGenerator(),\r\n            lineWidth: 1,\r\n            lineStyle: [10, 0]\r\n        };\r\n        udl.index = self.udls.length;\r\n        udl.displayEquation = true;\r\n        let udlExisted = self.udls.find(udlI => udlI.text === udl.text);\r\n        if (!udlExisted) {\r\n            self.udls.push(udl);\r\n        }\r\n    }\r\n    function normalizeFormation(text) {\r\n        return text.replace(/\\+-/g, '-').replace(/--/g, '+');\r\n    }\r\n    function setUDLFn(udl) {\r\n        udl.fn = (function(x) {\r\n            return eval(this.text);\r\n        }).bind(udl);\r\n    }\r\n    function setParamForPickettLine(index, paramName, value) {\r\n        let pickettLines = self.allPickettLines.filter(pickettLine => pickettLine.pickettSetIdx == index);\r\n        pickettLines.forEach(pickettLine => {\r\n            pickettLine[paramName] = value;\r\n        })\r\n    }\r\n\r\n\r\n    this.getRwParam = function(index) {\r\n        return self.getPickettSetRw(self.pickettSets[index], index);\r\n    }\r\n    this.setRwParam = function(index, newValue) {\r\n        self.setPickettSetRw(self.pickettSets[index], index, newValue);\r\n        setParamForPickettLine(index, 'rw', newValue)\r\n    }\r\n    this.getAParam = function(index) {\r\n        return self.getPickettSetA(self.pickettSets[index], index);\r\n    }\r\n    this.setAParam = function(index, newValue) {\r\n        self.setPickettSetA(self.pickettSets[index], index, newValue);\r\n        setParamForPickettLine(index, 'a', newValue)\r\n    }\r\n    this.getMParam = function(index) {\r\n        return self.getPickettSetM(self.pickettSets[index], index);\r\n    }\r\n    this.setMParam = function(index, newValue) {\r\n        self.setPickettSetM(self.pickettSets[index], index, newValue);\r\n        setParamForPickettLine(index, 'm', newValue)\r\n    }\r\n    this.getNParam = function(index) {\r\n        return self.getPickettSetN(self.pickettSets[index], index);\r\n    }\r\n    this.setNParam = function(index, newValue) {\r\n        self.setPickettSetN(self.pickettSets[index], index, newValue);\r\n        setParamForPickettLine(index, 'n', newValue)\r\n    }\r\n    this.getSwParam = function(index) {\r\n        return self.swParamList[index].sw || '[empty]';\r\n    }\r\n    this.setSwParam = function(index, newValue) {\r\n        self.swParamList[index].sw = parseFloat(newValue);\r\n        let pickettLines = self.allPickettLines.filter(pickettLine => pickettLine.swParamIdx == index);\r\n        pickettLines.forEach(pickettLine => {\r\n            pickettLine.sw = parseFloat(newValue);\r\n            pickettLine.label = `${self.pickettSets[pickettLine.pickettSetIdx].name}, Sw = ${newValue}`;\r\n        })\r\n    }\r\n    this.pickettSetName = function(index) {\r\n        return self.getPickettSetName(self.pickettSets[index], index);\r\n        //return self.pickettSets[index].name || `[empty]`;\r\n    }\r\n    this.changePickettSetName = function(index, newVal) {\r\n        self.setPickettSetName(self.pickettSets[index], index, newVal);\r\n        let pickettLines = self.allPickettLines.filter(pickettLine => pickettLine.pickettSetIdx == index);\r\n        pickettLines.forEach(pickettLine => {\r\n            pickettLine.label = `${newVal}, Sw = ${pickettLine.sw}`;\r\n        })\r\n    }\r\n    this.toggleShowPickettSet = function(index) {\r\n        self.pickettSets[index]._notHidden = !self.pickettSets[index]._notHidden;\r\n        self.pickettSets.forEach((pickettSet, pickettSetIdx) => {\r\n            if(pickettSetIdx != index) {\r\n                pickettSet._notHidden = false;\r\n            }\r\n        })\r\n    }\r\n    this.getFnUDL = function(index) {\r\n        return (self.udls[index].text || '').length ? self.udls[index].text : '[empty]';\r\n    }\r\n    this.setFnUDL = function(index, newValue) {\r\n        let udlExisted = self.udls.find((udlI, udlIdx) => udlI.text == newValue && udlIdx != index);\r\n        if (!udlExisted) {\r\n            self.udls[index].text = newValue;\r\n            self.udls[index].latex = normalizeFormation(`y = ${newValue}`);\r\n            setUDLFn(self.udls[index]);\r\n        } else {\r\n            let msg = `User Defined Line 'y = ${newValue}' has been existed`;\r\n            if (__toastr) __toastr.error(msg);\r\n        }\r\n    }\r\n    this.getLineStyleUDL = function(index) {\r\n        return (self.udls[index].text || '').length ? self.udls[index].text : '[empty]';\r\n    }\r\n    this.setLineStyleUDL = function(index, newValue) {\r\n        self.udls[index].text = newValue;\r\n    }\r\n    this.getLineWidthUDL = function(index) {\r\n        return (self.udls[index].text || '').length ? self.udls[index].text : '[empty]';\r\n    }\r\n    this.setLineWidthUDL = function(index, newValue) {\r\n        self.udls[index].text = newValue;\r\n    }\r\n    this.getLineColorUDL = function(index) {\r\n        return (self.udls[index].text || '').length ? self.udls[index].text : '[empty]';\r\n    }\r\n    this.setLineColorUDL = function(index, newValue) {\r\n        self.udls[index].text = newValue;\r\n    }\r\n    this.removeUDL = ($index) => {\r\n        self.udls.splice($index, 1);\r\n    }\r\n\r\n    // ---LAYER\r\n    this.layers = [];\r\n    this.genLayers = async function() {\r\n        if (!self.isSettingChange) return;\r\n        if (!self.getSelectionValue('X').value || !self.getSelectionValue('Y').value) return;\r\n        if (!self.getConfigXLabel() || !self.getConfigYLabel()) return;\r\n        self.isSettingChange = false;\r\n        self.layers = self.layers || []\t;\r\n        let layers = [];\r\n        let _notUsedLayer = [];\r\n        let shouldPlotZ1 = self.getSelectionValue('Z1').isUsed;\r\n        let shouldPlotZ2 = self.getSelectionValue('Z2').isUsed;\r\n        let shouldPlotZ3 = self.getSelectionValue('Z3').isUsed;\r\n        wiLoading.show($element.find('.main')[0],self.silent);\r\n        for (let i =0; i < self.treeConfig.length; i++) {\r\n            let well = self.treeConfig[i];\r\n            if (well._notUsed) {\r\n                continue;\r\n            }\r\n            let curveX = self.getCurve(well, 'xAxis');\r\n            let curveY = self.getCurve(well, 'yAxis');\r\n            let curveZ1 = shouldPlotZ1 ? self.getCurve(well, 'z1Axis') : null;\r\n            let curveZ2 = shouldPlotZ2 ? self.getCurve(well, 'z2Axis') : null;\r\n            let curveZ3 = shouldPlotZ3 ? self.getCurve(well, 'z3Axis') : null;\r\n            if (!curveX || !curveY) {\r\n                continue;\r\n            }\r\n            let datasetTopX = self.wellSpec[i].xAxis.datasetTop;\r\n            let datasetBottomX = self.wellSpec[i].xAxis.datasetBottom;\r\n            let datasetStepX = self.wellSpec[i].xAxis.datasetStep;\r\n            let datasetX = well.datasets.find(ds => ds.idDataset === self.wellSpec[i].xAxis.idDataset);\r\n\r\n            let datasetTopY = self.wellSpec[i].yAxis.datasetTop;\r\n            let datasetBottomY = self.wellSpec[i].yAxis.datasetBottom;\r\n            let datasetStepY = self.wellSpec[i].yAxis.datasetStep;\r\n            let datasetY = well.datasets.find(ds => ds.idDataset === self.wellSpec[i].yAxis.idDataset);\r\n\r\n            let zoneset = getZoneset(well, self.zonesetName);\r\n            zoneset = zoneset || genZonationAllZS(d3.max([datasetTopX, datasetTopY]), d3.min([datasetBottomX, datasetBottomY]), utils.getWellColor(well))\r\n\r\n            let curveDataX = await getCurveData(curveX, well);\r\n            if (!curveDataX) return;\r\n            if (self.hasDiscriminator(well)) {\r\n                let discriminatorCurve = await wiApi.evalDiscriminatorPromise(datasetX, self.wellSpec[i].discriminator);\r\n                curveDataX = curveDataX.filter((d, idx) => discriminatorCurve[idx]);\r\n            }\r\n            let curveDataY = await getCurveData(curveY, well);\r\n            if (!curveDataY) return;\r\n            if (self.hasDiscriminator(well)) {\r\n                let discriminatorCurve = await wiApi.evalDiscriminatorPromise(datasetY, self.wellSpec[i].discriminator);\r\n                curveDataY = curveDataY.filter((d, idx) => discriminatorCurve[idx]);\r\n            }\r\n            let curveDataZ1;\r\n            let curveDataZ2;\r\n            let curveDataZ3;\r\n            let datasetZ1;\r\n            let datasetZ2;\r\n            let datasetZ3;\r\n            if (shouldPlotZ1 && curveZ1) {\r\n                datasetZ1 = well.datasets.find(ds => ds.idDataset === self.wellSpec[i].z1Axis.idDataset);\r\n                self.zColors = zColorsFn(self.getZ1N(), curveZ1.idCurve);\r\n                curveDataZ1 = await getCurveData(curveZ1, well);\r\n                if (!curveDataZ1) return;\r\n                if (self.hasDiscriminator(well)) {\r\n                    let discriminatorCurve = await wiApi.evalDiscriminatorPromise(datasetZ1, self.wellSpec[i].discriminator);\r\n                    curveDataZ1 = curveDataZ1.filter((d, idx) => discriminatorCurve[idx]);\r\n                }\r\n                let datasetTopZ1 = self.wellSpec[i].z1Axis.datasetTop;\r\n                let datasetBottomZ1 = self.wellSpec[i].z1Axis.datasetBottom;\r\n                let datasetStepZ1 = self.wellSpec[i].z1Axis.datasetStep;\r\n                curveDataZ1 = curveDataZ1\r\n                    .map(d => ({\r\n                        ...d,\r\n                        depth: datasetStepZ1 > 0 ? (datasetTopZ1 + d.y * datasetStepZ1) : d.y\r\n                    }));\r\n            }\r\n            if (shouldPlotZ2 && curveZ2) {\r\n                datasetZ2 = well.datasets.find(ds => ds.idDataset === self.wellSpec[i].z2Axis.idDataset);\r\n                self.zSizes = zSizesFn(self.getZ2N(), curveZ2.idCurve);\r\n                curveDataZ2 = await getCurveData(curveZ2, well);\r\n                if (!curveDataZ2) return;\r\n                if (self.hasDiscriminator(well)) {\r\n                    let discriminatorCurve = await wiApi.evalDiscriminatorPromise(datasetZ2, self.wellSpec[i].discriminator);\r\n                    curveDataZ2 = curveDataZ2.filter((d, idx) => discriminatorCurve[idx]);\r\n                }\r\n                let datasetTopZ2 = self.wellSpec[i].z2Axis.datasetTop;\r\n                let datasetBottomZ2 = self.wellSpec[i].z2Axis.datasetBottom;\r\n                let datasetStepZ2 = self.wellSpec[i].z2Axis.datasetStep;\r\n                curveDataZ2 = curveDataZ2\r\n                    .map(d => ({\r\n                        ...d,\r\n                        depth: datasetStepZ2 > 0 ? (datasetTopZ2 + d.y * datasetStepZ2) : d.y\r\n                    }));\r\n            }\r\n            if (shouldPlotZ3 && curveZ3) {\r\n                datasetZ3 = well.datasets.find(ds => ds.idDataset === self.wellSpec[i].z3Axis.idDataset);\r\n                self.zSymbols = zSymbolsFn(self.getZ3N(), curveZ3.idCurve);\r\n                curveDataZ3 = await getCurveData(curveZ3, well);\r\n                if (!curveDataZ3) return;\r\n                if (self.hasDiscriminator(well)) {\r\n                    let discriminatorCurve = await wiApi.evalDiscriminatorPromise(datasetZ3, self.wellSpec[i].discriminator);\r\n                    curveDataZ3 = curveDataZ3.filter((d, idx) => discriminatorCurve[idx]);\r\n                }\r\n                let datasetTopZ3 = self.wellSpec[i].z3Axis.datasetTop;\r\n                let datasetBottomZ3 = self.wellSpec[i].z3Axis.datasetBottom;\r\n                let datasetStepZ3 = self.wellSpec[i].z3Axis.datasetStep;\r\n                curveDataZ3 = curveDataZ3\r\n                    .map(d => ({\r\n                        ...d,\r\n                        depth: datasetStepZ3 > 0 ? (datasetTopZ3 + d.y * datasetStepZ3) : d.y\r\n                    }));\r\n            }\r\n\r\n            curveDataX = curveDataX\r\n                .map(d => ({\r\n                    ...d,\r\n                    depth: datasetStepX > 0 ? (datasetTopX + d.y * datasetStepX) : d.y\r\n                }));\r\n            curveDataY = curveDataY\r\n                .map(d => ({\r\n                    ...d,\r\n                    depth: datasetStepY > 0 ? (datasetTopY + d.y * datasetStepY) : d.y\r\n                }));\r\n            let pointset = getPointSet(curveDataX, curveDataY, curveDataZ1, curveDataZ2, curveDataZ3);\r\n            pointset = pointset.filter(ps => {\r\n                return _.isFinite(ps.x) && _.isFinite(ps.y)\r\n                    && (!shouldPlotZ1 || _.isFinite(ps.z1))\r\n                    && (!shouldPlotZ2 || _.isFinite(ps.z2))\r\n                    && (!shouldPlotZ3 || _.isFinite(ps.z3));\r\n            })\r\n\r\n            let zones = zoneset.zones.filter(zone => {\r\n                let z = self.zoneTreeUniq.find(z1 => {\r\n                    return z1.name === zone.zone_template.name;\r\n                });\r\n                zone._notUsed = z._notUsed;\r\n                return true;\r\n            }).sort((a, b) => a.startDepth - b.startDepth);\r\n            //wiApi.indexZonesForCorrelation(zones);\r\n\r\n            let layerIdx = 0;\r\n            if (self.getColorMode() == 'zone' || self.getColorMode() === 'index') {\r\n                for (let j = 0; j < zones.length; j++) {\r\n                    let zone = zones[j];\r\n                    if (self.paramGroups && self.paramGroups.length && !isParamGroupsIncludeZone(zone, j)) continue;\r\n                    let dataArray = filterData(pointset, zone);\r\n                    let layer = {\r\n                        dataX: convertUnitData(dataArray.map(d => d.x), curveX.unit, self.config.xUnit || self.defaultConfig.xUnit),\r\n                        dataY: convertUnitData(dataArray.map(d => d.y), curveY.unit, self.config.yUnit || self.defaultConfig.yUnit),\r\n                        dataZ1: convertUnitData(dataArray.map(d => d.z1), (curveZ1 || {}).unit, self.config.z1Unit || self.defaultConfig.z1Unit),\r\n                        dataZ2: convertUnitData(dataArray.map(d => d.z2), (curveZ2 || {}).unit, self.config.z2Unit || self.defaultConfig.z2Unit),\r\n                        dataZ3: convertUnitData(dataArray.map(d => d.z3), (curveZ3 || {}).unit, self.config.z3Unit || self.defaultConfig.z3Unit),\r\n                        regColor: self.getColor(zone, well, layerIdx),\r\n                        layerColor: self.getColor(zone, well, layerIdx),\r\n                        name: `${well.name}.${zone.zone_template.name}(${j})`,\r\n                        well: `${well.name}:${well._idx}`,\r\n                        zone: `${zone.zone_template.name}`,\r\n                        curveXInfo: `${datasetX.name}.${curveX.name}`,\r\n                        curveYInfo: `${datasetY.name}.${curveY.name}`,\r\n                        curveZ1Info: shouldPlotZ1 ? `${datasetZ1.name}.${curveZ1.name}` : 'N/A',\r\n                        curveZ2Info: shouldPlotZ2 ? `${datasetZ2.name}.${curveZ2.name}` : 'N/A',\r\n                        curveZ3Info: shouldPlotZ3 ? `${datasetZ3.name}.${curveZ3.name}` : 'N/A',\r\n                        numPoints: dataArray.length,\r\n                        mse: self.calcMSE(dataArray.map(d => d.x), dataArray.map(d => d.y)).toFixed(3),\r\n                        conditionExpr: self.wellSpec[i].discriminator && self.wellSpec[i].discriminator.active ? self.wellSpec[i].discriminator.conditionExpr : undefined,\r\n                        correlation: self.calcCorrelation(dataArray.map(d => d.x), dataArray.map(d => d.y))\r\n                    }\r\n                    layer.color = curveZ1 && shouldPlotZ1 ? (function(data, idx) {\r\n                        return getTransformZ1()(this.dataZ1[idx]);\r\n                    }).bind(layer) : self.getColor(zone, well, layerIdx);\r\n                    layer.size = (function(data, idx) {\r\n                        if (curveZ2 && shouldPlotZ2) {\r\n                            return getTransformZ2()(this.dataZ2[idx]);\r\n                        } else {\r\n                            return self.pointSize;\r\n                        }\r\n                    }).bind(layer);\r\n                    layer.textSymbol = curveZ3 && shouldPlotZ3 ? (function(data, idx) {\r\n                        return getTransformZ3()(this.dataZ3[idx]);\r\n                    }).bind(layer) : null;\r\n                    layerIdx++;\r\n                    $timeout(() => {\r\n                        if (!zone._notUsed) {\r\n                            layers.push(layer);\r\n                        } else {\r\n                            _notUsedLayer.push(layer)\r\n                        }\r\n                    })\r\n                }\r\n            } else {\r\n                let layer = {\r\n                    dataX: [],\r\n                    dataY: [],\r\n                    dataZ1: [],\r\n                    dataZ2: [],\r\n                    dataZ3: [],\r\n                    regColor: getWellSpec(well),\r\n                    layerColor: utils.getWellColor(well),\r\n                    name: `${well.name}`,\r\n                    well: `${well.name}:${well._idx}`,\r\n                    conditionExpr: self.wellSpec[i].discriminator && self.wellSpec[i].discriminator.active ? self.wellSpec[i].discriminator.conditionExpr : undefined,\r\n                    curveXInfo: `${datasetX.name}.${curveX.name}`,\r\n                    curveYInfo: `${datasetY.name}.${curveY.name}`,\r\n                    curveZ1Info: shouldPlotZ1 ? `${datasetZ1.name}.${curveZ1.name}` : 'N/A',\r\n                    curveZ2Info: shouldPlotZ2 ? `${datasetZ2.name}.${curveZ2.name}` : 'N/A',\r\n                    curveZ3Info: shouldPlotZ3 ? `${datasetZ3.name}.${curveZ3.name}` : 'N/A',\r\n                }\r\n                for (let j = 0; j < zones.length; j++) {\r\n                    let zone = zones[j];\r\n                    if (self.paramGroups && self.paramGroups.length && !isParamGroupsIncludeZone(zone, j)) continue;\r\n                    if (zone._notUsed) continue;\r\n                    let dataArray = filterData(pointset, zone);\r\n                    layer.dataX = layer.dataX.concat(convertUnitData(dataArray.map(d => d.x), curveX.unit, self.config.xUnit || self.defaultConfig.xUnit));\r\n                    layer.dataY = layer.dataY.concat(convertUnitData(dataArray.map(d => d.y), curveY.unit, self.config.yUnit || self.defaultConfig.yUnit));\r\n                    layer.dataZ1 = layer.dataZ1.concat(convertUnitData(dataArray.map(d => d.z1), (curveZ1 || {}).unit, self.config.z1Unit || self.defaultConfig.z1Unit));\r\n                    layer.dataZ2 = layer.dataZ2.concat(convertUnitData(dataArray.map(d => d.z2), (curveZ2 || {}).unit, self.config.z2Unit || self.defaultConfig.z2Unit));\r\n                    layer.dataZ3 = layer.dataZ3.concat(convertUnitData(dataArray.map(d => d.z3), (curveZ3 || {}).unit, self.config.z3Unit || self.defaultConfig.z3Unit));\r\n                }\r\n                layer.color = curveZ1 && shouldPlotZ1 ? (function(data, idx) {\r\n                    return getTransformZ1()(this.dataZ1[idx]);\r\n                }).bind(layer) : self.getColor(null, well);\r\n                layer.size = (function(data, idx) {\r\n                    if (curveZ2 && shouldPlotZ2) {\r\n                        return getTransformZ2()(this.dataZ2[idx]);\r\n                    } else {\r\n                        return self.pointSize;\r\n                    }\r\n                }).bind(layer);\r\n                layer.textSymbol = curveZ3 && shouldPlotZ3 ? (function(data, idx) {\r\n                    return getTransformZ3()(this.dataZ3[idx]);\r\n                }).bind(layer) : null;\r\n                layer.numPoints = layer.dataX.length;\r\n                layer.correlation = self.calcCorrelation(layer.dataX, layer.dataY);\r\n                layer.mse = self.calcMSE(layer.dataX, layer.dataY).toFixed(3),\r\n                    $timeout(() => {\r\n                        layers.push(layer);\r\n                    })\r\n            }\r\n        }\r\n\r\n        if (conditionForPickettPlot()) {\r\n            self.updateAllPickettLines();\r\n            updatePickettAdjusterArray();\r\n        }\r\n        self.layers = layers;\r\n        self._notUsedLayer = _notUsedLayer;\r\n        wiLoading.hide();\r\n    }\r\n    async function getCurveData(curve, well) {\r\n        let data = await wiApi.getCachedCurveDataPromise(curve.idCurve);\r\n        if (data.name && data.name == \"Error\") {\r\n            wiLoading.hide();\r\n            if (__toastr) __toastr.error(`Can not get data of ${curve.name}-${well.name} or it is empty`);\r\n            console.error(new Error(`Can not get data of ${curve.name}-${well.name} or it is empty`));\r\n            return undefined;\r\n        }\r\n        return data;\r\n    }\r\n    function convertUnitData(data, fromUnit, toUnit) {\r\n        if (fromUnit && toUnit && fromUnit != toUnit) {\r\n            data = data.map(item => wiApi.convertUnit(item, fromUnit, toUnit));\r\n        }\r\n        return data;\r\n    }\r\n    function isParamGroupsIncludeZone(zone, layerIdx) {\r\n        let toReturn = self.paramGroups.some((paramGroup, paramGroupIdx) => {\r\n            let properties = paramGroup.properties;\r\n            return zone.zone_template.name === properties.zone_template.name.replace('All', 'ZonationAll') && layerIdx === (properties.__depthIndex || 0);\r\n        })\r\n        return toReturn;\r\n    }\r\n    function getPointSet(xData, yData, z1Data, z2Data, z3Data) {\r\n        let pointset = [];\r\n        xData.forEach((eX) => {\r\n            let depth = eX.depth;\r\n            if (!eX.x) return;\r\n\r\n            let ySample = wiApi.binarySearch(yData, function(oneYData) {\r\n                return parseFloat(eX.depth.toFixed(4) - oneYData.depth.toFixed(4));\r\n            }, 0, yData.length - 1);\r\n\r\n            if (!ySample || !ySample.x) return;\r\n            let z1Sample, z2Sample, z3Sample;\r\n            if (z1Data) {\r\n                z1Sample = wiApi.binarySearch(z1Data, function(oneZ1Data) {\r\n                    return (eX.depth - oneZ1Data.depth).parseFloat(4);\r\n                }, 0, z1Data.length - 1);\r\n                if (!z1Sample || !z1Sample.x) return;\r\n            }\r\n            if (z2Data) {\r\n                z2Sample = wiApi.binarySearch(z2Data, function(oneZ2Data) {\r\n                    return (eX.depth - oneZ2Data.depth).parseFloat(4);\r\n                }, 0, z2Data.length - 1);\r\n                if (!z2Sample || !z2Sample.x) return;\r\n            }\r\n            if (z3Data) {\r\n                z3Sample = wiApi.binarySearch(z3Data, function(oneZ3Data) {\r\n                    return (eX.depth - oneZ3Data.depth).parseFloat(4);\r\n                }, 0, z3Data.length - 1);\r\n                if (!z3Sample || !z3Sample.x) return;\r\n            }\r\n            pointset.push({\r\n                x: eX.x,\r\n                y: ySample.x,\r\n                z1: z1Sample?z1Sample.x:undefined,\r\n                z2: z2Sample?z2Sample.x:undefined,\r\n                z3: z3Sample?z3Sample.x:undefined,\r\n                depth: eX.depth\r\n            });\r\n        });\r\n        return pointset;\r\n    }\r\n    function getTransformZ1() {\r\n        let wdZ = [self.getZ1Min(), self.getZ1Max()];\r\n        let reverse = wdZ[0] > wdZ[1];\r\n        return d3.scaleQuantize()\r\n            .domain(sort(wdZ))\r\n            .range(reverse ? clone(self.zColors).reverse() : self.zColors);\r\n    }\r\n    function getTransformZ2() {\r\n        let wdZ = [self.getZ2Min(), self.getZ2Max()];\r\n        let reverse = wdZ[0] > wdZ[1];\r\n        return d3.scaleQuantize()\r\n            .domain(sort(wdZ))\r\n            .range(reverse ? clone(self.zSizes).reverse() : self.zSizes);\r\n    }\r\n    function getTransformZ3() {\r\n        let wdZ = [self.getZ3Min(), self.getZ3Max()];\r\n        let reverse = wdZ[0] > wdZ[1];\r\n        return d3.scaleQuantize()\r\n            .domain(sort(wdZ))\r\n            .range(reverse ? clone(self.zSymbols).reverse() : self.zSymbols);\r\n    }\r\n    function zColorsFn(numColor, doHaveColorAxis) {\r\n        if (!doHaveColorAxis) return [];\r\n        if (numColor <= 0) return [];\r\n        let colors = [];\r\n\r\n        if (self.palProps && self.palProps.palette) {\r\n            for (let i = 0; i < numColor; i++) {\r\n                colors.push(utils.palette2RGB(self.palProps.palette[i % self.palProps.palette.length], false));\r\n            }\r\n        }\r\n        else {\r\n            if (numColor == 1) return ['rgb(255, 0, 0)'];\r\n            let rotateTime = Math.round(numColor / 3);\r\n            let redPoints = points(numColor);\r\n            let greenPoints = angular.copy(redPoints).rotate(rotateTime);\r\n            let bluePoints = angular.copy(greenPoints).rotate(rotateTime);\r\n            for (let i = 0; i < numColor; i++) {\r\n                colors.push('rgb(' + redPoints[i] + ',' + greenPoints[i] + ',' + bluePoints[i] + ')');\r\n            }\r\n        }\r\n        return colors;\r\n    }\r\n    function zSizesFn(numSize, doHaveSizeAxis) {\r\n        if (!doHaveSizeAxis) return [];\r\n        if (numSize <= 0) return [];\r\n        const minSize = self.getPointSize();\r\n        const step = 2;\r\n        let sizes = []\r\n        for (let i = 0; i < numSize; i++) {\r\n            sizes.push(minSize + i * step);\r\n        }\r\n        return sizes;\r\n    }\r\n    function zSymbolsFn(numSymbol, doHaveSymbolAxis) {\r\n        if (!doHaveSymbolAxis) return [];\r\n        if (numSymbol <= 0) return [];\r\n        const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n        let symbols = []\r\n        for (let i = 0; i < numSymbol; i++) {\r\n            symbols.push(alphabet[i]);\r\n        }\r\n        return symbols;\r\n    }\r\n    function points(N) {\r\n        let toRet = [];\r\n        let step = (255 - 0) / (N - 1);\r\n        for (let i = 0; i < N; i++) {\r\n            toRet.push(0 + i * step);\r\n        }\r\n        return toRet;\r\n    }\r\n    function sort(array) {\r\n        return array.sort(function(a, b) {\r\n            return a - b;\r\n        });\r\n    }\r\n    function clone(obj) {\r\n        return JSON.parse(JSON.stringify(obj));\r\n    }\r\n    if (!Array.prototype.rotate) {\r\n        Object.defineProperty(Array.prototype, 'rotate', {\r\n            enumerable: false,\r\n            value: function (count) {\r\n                var push = Array.prototype.push,\r\n                    splice = Array.prototype.splice;\r\n                var len = this.length >>> 0; // convert to uint\r\n                count = count >> 0; // convert to int\r\n\r\n                // convert count to value in range [0, len)\r\n                count = ((count % len) + len) % len;\r\n\r\n                // use splice.call() instead of this.splice() to make function generic\r\n                push.apply(this, splice.call(this, 0, count));\r\n                return this;\r\n            }\r\n        });\r\n    }\r\n    this.hideSelectedRegression = function() {\r\n        if(!self.selectedRegression) return;\r\n        self.selectedRegression.forEach(layer => layer._useReg = false);\r\n        self.updateRegressionLine(self.regressionType, self.polygons);\r\n    }\r\n    this.showSelectedRegression = function() {\r\n        if(!self.selectedRegression) return;\r\n        self.selectedRegression.forEach(layer => layer._useReg = true);\r\n        self.updateRegressionLine(self.regressionType, self.polygons);\r\n    }\r\n    this.hideAllRegression = function() {\r\n        self.layers.forEach(layer => layer._useReg = false);\r\n        self.updateRegressionLine(self.regressionType, self.polygons);\r\n        $timeout(() => {});\r\n    }\r\n    this.showAllRegression = function() {\r\n        self.layers.forEach(layer => layer._useReg = true);\r\n        self.updateRegressionLine(self.regressionType, self.polygons);\r\n        $timeout(() => {});\r\n    }\r\n    this.hideSelectedLayer = function() {\r\n        if(!self.selectedLayers) return;\r\n        self.selectedLayers.forEach(layer => {\r\n            layer._notUsed = true;\r\n            toggleParamGroup(layer);\r\n        });\r\n    }\r\n    this.showSelectedLayer = function() {\r\n        if(!self.selectedLayers) return;\r\n        self.selectedLayers.forEach(layer => {\r\n            layer._notUsed = false;\r\n            toggleParamGroup(layer);\r\n        });\r\n        $timeout(() => {});\r\n    }\r\n    this.hideAllLayer = function() {\r\n        self.layers.forEach(layer => {\r\n            layer._notUsed = true;\r\n            toggleParamGroup(layer);\r\n        });\r\n        $timeout(() => {});\r\n    }\r\n    this.showAllLayer = function() {\r\n        self.layers.forEach(layer => {\r\n            layer._notUsed = false;\r\n            toggleParamGroup(layer);\r\n        });\r\n        $timeout(() => {});\r\n    }\r\n    this.getFilterForLayer = () => {\r\n        if (!self.zoneTree || !self.zoneTree.length) {\r\n            return '';\r\n        }\r\n        let filterLayer = self.zoneTree.map(z => `${z._notUsed}`).join('');\r\n        return filterLayer;\r\n    }\r\n    this.runLayerMatch = function (node, criteria) {\r\n        let keySearch = criteria.toLowerCase();\r\n        let searchArray = node.name.toLowerCase();\r\n        return searchArray.includes(keySearch);\r\n    }\r\n    let _layerTree = [];\r\n    this.getLayerTree = function() {\r\n        _layerTree = self.layers\r\n        return self.layers;\r\n    }\r\n    this.getLayerLabel = (node) => node.name\r\n    this.getLayerIcon = (node) => ( (node && !node._notUsed) ? 'layer-16x16': 'fa fa-eye-slash' )\r\n    this.getLayerIcons = (node) => ( [\"rectangle\"] )\r\n    this.getLayerIconStyle = (node) => ( {\r\n        'background-color': node.layerColor\r\n    })\r\n    this.click2ToggleLayer = function ($event, node, selectedObjs) {\r\n        node._notUsed = !node._notUsed;\r\n        toggleParamGroup(node);\r\n        self.selectedLayers = Object.values(selectedObjs).map(o => o.data);\r\n    }\r\n    function toggleParamGroup(layer) {\r\n        if (self.paramGroups && self.paramGroups.length) {\r\n            for (let i = 0; i < self.paramGroups.length; i++) {\r\n                let paramGroup = self.paramGroups[i];\r\n                let properties = paramGroup.properties;\r\n                if (layer.name.includes(`${properties.zone_template.name.replace('All', 'ZonationAll')}(${properties.__depthIndex || 0})`)) {\r\n                    paramGroup._notShow = layer._notUsed;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // ---REGRESSION---\r\n    this.onRegressionTypeChange = function(selectedItemProps) {\r\n        self.regressionType = (selectedItemProps || {}).name;\r\n    }\r\n    this.getRegIcon = (node) => ( (node && node._useReg) ? 'layer-16x16': 'fa fa-eye-slash' )\r\n    this.getRegIcons = (node) => ( [\"rectangle\"] )\r\n    this.getRegIconStyle = (node) => ( {\r\n        'background-color': node.regColor\r\n    })\r\n    this.getPropMapTreeIcon = (node) => ( (node && node._use4PropMap) ? 'layer-16x16': 'fa fa-eye-slash' )\r\n    this.getPropMapTreeIcons = (node) => ( [\"rectangle\"] )\r\n    this.getPropMapTreeIconStyle = (node) => ( {\r\n        'background-color': node.layerColor\r\n    })\r\n    this.updateRegressionLine = function(regressionType, polygons) {\r\n        let data = [];\r\n        for (let i = 0; i < self.layers.length; i++) {\r\n            let layer = self.layers[i];\r\n            if (layer._useReg) {\r\n                data = data.concat(layer.dataX.map((x, i) => {\r\n                    return [x, layer.dataY[i]];\r\n                }));\r\n            }\r\n        }\r\n        let usedPolygon = polygons.filter(p => {\r\n            return !_.isEmpty(p.points) && !p._notUsed;\r\n        })\r\n        if (usedPolygon.length) {\r\n            let includedPolygon = usedPolygon.filter(p => !p.exclude);\r\n            let excludedPolygon = usedPolygon.filter(p => p.exclude);\r\n            if (excludedPolygon.length) {\r\n                data = self.filterByPolygons(excludedPolygon, data, true);\r\n            }\r\n            if (includedPolygon.length) {\r\n                data = self.filterByPolygons(includedPolygon, data, false);\r\n            }\r\n        }\r\n        if (!data.length) {\r\n            self.regLine = {};\r\n            self.regLine.family = undefined;\r\n            return;\r\n        }\r\n        let result;\r\n        self.regLine = {\r\n            lineStyle: {\r\n                lineStyle: (self.regLine.lineStyle || {}).lineStyle || [10, 0],\r\n                lineColor: (self.regLine.lineStyle || {}).lineColor || colorGenerator(),\r\n                lineWidth: (self.regLine.lineStyle || {}).lineWidth || 1\r\n            }\r\n        }\r\n        let fitPoint = {\r\n            fitX: self.config.fitX,\r\n            fitY: self.config.fitY\r\n        }\r\n        switch(regressionType) {\r\n            case 'Linear':\r\n                result = regression.linear(data, {precision: 6, ...fitPoint});\r\n                self.regLine = {\r\n                    ...self.regLine,\r\n                    family: self.regressionType.toLowerCase(),\r\n                    slope: result.equation[0],\r\n                    intercept: result.equation[1],\r\n                    predict: result.predict,\r\n                    r2: result.r2\r\n                };\r\n                break;\r\n            case 'Exponential':\r\n                result = regression.exponential(data, {precision: 6, ...fitPoint});\r\n                self.regLine = {\r\n                    ...self.regLine,\r\n                    family: self.regressionType.toLowerCase(),\r\n                    ae: result.equation[0],\r\n                    b: result.equation[1],\r\n                    predict: result.predict,\r\n                    r2: result.r2\r\n                };\r\n                break;\r\n            case 'Power':\r\n                result = regression.power(data, {precision: 6, ...fitPoint});\r\n                self.regLine = {\r\n                    ...self.regLine,\r\n                    family: self.regressionType.toLowerCase(),\r\n                    coefficient: result.equation[0],\r\n                    exponent: result.equation[1],\r\n                    predict: result.predict,\r\n                    r2: result.r2\r\n                };\r\n                break;\r\n            case 'Polynomial':\r\n                result = regression.polynomial(data, { order: self.getPolynomialOrder() })\r\n                self.regLine = {\r\n                    ...self.regLine,\r\n                    family: self.regressionType.toLowerCase(),\r\n                    equation: result.equation,\r\n                    predict: result.predict,\r\n                    r2: result.r2\r\n                }\r\n                break;\r\n        }\r\n        // Calc MSE\r\n        let x = [];\r\n        let y = [];\r\n        for (let i = 0; i < self.layers.length; i++) {\r\n            let layer = self.layers[i];\r\n            if (layer._useReg) {\r\n                x = x.concat(layer.dataX);\r\n                y = y.concat(layer.dataY);\r\n            }\r\n        }\r\n        let yPredict = x.map(xi => {\r\n            return self.regLine.predict(xi)[1];\r\n        });\r\n        self.mse = {\r\n            family: 'mse',\r\n            mse: self.calcMSE(y, yPredict).toFixed(6)\r\n        }\r\n    }\r\n    this.click2ToggleRegression = function ($event, node, selectedObjs) {\r\n        self.isSettingChange = true;\r\n        node._useReg = !node._useReg;\r\n        self.updateRegressionLine(self.regressionType, self.polygons);\r\n        $timeout(() => {\r\n            self.regLine = {\r\n                ...self.regLine\r\n            };\r\n        })\r\n        self.selectedRegression = Object.values(selectedObjs).map(o => o.data);\r\n    }\r\n\r\n    //---DISCRIMINATOR---\r\n    this.discriminatorDialog = function(well) {\r\n        let wSpec = getWellSpec(well);\r\n        let dataset = well.datasets.find(ds => ds.idDataset === wSpec['xAxis'].idDataset);\r\n\r\n        let curvesArr = dataset.curves.map( c => ({type:'curve',name:c.name}) );\r\n        wiDialog.discriminator(wSpec.discriminator, curvesArr, function(discrmnt) {\r\n            self.isSettingChange = true;\r\n            wSpec.discriminator = discrmnt;\r\n        });\r\n    }\r\n    this.hasDiscriminator = function(well) {\r\n        let wSpec = getWellSpec(well);\r\n        return wSpec.discriminator && Object.keys(wSpec.discriminator).length > 0 && wSpec.discriminator.active;\r\n    }\r\n\r\n    this.reverseAxis = function() {\r\n        [self.selectionValueList[0].value, self.selectionValueList[1].value] = [self.selectionValueList[1].value, self.selectionValueList[0].value];\r\n        for (let i = 0; i < self.wellSpec.length; i++) {\r\n            swapPropObj(self.wellSpec[i], 'xAxis', 'yAxis');\r\n        }\r\n        updateDefaultConfig();\r\n        [self.config.left, self.config.bottom] = [self.config.bottom, self.config.left];\r\n        [self.config.right, self.config.top] = [self.config.top, self.config.right];\r\n        [self.config.logaX, self.config.logaY] = [self.config.logaY, self.config.logaX];\r\n        [self.config.majorX, self.config.majorY] = [self.config.majorY, self.config.majorX];\r\n        [self.config.minorX, self.config.minorY] = [self.config.minorY, self.config.minorX];\r\n        [self.config.xLabel, self.config.yLabel] = [self.config.yLabel, self.config.xLabel];\r\n        reverseOverlayLine();\r\n        self.genLayers();\r\n        self.isSwapAxisPickett = !self.isSwapAxisPickett;\r\n        self.updateAllPickettLines();\r\n    }\r\n    function reverseOverlayLine() {\r\n        if (!self.overlayLineSpec) return;\r\n        self.overlayLineSpec.lines.forEach(ovlLine => {\r\n            ovlLine.data.forEach(point => {\r\n                [point.x, point.y] = [point.y, point.x];\r\n            })\r\n        })\r\n    }\r\n    function swapPropObj(obj, key1, key2) {\r\n        [obj[key1], obj[key2]] = [obj[key2], obj[key1]];\r\n    }\r\n\r\n    function colorGenerator(seed, semiTransparent) {\r\n        if (!seed || !seed.length) {\r\n            let transparent = semiTransparent ? 0.5 : 1;\r\n            let rand = function () {\r\n                return Math.floor(Math.random() * 255);\r\n            }\r\n            return \"rgb(\" + rand() + \",\" + rand() + \",\" + rand() + \",\" + transparent + \")\";\r\n        }\r\n        let n = Math.abs(string2Int(seed));\r\n        let colorTable = getColorPalette();\r\n        if (!colorTable) return;\r\n        return utils.palette2RGB(colorTable[n % colorTable.length], semiTransparent);\r\n    }\r\n\r\n    function string2Int(str) {\r\n        var hash = 0, i, chr;\r\n        if (str.length === 0) return hash;\r\n        for (i = 0; i < str.length; i++) {\r\n            chr   = str.charCodeAt(i);\r\n            hash  = ((hash << 5) - hash) + chr;\r\n            hash |= 0; // Convert to 32bit integer\r\n        }\r\n        return hash;\r\n    }\r\n\r\n    this.getColorPalette = getColorPalette;\r\n    function getColorPalette() {\r\n        return wiApi.getPalette('BGR');\r\n    }\r\n    this.pickettLineColor = function(pickett) {\r\n        if (pickett.sw == 1) {\r\n            return 'red';\r\n        }\r\n        return self.getPickettSetColor(self.pickettSets[pickett.pickettSetIdx], pickett.pickettSetIdx);\r\n    }\r\n    this.addPickettSet = function() {\r\n        self.pickettSets.push({color: 'blue'});\r\n    }\r\n    this.turnOnPickettSet = function($index) {\r\n        if (self.pickettSets[$index]._used) {\r\n            self.pickettSets[$index]._used = false;\r\n        } else {\r\n            self.pickettSets.forEach(pickettSet => pickettSet._used = false);\r\n            self.pickettSets[$index]._used = true;\r\n        }\r\n        self.updateAllPickettLines();\r\n    }\r\n    this.addSwParam = function() {\r\n        if (self.swParamList.length >= _PICKETT_LIMIT) {\r\n            let msg = \"Too many picketts\";\r\n            if (__toastr) __toastr.error(msg);\r\n            console.error(new Error(msg));\r\n            return;\r\n        }\r\n        let swValue = 1;\r\n        self.swParamList.push({sw: swValue});\r\n        self.pickettSets.forEach((pickettSet, pickettSetIdx) => {\r\n            self.allPickettLines.push({\r\n                rw: self.getPickettSetRw(pickettSet, pickettSetIdx),\r\n                m: self.getPickettSetM(pickettSet, pickettSetIdx),\r\n                n: self.getPickettSetN(pickettSet, pickettSetIdx),\r\n                a: self.getPickettSetA(pickettSet, pickettSetIdx),\r\n                sw: swValue,\r\n                swParamIdx: self.swParamList.length - 1,\r\n                pickettSetIdx,\r\n                label: `${self.getPickettSetName(pickettSet, pickettSetIdx)}, Sw = ${swValue}`,\r\n                style: {\r\n                    fill: pickettSet.color\r\n                },\r\n                family: 'pickett',\r\n                _used: pickettSet._used,\r\n                isSwap: self.isSwapAxisPickett\r\n            })\r\n        })\r\n    }\r\n    this.removeSwParam = function(index) {\r\n        self.swParamList.splice(index,1);\r\n        let toRemovePickettLine = self.allPickettLines.filter(pickettLine => pickettLine.swParamIdx == index);\r\n        toRemovePickettLine.forEach(pickettLine => {\r\n            let idx = self.allPickettLines.indexOf(pickettLine);\r\n            if (idx) {\r\n                self.allPickettLines.splice(idx, 1);\r\n            }\r\n        })\r\n    }\r\n    this.removePickettSet = function($index) {\r\n        self.pickettSets.splice($index, 1);\r\n    }\r\n    this.updateAllPickettLines = updateAllPickettLines;\r\n    this.updateAllPickettLinesDebounce = _.debounce(updateAllPickettLines, 300);\r\n    //this.updateAllPickettLinesDebounce = updateAllPickettLines;\r\n    function updateAllPickettLines() {\r\n        let allPickettLines = [];\r\n        if (!self.pickettSets.length) return;\r\n        self.allPickettLines.length = 0;\r\n        self.swParamList.forEach((swParam, swParamIdx) => {\r\n            self.pickettSets.forEach((pickettSet, pickettSetIdx) => {\r\n                if (!pickettSet._used) return;\r\n                let pickett = {\r\n                    rw: self.getPickettSetRw(pickettSet, pickettSetIdx),\r\n                    m: self.getPickettSetM(pickettSet, pickettSetIdx),\r\n                    n: self.getPickettSetN(pickettSet, pickettSetIdx),\r\n                    a: self.getPickettSetA(pickettSet, pickettSetIdx),\r\n                    sw: swParam.sw,\r\n                    swParamIdx,\r\n                    pickettSetIdx,\r\n                    label: `${self.getPickettSetName(pickettSet, pickettSetIdx)}, Sw = ${swParam.sw}`,\r\n                    style: {\r\n                        fill: pickettSet.color\r\n                    },\r\n                    family: 'pickett',\r\n                    _used: pickettSet._used,\r\n                    isSwap: self.isSwapAxisPickett\r\n                }\r\n                allPickettLines.push(pickett);\r\n            });\r\n        });\r\n        $timeout(() => {\r\n            self.allPickettLines = allPickettLines;\r\n            self.updatePickettAdjusterArrayDebounce();\r\n        })\r\n    }\r\n    this.updatePickettAdjusterArrayDebounce = _.debounce(updatePickettAdjusterArray, 300);\r\n    this.updatePickettAdjusterArray = updatePickettAdjusterArray;\r\n    function updatePickettAdjusterArray() {\r\n        if (self.showAdjuster) {\r\n            self.pickettSets.forEach((pickettSet, pickettSetIdx) => {\r\n                if (!pickettSet._used) return;\r\n                let twoPoints = initPickettControlPoints(pickettSet);\r\n                if (twoPoints) {\r\n                    self.pickettAdjusterArray.length = 0;\r\n                    self.pickettAdjusterArray.push(twoPoints);\r\n                }\r\n            })\r\n        }\r\n    }\r\n    this.conditionForPickettPlot = conditionForPickettPlot;\r\n    function conditionForPickettPlot() {\r\n        let familyGroupX;\r\n        let familyGroupY;\r\n        if (!self.treeConfig.length) {\r\n            familyGroupX = undefined;\r\n        } else {\r\n            let curveX = self.getCurve(self.treeConfig[0], 'xAxis');\r\n            let curveY = self.getCurve(self.treeConfig[0], 'yAxis');\r\n            if (!curveX || !curveY) return false;\r\n            let familyX = wiApi.getFamily(curveX.idFamily);\r\n            let familyY = wiApi.getFamily(curveY.idFamily);\r\n            if (!familyX || !familyY) return false;\r\n            familyGroupX = familyX.familyGroup;\r\n            familyGroupY = familyY.familyGroup;\r\n        }\r\n        self.isSwapAxisPickett = true;\r\n        if (((familyGroupX == 'Porosity' || familyGroupX == 'Void Fraction') && familyGroupY == 'Resistivity')) self.isSwapAxisPickett = false;\r\n        return self.getLogaX() && self.getLogaY()\r\n            && (((familyGroupX == 'Porosity' || familyGroupX == 'Void Fraction') && familyGroupY == 'Resistivity')\r\n                || (familyGroupX == 'Resistivity' && (familyGroupY == 'Porosity' || familyGroupY == 'Void Fraction')))\r\n    }\r\n\r\n    function initUDL() {\r\n        wiApi.listAssetsPromise(self.idProject, 'FormulaArray')\r\n            .then(listAssets => {\r\n                let asset = listAssets.find(a => a.idParameterSet === self.udlsAssetId);\r\n                let udls = fromFormulaArray2UDLs(asset.content);\r\n                $timeout(() => {\r\n                    self.udls = udls;\r\n                    self.udls.name = asset.name\r\n                }, 500)\r\n            })\r\n            .catch(e => {\r\n                $timeout(() => {\r\n                    self.udls = [];\r\n                }, 500)\r\n            });\r\n    }\r\n    this.loadUDL = function() {\r\n        wiApi.listAssetsPromise(self.idProject, 'FormulaArray')\r\n            .then(listAssets => {\r\n                self.udlSelectionList = listAssets.map(item => ({\r\n                    data:{label:item.name},\r\n                    properties:item\r\n                }));\r\n                wiDialog.promptListDialog({\r\n                    title: 'Load User Defined Lines',\r\n                    selectionList: self.udlSelectionList,\r\n                    currentSelect: self.udlSelectionList[0].data.label,\r\n                    inputName: 'User Defined Lines'\r\n                }, (selectedAsset) => {\r\n                    if (self.udls && self.udls.length) {\r\n                        let actions = [\r\n                            {title: `Add more`, onClick: (wiModal) => {wiModal.close('Add more')}},\r\n                            {title: `Replace`, onClick: (wiModal) => {wiModal.close('Replace')}}\r\n                        ]\r\n                        wiDialog.confirmDialog(\r\n                            \"Confirmation\",\r\n                            \"Which way do you want to import?\",\r\n                            (way) => {\r\n                                if (way === \"Add more\") {\r\n                                    let name = self.udls.name;\r\n                                    let note = self.udls.node;\r\n                                    self.udls = self.udls.concat(fromFormulaArray2UDLs(selectedAsset.content));\r\n                                    self.udls = _.uniqBy(self.udls, (udl) => udl.text)\r\n                                    self.udls.name = name;\r\n                                    self.udls.note = note;\r\n                                } else {\r\n                                    replaceUDLs(selectedAsset);\r\n                                }\r\n                            },\r\n                            actions\r\n                        )\r\n                    } else {\r\n                        replaceUDLs(selectedAsset);\r\n                    }\r\n                });\r\n            });\r\n        function replaceUDLs(selectedAsset) {\r\n            self.udlsAssetId = selectedAsset.idParameterSet;\r\n            self.udls = fromFormulaArray2UDLs(selectedAsset.content);\r\n            self.udls.name = selectedAsset.name;\r\n            self.udls.note = selectedAsset.note;\r\n            self.addLog('success', 'Change Formula')\r\n        }\r\n    }\r\n    this.saveUDL = function() {\r\n        if (self.udls.note === \"System Formula\") {\r\n            let msg = `Can not overwrite \"System Formula\"`;\r\n            if (__toastr) __toastr.error(msg);\r\n            return;\r\n        }\r\n        let content = fromUDLs2FormulaArray(self.udls);\r\n        if (self.udlsAssetId) {\r\n            wiLoading.show($element.find('.main')[0],self.silent);\r\n            wiApi.editAssetPromise(self.udlsAssetId, content)\r\n                .then(res => {\r\n                    wiLoading.hide();\r\n                })\r\n                .catch(e => {\r\n                    wiLoading.hide();\r\n                    let msg = `Asset ${name} has been existed`;\r\n                    if (__toastr) __toastr.error(msg);\r\n                    self.saveUDL();\r\n                });\r\n        } else {\r\n            wiDialog.promptDialog({\r\n                title: 'Save User Defined Lines',\r\n                inputName: 'User Defined Lines Name',\r\n                input: '',\r\n            }, function(name) {\r\n                wiLoading.show($element.find('.main')[0],self.silent);\r\n                self.udls.name = name;\r\n                let type = 'FormulaArray';\r\n                let content = fromUDLs2FormulaArray(self.udls);\r\n                wiApi.newAssetPromise(self.idProject, name, type, content)\r\n                    .then(res => {\r\n                        self.udlsAssetId = res.idParameterSet;\r\n                        wiLoading.hide();\r\n                    })\r\n                    .catch(e => {\r\n                        let msg = `Asset ${name} has been existed`;\r\n                        if (__toastr) __toastr.error(msg);\r\n                        self.saveUDL();\r\n                        wiLoading.hide();\r\n                    })\r\n            });\r\n        }\r\n    }\r\n    this.saveAsUDL = function() {\r\n        wiDialog.promptDialog({\r\n            title: 'Save As User Defined Lines',\r\n            inputName: 'User Defined Lines Name',\r\n            input: '',\r\n        }, function(name) {\r\n            self.udls.name = name;\r\n            let type = 'FormulaArray';\r\n            let content = fromUDLs2FormulaArray(self.udls);\r\n            wiApi.newAssetPromise(self.idProject, name, type, content)\r\n                .then(res => {\r\n                    self.udls.note = \"\";\r\n                    self.udlsAssetId = res.idParameterSet;\r\n                })\r\n                .catch(e => {\r\n                    let msg = `Asset ${name} has been existed`;\r\n                    if (__toastr) __toastr.error(msg);\r\n                    self.saveAsUDL();\r\n                })\r\n        });\r\n    }\r\n    function fromUDLs2FormulaArray(UDLs) {\r\n        return UDLs.map(udl => {\r\n            return {\r\n                function: udl.text,\r\n                lineStyle: udl.lineStyle,\r\n                index: udl.index,\r\n                displayLine: !udl._notUsed,\r\n                displayEquation: udl.displayEquation\r\n            }\r\n        })\r\n\r\n    }\r\n    function fromFormulaArray2UDLs(formulaArray) {\r\n        let regex = /^(y = )/g;\r\n        return formulaArray.map(udl => {\r\n            let latex = udl.function;\r\n            if (!regex.test(udl.function))\r\n                latex = `y = ${latex}`;\r\n            return {\r\n                text: udl.function,\r\n                latex: normalizeFormation(latex),\r\n                lineStyle: udl.lineStyle,\r\n                fn: function(x) {\r\n                    return eval(udl.function);\r\n                },\r\n                index: udl.index,\r\n                displayEquation: udl.displayEquation,\r\n                _notUsed: !udl.displayLine\r\n            }\r\n        })\r\n    }\r\n\r\n    this.onChangePal = function (palProps) {\r\n        if (!palProps) return;\r\n        self.isSettingChange = true;\r\n        self.config.currentPalName = palProps.name;\r\n        self.palProps = palProps;\r\n    }\r\n    this.onPalsDropdownInit = function(wiDropdownCtrl) {\r\n        self.wiDropdownCtrl = wiDropdownCtrl;\r\n        self.palTable = self.palTable || wiApi.getPalettes();\r\n        wiDropdownCtrl.items = Object.keys(self.palTable).map(palName => {\r\n            let data = {\r\n                label: palName\r\n            };\r\n            let properties = {\r\n                name: palName,\r\n                palette: self.palTable[palName]\r\n            };\r\n            let toReturn = {data, properties};\r\n            if (self.config.currentPalName && palName === self.config.currentPalName)  {\r\n                wiDropdownCtrl.selectedItem = toReturn;\r\n                self.palProps = properties;\r\n            }\r\n            return toReturn;\r\n        });\r\n        wiDropdownCtrl.items.unshift({\r\n            data: {\r\n                name: \"[No Palette]\"\r\n            },\r\n            properties: {\r\n                name: '[No Palette]',\r\n                palette: null\r\n            }\r\n        })\r\n    }\r\n    this.validPlotRegion = function() {\r\n        let result = (self.getTop() - self.getBottom()) * (self.getRight() - self.getLeft());\r\n        return _.isFinite(result) && result != 0;\r\n    }\r\n\r\n    function initPickettControlPoints(pickettSet) {\r\n        let stepDen = 20;\r\n        let hRange = [self.getLeft() == 0 ? 0.01 : self.getLeft(), self.getRight() == 0 ? 0.01 : self.getRight()];\r\n        let hRangeLoga = hRange.map(v => Math.log10(v));\r\n        let vRange = [self.getBottom() == 0 ? 0.01 : self.getBottom(), self.getTop() == 0 ? 0.01 : self.getTop()];\r\n\r\n        let step = 1/stepDen;\r\n        let getYFromX = !self.isSwapAxisPickett ? pickettFn : pickettFnY;\r\n\r\n        let firstPointXLoga = hRangeLoga[0] + (hRangeLoga[1] - hRangeLoga[0]) * (1/30);\r\n        let pow10 = (xExponent) => Math.pow(10, xExponent)\r\n\r\n        let firstPointY = getYFromX( pow10(firstPointXLoga) );\r\n        while((firstPointY - vRange[0]) * (firstPointY - vRange[1]) > 0) {\r\n            if ((firstPointXLoga - hRangeLoga[0]) * (firstPointXLoga - hRangeLoga[1]) > 0) {\r\n                console.log(\"Oops!\");\r\n                return;\r\n            }\r\n            firstPointXLoga = firstPointXLoga + (hRangeLoga[1] - hRangeLoga[0]) * step;\r\n            firstPointY = getYFromX(pow10(firstPointXLoga));\r\n            console.log('111');\r\n        }\r\n        console.log('done 1');\r\n        let secondPointXLoga = hRangeLoga[1] - (hRangeLoga[1] - hRangeLoga[0]) * (1/30);\r\n        let secondPointY = getYFromX(pow10(secondPointXLoga));\r\n\r\n        while((secondPointY - vRange[0]) * (secondPointY - vRange[1]) > 0 )  {\r\n            if ((secondPointXLoga - hRangeLoga[0]) * (secondPointXLoga - hRangeLoga[1]) > 0) {\r\n                console.log(\"Oops!\");\r\n                return;\r\n            }\r\n            secondPointXLoga = secondPointXLoga - (hRangeLoga[1] - hRangeLoga[0]) * step;\r\n            secondPointY = getYFromX(pow10(secondPointXLoga));\r\n            console.log('222');\r\n        }\r\n        console.log('done 2')\r\n        return [{x: pow10(firstPointXLoga), y:firstPointY}, {x: pow10(secondPointXLoga), y:secondPointY}];\r\n\r\n        function pickettFn(x) {\r\n            let sw = 1;\r\n            let rw = self.getPickettSetRw(pickettSet);\r\n            let n = self.getPickettSetN(pickettSet);\r\n            let m = self.getPickettSetM(pickettSet);\r\n            let a = self.getPickettSetA(pickettSet);\r\n            return Math.pow(10, (-m) * (Math.log10(x)) + Math.log10((a*rw) / (sw ** n)));\r\n        }\r\n        function pickettFnY(y) {\r\n            let sw = 1;\r\n            let rw = self.getPickettSetRw(pickettSet);\r\n            let n = self.getPickettSetN(pickettSet);\r\n            let m = self.getPickettSetM(pickettSet);\r\n            let a = self.getPickettSetA(pickettSet);\r\n            return Math.pow(10, (Math.log10(y) - (Math.log10((a*rw) / (sw ** n)))) / (-m));\r\n        }\r\n    }\r\n    function updatePickettParams(formula) {\r\n        let pickettSet = this;\r\n        let slope = formula.slope;\r\n        let intercept = formula.intercept;\r\n        let mValue = Number(parseFloat(calcPickettParamM(slope, intercept, pickettSet)).toFixed(4));\r\n        let rwValue = Number(parseFloat(calcPickettParamRw(slope, intercept, pickettSet)).toFixed(4));\r\n        if (_.isFinite(mValue) && _.isFinite(rwValue)) {\r\n            self.setPickettSetM(pickettSet, -1, mValue);\r\n            self.setPickettSetRw(pickettSet, -1, rwValue );\r\n        }\r\n        self.updateAllPickettLinesDebounce();\r\n    }\r\n    function calcPickettParamM(slope, intercept, pickettSet) {\r\n        if (self.isSwapAxisPickett) return -1 / slope;\r\n        return -slope;\r\n    }\r\n    function calcPickettParamRw(slope, intercept, pickettSet) {\r\n        // intercept = lg((a*Rw)/(Sw^n))\r\n        // 10 ^ intercept = a*Rw/(Sw^n)\r\n        // Rw = (10 ^ intercept) * (sw^n) / a\r\n        let sw = 1;\r\n        let m = self.getPickettSetM(pickettSet);\r\n        let n = self.getPickettSetN(pickettSet);\r\n        let a = self.getPickettSetA(pickettSet);\r\n        if (self.isSwapAxisPickett) return (Math.pow(10, m * intercept) * Math.pow(sw, n) / a);\r\n        return (Math.pow(10, intercept) * Math.pow(sw, n) / a);\r\n    }\r\n    const pickettUpdateFnArray = [];\r\n    this.getUpdatePickettParamsFn = function(pickettIdx) {\r\n        let updateFn = pickettUpdateFnArray[pickettIdx];\r\n        if (!updateFn) {\r\n            pickettUpdateFnArray[pickettIdx] = updatePickettParams.bind(self.pickettSets[pickettIdx]);\r\n            updateFn = pickettUpdateFnArray[pickettIdx];\r\n        }\r\n        return updateFn;\r\n    }\r\n\r\n    //Probability Map\r\n    function getPropMapStepX() {\r\n        return (self.getRight() - self.getLeft()) / self.getColsNumPropMap();\r\n    }\r\n    function getPropMapStepY() {\r\n        return (self.getTop() - self.getBottom()) / self.getRowsNumPropMap();\r\n    }\r\n    const getBinsXGen = function(){\r\n        return d3.histogram()\r\n            .domain(d3.extent([self.getLeft(), self.getRight()]))\r\n            .thresholds(d3.range(self.getLeft(), self.getRight(), getPropMapStepX()).sort((a,b) => a - b));\r\n    }\r\n    const getBinsYGen = function() {\r\n        return d3.histogram()\r\n            .domain(d3.extent([self.getBottom(), self.getTop()]))\r\n            .thresholds(d3.range(self.getBottom(), self.getTop(), getPropMapStepY()).sort((a,b) => a - b));\r\n    }\r\n    function isReverse(min, max) {\r\n        return min - max > 0;\r\n    }\r\n    function totalBins(bins) {\r\n        return _.sum(bins.map(bin => bin.length));\r\n    }\r\n    this.hideSelectedPropMap = function() {\r\n        if(!self.selectedPropMap) return;\r\n        self.selectedPropMap.forEach(layer => layer._use4PropMap = false);\r\n        updatePropMap();\r\n    }\r\n    this.showSelectedPropMap = function() {\r\n        if(!self.selectedPropMap) return;\r\n        self.selectedPropMap.forEach(layer => layer._use4PropMap = true);\r\n        updatePropMap();\r\n    }\r\n    this.hideAllPropMap = function() {\r\n        self.layers.forEach(layer => layer._use4PropMap = false);\r\n        updatePropMap();\r\n        $timeout(() => {});\r\n    }\r\n    this.showAllPropMap = function() {\r\n        self.layers.forEach(layer => layer._use4PropMap = true);\r\n        updatePropMap();\r\n        $timeout(() => {});\r\n    }\r\n    this.click2TogglePropMap = function ($event, node, selectedObjs) {\r\n        self.isSettingChange = true;\r\n        node._use4PropMap = !node._use4PropMap;\r\n        updatePropMap();\r\n        self.selectedPropMap = Object.values(selectedObjs).map(o => o.data);\r\n    }\r\n    function updatePropMap() {\r\n        if (!self.layers || !self.layers.length) return;\r\n        self.propMapUpdateTrigger = Date.now();\r\n        let layers4PropMap = self.layers.filter(layer => {\r\n            return layer._use4PropMap;\r\n        })\r\n        let dataX = [];\r\n        let dataY = [];\r\n        layers4PropMap.forEach(layer => {\r\n            dataX = dataX.concat(layer.dataX);\r\n            dataY = dataY.concat(layer.dataY);\r\n        })\r\n        self.binsX = getBinsXGen()(dataX);\r\n        self.binsY = getBinsYGen()(dataY);\r\n        updateColorScale();\r\n    }\r\n    this.cellValuePropMap = function(cellIndex, iRow, iCol) {\r\n        return '';\r\n    }\r\n    function calCellValuePropMap(cellIndex, iRow, iCol) {\r\n        if (!self.binsX || !self.binsX.length || !self.binsY || !self.binsY.length) return null;\r\n        const xBin = isReverse(self.getLeft(), self.getRight()) ? self.binsX[self.getColsNumPropMap() - 1 - iCol]:self.binsX[iCol];\r\n        const yBin = isReverse(self.getBottom(), self.getTop()) ? self.binsY[self.getRowsNumPropMap() - 1 - iRow]:self.binsY[iRow];\r\n        if (!xBin) return yBin ? yBin.length / totalBins(self.binsX) : 0;\r\n        if (!yBin) return xBin ? xBin.length / totalBins(self.binsY) : 0;\r\n        const xPercent = xBin.length / totalBins(self.binsX);\r\n        const yPercent = yBin.length / totalBins(self.binsY);\r\n        if (!_.isFinite(xPercent) || !_.isFinite(yPercent)) return null;\r\n        return d3.mean([xPercent, yPercent]);\r\n        // return (xPercent * yPercent) / (Math.abs(xPercent - yPercent)**2);\r\n    }\r\n    const colorScale = d3.scaleLinear().range([\"rgba(255,255,255,0.9)\", \"rgba(255, 240, 128, 0.9)\", \"rgba(255, 128, 0, 0.9)\", \"rgba(50,0,0,0.9)\"]);\r\n    this.cellColorPropMap = (cellIndex, iRow, iCol) => {\r\n        const percent = calCellValuePropMap(cellIndex, iRow, iCol);\r\n        if (percent == null) return 'transparent';\r\n        return colorScale(percent);\r\n    }\r\n    function isInside(val, range) {\r\n        return (val - range[0])*(val - range[1]) <= 0;\r\n    }\r\n    function updateColorScale() {\r\n        const nCol = self.getColsNumPropMap();\r\n        const nRow = self.getRowsNumPropMap();\r\n        const arr = new Array(nRow * nCol).fill(0).map((d, i) => {\r\n            const iRow = Math.floor(i / nCol);\r\n            const iCol = i % nCol;\r\n            return calCellValuePropMap(i, iRow, iCol);\r\n        })\r\n        //colorScale.domain([d3.extent(arr)]);\r\n        const ext = d3.extent(arr);\r\n        colorScale.domain([ext[0], (ext[1] - ext[0])/3 , (ext[1] - ext[0])*2/3, ext[1]]);\r\n    }\r\n    this.getFrequencyX = function(x) {\r\n        if (!self.binsX || !self.binsX.length) return undefined;\r\n        const binX = self.binsX.find(bin => isInside(x, [bin.x0, bin.x1]));\r\n        if (!binX) return undefined;\r\n        const freq = wiApi.bestNumberFormat(binX.length / totalBins(self.binsX), 3);\r\n        if (isNaN(freq)) return undefined;\r\n        let range0 = wiApi.bestNumberFormat(binX.x0, 2);\r\n        let range1 = wiApi.bestNumberFormat(binX.x1, 2);\r\n        return `X[${range0}-${range1}]: ${freq * 100}%`\r\n    }\r\n    this.getFrequencyY = function(y) {\r\n        if (!self.binsY || !self.binsY.length) return undefined;\r\n        const binY = self.binsY.find(bin => isInside(y, [bin.x0, bin.x1]));\r\n        if (!binY) return undefined;\r\n        const freq = wiApi.bestNumberFormat(binY.length / totalBins(self.binsY), 3);\r\n        if (isNaN(freq)) return undefined;\r\n        let range0 = wiApi.bestNumberFormat(binY.x0, 2);\r\n        let range1 = wiApi.bestNumberFormat(binY.x1, 2);\r\n        return `Y[${range0}-${range1}]: ${freq * 100}%`\r\n    }\r\n    this.getRowsNumPropMap = function() {\r\n        return self.config.rowsNumPropMap || 5;\r\n    }\r\n    this.getColsNumPropMap = function() {\r\n        return self.config.colsNumPropMap || 7;\r\n    }\r\n    this.setRowsNumPropMap = function(notUse, newVal) {\r\n        self.config.rowsNumPropMap = newVal;\r\n        updatePropMap();\r\n    }\r\n    this.setColsNumPropMap = function(notUse, newVal) {\r\n        self.config.colsNumPropMap = newVal;\r\n        updatePropMap();\r\n    }\r\n\r\n    this.addLog = function(status, message) {\r\n        if(__toastr) __toastr[status](message)\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./multi-well-crossplot/index.js?");

/***/ }),

/***/ "./multi-well-crossplot/style.less":
/*!*****************************************!*\
  !*** ./multi-well-crossplot/style.less ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\nvar content = __webpack_require__(/*! !../../node_modules/css-loader/dist/cjs.js!../../node_modules/less-loader/dist/cjs.js!./style.less */ \"../node_modules/css-loader/dist/cjs.js!../node_modules/less-loader/dist/cjs.js!./multi-well-crossplot/style.less\");\n\nif(typeof content === 'string') content = [[module.i, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = __webpack_require__(/*! ../../node_modules/style-loader/lib/addStyles.js */ \"../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(false) {}\n\n//# sourceURL=webpack:///./multi-well-crossplot/style.less?");

/***/ }),

/***/ "./multi-well-crossplot/template.html":
/*!********************************************!*\
  !*** ./multi-well-crossplot/template.html ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = \"<div class=\\\"main\\\">\\n\\n    <div class=\\\"main-body\\\">\\n        \" + __webpack_require__(/*! ./fragments/main-area.html */ \"./multi-well-crossplot/fragments/main-area.html\") + \"\\n    </div>\\n    <wi-droppable style=\\\"display:flex;\\\" on-drop=\\\"self.onDrop\\\"\\n        container-style=\\\"{}\\\">\\n        <div style=\\\" height: 100%; right: 0; border-left: 1px solid #ccc; box-shadow: 0 0 20px #0000001c;\\\">\\n            \" + __webpack_require__(/*! ./fragments/side-bar.html */ \"./multi-well-crossplot/fragments/side-bar.html\") + \"\\n        </div>\\n    </wi-droppable>\\n</div>\";\n\n//# sourceURL=webpack:///./multi-well-crossplot/template.html?");

/***/ }),

/***/ "./multi-well-histogram/fragments/assistive-lines.html":
/*!*************************************************************!*\
  !*** ./multi-well-histogram/fragments/assistive-lines.html ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"label-option-sidebar\\\" style=\\\"padding: 12px 20px;display: flex;background: #f4f4f4;border-bottom: 1px solid #dcdcdc;justify-content: space-between;flex-direction: column;\\\">\\n    <div>Assistive Lines</div>\\n</div>\\n<div style=\\\"flex:1;overflow: auto;\\\">\\n    <div class=\\\"label-option-sidebar\\\"\\n        style=\\\"height: 100%; padding: 16px; display: flex;justify-content: space-between;flex-direction: column;\\\">\\n        <div style=\\\"display: flex;margin-bottom: 16px;\\\">Gaussian / Log-normal Distribution\\n            <div style=\\\"border-bottom: 1px solid #e4e4e4;flex: 1;margin-left: 15px;margin-bottom: 6px;\\\">\\n            </div>\\n        </div>\\n        <div style=\\\"margin-bottom: 5px;\\\">\\n            <span ng-class=\\\"{'active' : !self.config.notUsedGaussian}\\\"\\n                ng-click=\\\"self.toggleGaussianLine(false)\\\" class=\\\"button-with-label\\\"\\n                style=\\\"margin-right: 8px;\\\">Gaussian</span>\\n            <span ng-class=\\\"{'active' : self.config.notUsedGaussian}\\\"\\n                ng-click=\\\"self.toggleGaussianLine(true)\\\" class=\\\"button-with-label\\\">Log-normal Distribution</span>\\n            <span ng-class=\\\"{'active' : !self.config.notShowCumulative}\\\"\\n                ng-click=\\\"self.config.notShowCumulative = !self.config.notShowCumulative\\\" class=\\\"button-with-label\\\">Cumulative</span>\\n        </div>\\n        <div style=\\\"display: flex; padding: 16px 0; font-weight: initial; color: #333;\\\">\\n            <span ng-click=\\\"self.hideSelectedGaussian()\\\" class=\\\"button-with-label-layer\\\"\\n                style=\\\"margin-left: 0;\\\">Deactivate</span>\\n            <span ng-click=\\\"self.showSelectedGaussian()\\\" class=\\\"button-with-label-layer\\\"\\n                style=\\\"margin-left: 15px;\\\">Activate</span>\\n            <span ng-click=\\\"self.hideAllGaussian()\\\" class=\\\"button-with-label-layer\\\"\\n                style=\\\"margin-left: 15px;\\\">Deactivate All</span>\\n            <span ng-click=\\\"self.showAllGaussian()\\\" class=\\\"button-with-label-layer\\\"\\n                style=\\\"margin-left: 15px;\\\">Activate All</span>\\n        </div>\\n        <div ng-show=\\\"self.histogramList\\\"\\n            style=\\\"border: 1px solid #eee; margin-bottom: 15px;flex:1;overflow: hidden;\\\" class=\\\"disable-node-caret\\\">\\n            <wi-tree-view-virtual tree-root=\\\"self.getLayerTree()\\\" get-label=\\\"self.getLayerLabel\\\"\\n                filter=\\\"self.layerFilter\\\" get-icon=\\\"self.getGaussianIcon\\\" get-icons=\\\"self.getGaussianIcons\\\"\\n                get-children=\\\"self.noChildren\\\" icon-style=\\\"self.getGaussianIconStyle\\\" keep-children='true'\\n                run-match=\\\"self.runLayerMatch\\\" hide-unmatched=\\\"true\\\" hide-search='false'\\n                click-fn='self.click2ToggleGaussian'>\\n            </wi-tree-view-virtual>\\n        </div>\\n    </div>\\n</div>\\n\";\n\n//# sourceURL=webpack:///./multi-well-histogram/fragments/assistive-lines.html?");

/***/ }),

/***/ "./multi-well-histogram/fragments/config.html":
/*!****************************************************!*\
  !*** ./multi-well-histogram/fragments/config.html ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"label-option-sidebar\\\" style=\\\"padding: 12px 20px;display: flex;background: #f4f4f4;border-bottom: 1px solid #dcdcdc;justify-content: space-between;flex-direction: column;\\\">\\n    <div>Configuration</div>\\n</div>\\n<div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px; margin: 16px 16px 5px 16px;\\\">\\n    <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n        item-label=\\\"'Title'\\\" item-value=\\\"self.getConfigTitle\\\"\\n        set-value=\\\"self.setConfigTitle\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n        content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n    </editable>\\n</div>\\n<div style=\\\"font-weight: bold;display: flex; padding: 11px 16px; margin-left: 3px;color: #717171;\\\">X-Axis Scale\\n    <div\\n        style=\\\"border-bottom: 1px solid #e4e4e4;flex: 1;margin-left: 15px;margin-bottom: 6px;\\\">\\n    </div>\\n</div>\\n<!-- <div class=\\\"label-option-sidebar\\\" style=\\\"margin-top: -5px;\\\">\\n    <span>X-Axis Scale</span>\\n</div> -->\\n<div style=\\\"overflow: auto;\\\">\\n    <div class=\\\"label-option-sidebar\\\" style=\\\"padding: 5px 16px;\\\">\\n\\n        <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px;\\\">\\n            <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                item-label=\\\"'X Label'\\\" item-value=\\\"self.getConfigXLabel\\\"\\n                set-value=\\\"self.setConfigXLabel\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n            </editable>\\n        </div>\\n        <div style=\\\"margin-bottom: 15px; \\\"></div>\\n        <div class=\\\"selection-sidebar\\\" style=\\\"flex: 1;\\\">\\n            <span>Unit</span>\\n            <wi-dropdown-list style=\\\"flex:1; margin-left: 10px;\\\" items='self.xUnitList'\\n                current-select=\\\"self.config.xUnit || self.defaultConfig.xUnit\\\" on-item-changed=\\\"self.onUnitChange\\\">\\n            </wi-dropdown-list>\\n        </div>\\n        <div style=\\\"margin-bottom: 15px; \\\"></div>\\n\\n        <div style=\\\"display: flex;\\\">\\n            <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px; flex: 1;\\\">\\n                <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                    item-label=\\\"'Left'\\\" item-value=\\\"self.getLeft\\\"\\n                    set-value=\\\"self.setConfigLeft\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                    content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n                </editable>\\n            </div>\\n            <div style=\\\"margin-right: 15px; \\\"></div>\\n            <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px; flex: 1;\\\">\\n                <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                    item-label=\\\"'Right'\\\" item-value=\\\"self.getRight\\\"\\n                    set-value=\\\"self.setConfigRight\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                    content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n                </editable>\\n            </div>\\n        </div>\\n        <div style=\\\"margin-bottom: 15px; \\\"></div>\\n        <div style=\\\"display: flex;\\\">\\n            <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px; flex: 1;\\\">\\n                <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                    item-label=\\\"'Major'\\\" item-value=\\\"self.getMajor\\\"\\n                    set-value=\\\"self.setConfigMajor\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                    content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n                </editable>\\n            </div>\\n            <div style=\\\"margin-right: 15px; \\\"></div>\\n            <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px;flex: 1;\\\">\\n                <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                    item-label=\\\"'Minor'\\\" item-value=\\\"self.getMinor\\\"\\n                    set-value=\\\"self.setConfigMinor\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                    content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n                </editable>\\n            </div>\\n        </div>\\n        \\n        <div style=\\\"margin-bottom: 15px; \\\"></div>\\n\\n        <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px;\\\">\\n            <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                item-label=\\\"'Divisions'\\\" item-value=\\\"self.getDivisions\\\"\\n                set-value=\\\"self.setConfigDivisions\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n            </editable>\\n        </div>\\n        \\n    </div>\\n    <div class=\\\"label-option-sidebar\\\"\\n        style=\\\"padding: 10px 20px; display: flex; justify-content: space-between;   flex-direction: column;\\\">\\n        <div style=\\\"display: flex;margin-bottom: 16px;\\\">Scale and Grid\\n            <div\\n                style=\\\"border-bottom: 1px solid #e4e4e4;flex: 1;margin-left: 15px;margin-bottom: 6px;\\\">\\n            </div>\\n        </div>\\n        <div>\\n            <span ng-class=\\\"{'active' : self.config.loga}\\\"\\n                ng-click=\\\"self.config.loga = !self.config.loga\\\" class=\\\"button-with-label\\\"\\n                style=\\\"margin-right: 8px;\\\">Log Scale</span>\\n            <span ng-class=\\\"{'active' : self.config.grid}\\\"\\n                ng-click=\\\"self.config.grid = !self.config.grid\\\" class=\\\"button-with-label\\\"\\n                style=\\\"margin-right: 8px;\\\">Show Grid</span>\\n            <span ng-class=\\\"{'active' : self.config.flipHorizontal}\\\"\\n                ng-click=\\\"self.config.flipHorizontal = !self.config.flipHorizontal\\\"\\n                class=\\\"button-with-label\\\">Flip Horizontally</span>\\n        </div>\\n    </div>\\n    <div class=\\\"label-option-sidebar\\\"\\n        style=\\\"padding: 10px 20px; display: flex; justify-content: space-between; flex-direction: column;\\\">\\n        <div style=\\\"display: flex;margin-bottom: 16px;\\\">Display Mode\\n            <div\\n                style=\\\"border-bottom: 1px solid #e4e4e4;flex: 1;margin-left: 15px;margin-bottom: 6px;\\\">\\n            </div>\\n        </div>\\n\\n        <div>\\n            <span ng-class=\\\"{'active' : self.config.displayMode === 'bar'}\\\"\\n                ng-click=\\\"self.config.displayMode='bar'\\\" class=\\\"button-with-label\\\"\\n                style=\\\"margin-right: 8px;\\\"> Bar Mode</span>\\n            <span ng-class=\\\"{'active' : self.config.displayMode === 'line'}\\\"\\n                ng-click=\\\"self.config.displayMode='line'\\\" class=\\\"button-with-label\\\">Line\\n                Mode</span>\\n        </div>\\n\\n    </div>\\n    <div class=\\\"label-option-sidebar\\\"\\n        style=\\\"padding: 10px 20px; display: flex; justify-content: space-between;  flex-direction: column;\\\">\\n        <div style=\\\"display: flex;margin-bottom: 16px;\\\">Color Mode\\n            <div\\n                style=\\\"border-bottom: 1px solid #e4e4e4;flex: 1;margin-left: 15px;margin-bottom: 6px;\\\">\\n            </div>\\n        </div>\\n        <div>\\n            <span ng-class=\\\"{'active' : self.config.colorMode === 'zone'}\\\"\\n                ng-click=\\\"self.config.colorMode='zone'\\\" class=\\\"button-with-label\\\"\\n                style=\\\"margin-right: 8px;\\\"> Zone Color</span>\\n            <span ng-class=\\\"{'active' : self.config.colorMode === 'well'}\\\"\\n                style=\\\"margin-right: 8px;\\\" ng-click=\\\"self.config.colorMode='well'\\\"\\n                class=\\\"button-with-label\\\">Well Color</span>\\n            <span ng-class=\\\"{'active' : self.config.colorMode === 'index'}\\\"\\n                style=\\\"margin-right: 8px;\\\" ng-click=\\\"self.config.colorMode='index'\\\"\\n                class=\\\"button-with-label\\\">Index Color</span>\\n            <!-- <span ng-class=\\\"{'active' : self.config.colorMode === 'user'}\\\"\\n                ng-click=\\\"self.config.colorMode='user'\\\" class=\\\"button-with-label\\\">User Defined</span> -->\\n        </div>\\n    </div>\\n    <div class=\\\"label-option-sidebar\\\"\\n        style=\\\"padding: 10px 20px; display: flex; justify-content: space-between; flex-direction: column;\\\">\\n        <div style=\\\"display: flex;margin-bottom: 16px;\\\">Stack Mode\\n            <div\\n                style=\\\"border-bottom: 1px solid #e4e4e4;flex: 1;margin-left: 15px;margin-bottom: 6px;\\\">\\n            </div>\\n        </div>\\n        <div>\\n            <span ng-class=\\\"{'active' : self.config.stackMode === 'none'}\\\"\\n                ng-click=\\\"self.config.stackMode='none';self.resetHistogramList();\\\" class=\\\"button-with-label\\\"\\n                style=\\\"margin-right: 8px;\\\">No Stack</span>\\n            <span ng-class=\\\"{'active' : self.config.stackMode === 'well'}\\\"\\n                style=\\\"margin-right: 8px;\\\" ng-click=\\\"self.config.stackMode='well';self.resetHistogramList();\\\"\\n                class=\\\"button-with-label\\\">Well</span>\\n            <span ng-class=\\\"{'active' : self.config.stackMode === 'zone'}\\\"\\n                style=\\\"margin-right: 8px;\\\" ng-click=\\\"self.config.stackMode='zone';self.resetHistogramList();\\\"\\n                class=\\\"button-with-label\\\">Zone</span>\\n            <span ng-class=\\\"{'active' : self.config.stackMode === 'all'}\\\"\\n                ng-click=\\\"self.config.stackMode='all';self.resetHistogramList();\\\" class=\\\"button-with-label\\\">All</span>\\n        </div>\\n    </div>\\n    <div class=\\\"label-option-sidebar\\\"\\n        style=\\\"padding: 10px 20px; display: flex; justify-content: space-between;  flex-direction: column;\\\">\\n        <div style=\\\"display: flex;margin-bottom: 16px;\\\">Histogram Mode\\n            <div style=\\\"border-bottom: 1px solid #e4e4e4;flex: 1;margin-left: 15px;margin-bottom: 6px;\\\"></div>\\n        </div>\\n        <div>\\n            <span ng-class=\\\"{'active' : self.getHistogramMode() === 'frequency'}\\\"\\n                ng-click=\\\"self.changeHistogramMode('frequency')\\\" class=\\\"button-with-label\\\"\\n                style=\\\"margin-right: 8px;\\\"> Frequency Count</span>\\n            <span ng-class=\\\"{'active' : self.getHistogramMode() === 'percentage'}\\\"\\n                ng-click=\\\"self.changeHistogramMode('percentage')\\\"\\n                class=\\\"button-with-label\\\">Percentage</span>\\n        </div>\\n\\n    </div>\\n    <!-- <div class=\\\"label-option-sidebar\\\"\\n        style=\\\"padding: 20px 20px; display: flex; justify-content: space-between;  flex-direction: column;\\\">\\n        <div style=\\\"display: flex;margin-bottom: 16px;\\\">Depth Limitation Mode\\n            <div\\n                style=\\\"border-bottom: 1px solid #e4e4e4;flex: 1;margin-left: 15px;margin-bottom: 6px;\\\">\\n            </div>\\n        </div>\\n        <div>\\n            <div ng-show=\\\"self.config.limitType === 'interval'\\\">\\n                <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px;\\\">\\n                    <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                        item-label=\\\"'Top'\\\" item-value=\\\"self.getConfigLimitTop\\\"\\n                        set-value=\\\"self.setConfigLimitTop\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                        content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n                    </editable>\\n                </div>\\n                <div style=\\\"margin-bottom: 15px; \\\"></div>\\n                <div class=\\\"selection-sidebar\\\" style=\\\"padding: 9px 10px 5px 10px;\\\">\\n                    <editable style=\\\"flex:1;display:flex;flex-direction:row;overflow:hidden;\\\"\\n                        item-label=\\\"'Bottom'\\\" item-value=\\\"self.getConfigLimitBottom\\\"\\n                        set-value=\\\"self.setConfigLimitBottom\\\" enabled=\\\"true\\\" label-style=\\\"{}\\\"\\n                        content-style=\\\"{flex:1,float:'none','text-align':'right'}\\\">\\n                    </editable>\\n                </div>\\n                <div style=\\\"margin-bottom: 15px; \\\"></div>\\n            </div>\\n            <span ng-class=\\\"{'active' : self.config.limitType === 'interval'}\\\"\\n                ng-click=\\\"self. config.limitType = 'interval'\\\" class=\\\"button-with-label\\\"\\n                style=\\\"margin-right: 8px;\\\"> Interval Depth</span>\\n            <span ng-class=\\\"{'active' : self.config.limitType === 'zonal'}\\\"\\n                ng-click=\\\"self.config.limitType = 'zonal'\\\" class=\\\"button-with-label\\\">Zonal\\n                Depth</span>\\n            <div style=\\\"margin-bottom: 15px; \\\"></div>\\n        </div>\\n    </div> -->\\n</div>\\n\";\n\n//# sourceURL=webpack:///./multi-well-histogram/fragments/config.html?");

/***/ }),

/***/ "./multi-well-histogram/fragments/control-params.html":
/*!************************************************************!*\
  !*** ./multi-well-histogram/fragments/control-params.html ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"label-option-sidebar\\\" style=\\\"padding: 12px 20px;display: flex;background: #f4f4f4;border-bottom: 1px solid #dcdcdc;justify-content: space-between;flex-direction: column;\\\">\\n    <div>Control Params</div>\\n</div>\\n<div style=\\\"overflow: hidden; display: flex; flex-direction: column; flex: 1;\\\">\\n    <div class=\\\"label-option-sidebar\\\" style=\\\"padding: 16px; display: flex; justify-content: space-between; flex-direction: column; flex: 1; overflow: hidden;\\\">\\n        <div>\\n            <div class=\\\"switch-label\\\">\\n                Use Background\\n                <label class=\\\"switch\\\">\\n                        <input type=\\\"checkbox\\\">\\n                        <span class=\\\"slider round\\\" ng-click=\\\"self.notCPBackground = !self.notCPBackground\\\"></span>\\n                </label>\\n            </div>\\n            <div\\n                style=\\\"border-bottom: 1px solid #e4e4e4;flex: 1;margin-bottom: 6px; margin-top: 18px;\\\">\\n            </div>\\n        </div>\\n        \\n        <div style=\\\"display: flex; padding: 16px 0;\\\">\\n            <span ng-click=\\\"self.hideSelectedCtrlParams()\\\" class=\\\"button-with-label-layer\\\"\\n                style=\\\"margin-left: 0px;\\\">Hide</span>\\n            <span ng-click=\\\"self.showSelectedCtrlParams()\\\" class=\\\"button-with-label-layer\\\"\\n                style=\\\"margin-left: 15px;\\\">Show</span>\\n            <span ng-click=\\\"self.hideAllCtrlParams()\\\" class=\\\"button-with-label-layer\\\" style=\\\"margin-left: 15px;\\\">Hide\\n                All</span>\\n            <span ng-click=\\\"self.showAllCtrlParams()\\\" class=\\\"button-with-label-layer\\\" style=\\\"margin-left: 15px;\\\">Show\\n                All</span>\\n        </div>\\n        <div ng-show=\\\"self.histogramList\\\"\\n            style=\\\"border: 1px solid #eee; flex:1; overflow: hidden;\\\" class=\\\"disable-node-caret\\\">\\n            <wi-tree-view-virtual tree-root=\\\"self.ctrlParams\\\" get-label=\\\"self.cpMarkerName\\\"\\n                filter=\\\"self.cpFilter\\\" get-icon=\\\"self.cpIcon\\\" get-icons=\\\"self.cpIcons\\\"\\n                get-children=\\\"self.noChildren\\\" icon-style=\\\"self.cpIconStyle\\\" keep-children='true'\\n                run-match=\\\"self.runCPMatch\\\" hide-unmatched=\\\"true\\\" hide-search='false'\\n                click-fn='self.click2ToggleCtrlParams'>\\n            </wi-tree-view-virtual>\\n        </div>\\n    </div>\\n</div>\\n\";\n\n//# sourceURL=webpack:///./multi-well-histogram/fragments/control-params.html?");

/***/ }),

/***/ "./multi-well-histogram/fragments/layers.html":
/*!****************************************************!*\
  !*** ./multi-well-histogram/fragments/layers.html ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"label-option-sidebar\\\" style=\\\"padding: 12px 20px;display: flex;background: #f4f4f4;border-bottom: 1px solid #dcdcdc;justify-content: space-between;flex-direction: column;\\\">\\n    <div>Layer</div>\\n</div>\\n<div style=\\\"display: flex; padding: 16px 16px 0px 16px;\\\">\\n    <span ng-click=\\\"self.hideSelectedLayer()\\\" class=\\\"button-with-label-layer\\\"\\n        style=\\\"margin-left: 0px;\\\">Deactivate</span>\\n    <span ng-click=\\\"self.showSelectedLayer()\\\" class=\\\"button-with-label-layer\\\"\\n        style=\\\"margin-left: 15px;\\\">Activate</span>\\n    <span ng-click=\\\"self.hideAllLayer()\\\" class=\\\"button-with-label-layer\\\" style=\\\"margin-left: 15px;\\\">Deactivate\\n        All</span>\\n    <span ng-click=\\\"self.showAllLayer()\\\" class=\\\"button-with-label-layer\\\" style=\\\"margin-left: 15px;\\\">Activate\\n        All</span>\\n</div>\\n<div ng-show=\\\"self.histogramList\\\" class=\\\"disable-node-caret\\\"\\n    style=\\\"border: 1px solid #eee; margin: 15px 15px 5px 15px;flex:1;overflow: hidden;\\\">\\n    <wi-tree-view-virtual tree-root=\\\"self.getLayerTree()\\\" \\n        get-label=\\\"self.getLayerLabel\\\" filter=\\\"self.layerFilter\\\"\\n        get-icon=\\\"self.getLayerIcon\\\" get-icons=\\\"self.getLayerIcons\\\" get-children=\\\"self.noChildren\\\"\\n        icon-style=\\\"self.getLayerIconStyle\\\" keep-children='true' run-match=\\\"self.runLayerMatch\\\"\\n        hide-unmatched=\\\"true\\\" hide-search='false' click-fn='self.click2ToggleLayer'>\\n    </wi-tree-view-virtual>\\n</div>\\n\";\n\n//# sourceURL=webpack:///./multi-well-histogram/fragments/layers.html?");

/***/ }),

/***/ "./multi-well-histogram/fragments/main-area.html":
/*!*******************************************************!*\
  !*** ./multi-well-histogram/fragments/main-area.html ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"label-list-view ng-scope\\\"\\n    style=\\\"display :flex; background: #f4f4f4; padding: 9px 15px; justify-content: flex-start;\\\">\\n    <!-- <span  class=\\\"reload-16x16\\\" style=\\\"cursor: pointer; margin-right: 10px;\\\"></span>\\n    <span  class=\\\"save-16x16\\\" style=\\\"cursor: pointer; margin-right: 10px;\\\"></span>\\n    <span  class=\\\"save-as-16x16\\\" style=\\\"cursor: pointer; margin-right: 10px;\\\"></span> -->\\n    <span class=\\\"fn-button\\\" ng-click=\\\"self.refresh()\\\">RELOAD</span>\\n    <span class=\\\"fn-button\\\" ng-click=\\\"self.save()\\\">SAVE</span>\\n    <span class=\\\"fn-button\\\" ng-click=\\\"self.saveAs()\\\">SAVE AS</span>\\n    <span class=\\\"fn-button\\\" ng-click=\\\"self.print()\\\">PRINT</span>\\n    <span class=\\\"fn-button\\\" ng-click=\\\"self.exportStatistic()\\\">Export Statistic</span>\\n</div>\\n<div style=\\\"flex: 1; display: flex; flex-direction: column;\\\">\\n    <div class=\\\"main-body-center border-style printable\\\" style=\\\"position: relative;\\\">\\n        <layer-collection v-padding=\\\"50\\\" h-padding='60'>\\n            <axis-layer min-val=\\\"self.getLeft()\\\" max-val=\\\"self.getRight()\\\" loga=\\\"self.getLoga()\\\"\\n                n-ticks=\\\"self.getMajor() * self.getMinor()\\\" minor-ticks=\\\"self.getMinor()\\\" precision=\\\"4\\\"\\n                grid=\\\"!!self.config.grid\\\" placement=\\\"1\\\"\\n                get-min-val=\\\"self.getLeft\\\" get-max-val=\\\"self.getRight\\\">\\n            </axis-layer>\\n            <axis-layer ng-if=\\\"self.getHistogramMode() === 'frequency'\\\"\\n                min-val='self.minY || 0' max-val='self.getMaxY() || 100' n-ticks=\\\"10\\\" minor-ticks=\\\"1\\\"\\n                precision=\\\"4\\\" grid=\\\"!!self.config.grid\\\" axis-direction=\\\"'up'\\\" placement=\\\"0\\\"></axis-layer>\\n            <axis-layer ng-if=\\\"self.getHistogramMode() === 'percentage'\\\"\\n                min-val='0' max-val='self.getMaxY() || 100' n-ticks=\\\"10\\\" minor-ticks=\\\"1\\\"\\n                precision=\\\"2\\\" grid=\\\"!!self.config.grid\\\" axis-direction=\\\"'up'\\\" placement=\\\"0\\\"></axis-layer>\\n            <axis-layer min-val=\\\"0\\\" max-val=\\\"100\\\" n-ticks=\\\"10\\\" minor-ticks=\\\"1\\\" precision=\\\"4\\\"\\n                grid=\\\"false\\\" axis-direction=\\\"'up'\\\" placement=\\\"1\\\"></axis-layer>\\n            <canvas-barchart-layer ng-show=\\\"!bins._notUsed\\\" plot-type=\\\"self.getHistogramMode()\\\"\\n                ng-if=\\\"self.getDisplayMode() == 'bar' && self.getStackMode() == 'none'\\\"\\n                ng-repeat=\\\"bins in self.histogramList\\\" min-val=\\\"self.getLeft()\\\" max-val=\\\"self.getRight()\\\"\\n                min-y='self.minY || 0' max-y='self.getMaxY() || 100' loga=\\\"self.getLoga()\\\" autofit='false'\\n                bins=\\\"bins\\\" bin-gap=\\\"self.getBinGap()\\\" color-func=\\\"self.colorFn\\\">\\n            </canvas-barchart-layer>\\n            <canvas-barchart-layer ng-show=\\\"!groupOfBins._notUsed\\\" plot-type=\\\"self.getHistogramMode()\\\" ng-if=\\\"self.getDisplayMode() == 'bar' &&\\n                self.getStackMode() == 'well'\\\" ng-repeat=\\\"groupOfBins in self.histogramList\\\"\\n                min-val=\\\"self.getLeft()\\\" max-val=\\\"self.getRight()\\\" min-y='self.minY || 0'\\n                max-y='self.getMaxY() || 100' loga=\\\"self.getLoga()\\\" autofit='false' bins=\\\"groupOfBins\\\"\\n                bin-gap=\\\"self.getBinGap()\\\" color-func=\\\"self.colorFn\\\" multiple='true'>\\n            </canvas-barchart-layer>\\n            <canvas-barchart-layer ng-show=\\\"!groupOfBins._notUsed\\\" plot-type=\\\"self.getHistogramMode()\\\" ng-if=\\\"self.getDisplayMode() == 'bar' &&\\n                self.getStackMode() == 'zone'\\\" ng-repeat=\\\"groupOfBins in self.histogramList\\\"\\n                min-val=\\\"self.getLeft()\\\" max-val=\\\"self.getRight()\\\" min-y='self.minY || 0'\\n                max-y='self.getMaxY() || 100' loga=\\\"self.getLoga()\\\" autofit='false' bins=\\\"groupOfBins\\\"\\n                bin-gap=\\\"self.getBinGap()\\\" color-func=\\\"self.colorFn\\\" multiple='true'>\\n            </canvas-barchart-layer>\\n            <canvas-barchart-layer ng-show=\\\"!bins._notUsed\\\" plot-type=\\\"self.getHistogramMode()\\\" ng-if=\\\"self.getDisplayMode() == 'bar' &&\\n                self.getStackMode() == 'all'\\\" min-val=\\\"self.getLeft()\\\" max-val=\\\"self.getRight()\\\"\\n                min-y='self.minY || 0' max-y='self.getMaxY() || 100' loga=\\\"self.getLoga()\\\" autofit='false'\\n                bins=\\\"bins\\\" bin-gap=\\\"self.getBinGap()\\\" color-func=\\\"self.colorFn\\\" multiple='true'\\n                ng-repeat=\\\"bins in self.histogramList\\\">\\n            </canvas-barchart-layer>\\n            <line-formula-layer ng-if=\\\"self.condition4GaussianLine()\\\" min-val='self.getLeft()' max-val='self.getRight()'\\n                min-y='self.minY || 0' max-y='self.getMaxY() || 100' autofit='true' resolution='5000' loga=\\\"self.getLoga()\\\"\\n                formula=\\\"self.gaussianLine\\\" line-color=\\\"self.gaussianLine.color\\\" line-width=\\\"self.gaussianLine.width\\\">\\n            </line-formula-layer>\\n            <control-marker-layer ng-if=\\\"self.condition4GaussianLine()\\\"\\n                loga=\\\"self.getLoga()\\\"\\n                min-val=\\\"self.getLeft()\\\" max-val=\\\"self.getRight()\\\" min-y='self.minY || 0'\\n                max-y='self.getMaxY() || 100'\\n                markers=\\\"self.gaussianLine.sigmaLines\\\" draggable=\\\"false\\\"\\n                not-use-background='true'\\n                axis-direction=\\\"'right'\\\"\\n                get-marker-value=\\\"self.getMarkerGaussianVal\\\"\\n                set-marker-value=\\\"self.setMarkerGaussianVal\\\"\\n                get-marker-style-fn=\\\"self.markerGaussianStyle\\\"\\n                get-marker-name=\\\"self.markerName\\\"\\n                marker-width=\\\"19\\\">\\n            </control-marker-layer>\\n            <line-formula-layer ng-if=\\\"self.condition4LogNormalD()\\\" min-val='self.getLeft()' max-val='self.getRight()'\\n                loga=\\\"self.getLoga()\\\" min-y='self.minY || 0' max-y='self.getMaxY() || 100' autofit='true' resolution='5000'\\n                eqn-offsets=\\\"['65px', '0%']\\\" formula=\\\"self.logNormalDLine\\\" line-color=\\\"self.logNormalDLine.color\\\"\\n                line-width=\\\"self.logNormalDLine.width\\\" show-equation='true'>\\n            </line-formula-layer>\\n            <line-point-layer ng-if=\\\"self.condition4CumulativeLine()\\\" min-val=\\\"self.getLeft()\\\" plot-type=\\\"self.getHistogramMode()\\\"\\n                max-val=\\\"self.getRight()\\\" min-y='self.minY || 0' max-y='self.getMaxY() || 100' loga=\\\"self.getLoga()\\\"\\n                min-draw=\\\"self.getLeft()\\\" max-draw=\\\"self.getRight()\\\" min-draw-y=\\\"self.minY || 0\\\" max-draw-y=\\\"self.getMaxY() || 100\\\"\\n                autofit='false' get-x='self.getCumulativeX' get-y='self.getCumulativeY' line-data=\\\"self.cmltLineData\\\"\\n                line-color=\\\"self.cmltLineData.color\\\" line-width='self.cmltLineData.width' line-dash=\\\"'2 0'\\\">\\n            </line-point-layer>\\n            <line-point-layer ng-if=\\\"self.getDisplayMode() === 'line' && !bins._notUsed\\\" plot-type=\\\"self.getHistogramMode()\\\"\\n                ng-repeat=\\\"bins in self.histogramList\\\" min-val=\\\"self.getLeft()\\\" max-val=\\\"self.getRight()\\\"\\n                min-y='self.minY || 0' max-y='self.getMaxY() || 100' loga=\\\"self.getLoga()\\\" autofit='false'\\n                get-x='self.getBinX' get-y='self.getBinY' line-data=\\\"bins\\\" line-color=\\\"bins.color\\\"\\n                line-width='2' line-dash=\\\"'2 0'\\\" color-func=\\\"self.colorFn\\\">\\n            </line-point-layer>\\n            <control-marker-layer ng-if=\\\"self.ctrlParams && self.ctrlParams.length && self.validPlotRegion()\\\"\\n                min-val=\\\"self.getLeft()\\\" max-val=\\\"self.getRight()\\\" min-y='self.minY || 0'\\n                max-y='self.getMaxY() || 100'\\n                markers=\\\"self.ctrlParams\\\" draggable=\\\"true\\\"\\n                markers-mask = \\\"self.ctrlParamsMask\\\"\\n                order-free='true' loga=\\\"self.getLoga()\\\"\\n                not-use-background='self.notCPBackground'\\n                axis-direction=\\\"'right'\\\"\\n                get-marker-value=\\\"self.cpGetMarkerVal\\\"\\n                set-marker-value=\\\"self.cpSetMarkerVal\\\"\\n                get-marker-style-fn=\\\"self.cpMarkerStyle\\\"\\n                get-marker-name=\\\"self.cpMarkerName\\\"\\n                marker-width=\\\"19\\\"\\n                on-marker-drag-end=\\\"self.onMarkerDragEnd\\\">\\n            </control-marker-layer>\\n        </layer-collection>\\n        <p style=\\\"position: absolute; font-weight: bold; left: 50%; transform: translateX(-50%); bottom: 0\\\">\\n            {{self.getConfigXLabel()}} ({{ self.config.xUnit || self.defaultConfig.xUnit }})</p>\\n        <p\\n            style=\\\"position: absolute; top: 23px; right: 45%;text-transform: uppercase; font-weight: bold; transform: translateY(-50%);\\\">\\n            {{self.getConfigTitle()}}</p>\\n        <p style=\\\"position: absolute; font-weight: bold;top: 23px;left: 15px; transform: translateY(-50%);\\\"\\n            ng-if=\\\"self.getHistogramMode() === 'frequency'\\\">Frequency</p>\\n        <p style=\\\"position: absolute; font-weight: bold;top: 23px;left: 15px; transform: translateY(-50%);\\\"\\n            ng-if=\\\"self.getHistogramMode() === 'percentage'\\\">Percentage (%)</p>\\n        <p style=\\\"position: absolute; font-weight: bold;top: 23px; right: 15px;transform: translateY(-50%);\\\">Percentile (%)</p>\\n    </div>\\n    <div class=\\\"statistic-table\\\" resizable r-directions=\\\"['top']\\\" r-flex=\\\"true\\\">\\n        <div style=\\\"overflow: auto; position: absolute;overflow: auto; position: absolute; top: 0; right: 0; left: 0; bottom: 0;\\\" >\\n            <wi-table-view ng-if=\\\"self.histogramList.length\\\" row-count=\\\"self.getZoneNames().length\\\"\\n                col-count=\\\"self.getHeaders().length\\\" col-headers=\\\"self.getHeaders()\\\"\\n                get-row-icons=\\\"self.getStatsRowIcons\\\" get-row-icon-style=\\\"self.getStatsIconStyle\\\"\\n                row-headers=\\\"self.getZoneNames()\\\" accessor=\\\"self.statsValue\\\" valid-row=\\\"self.isLayerUsed\\\">\\n            </wi-table-view>\\n        </div>\\n    </div>\\n</div>\\n\";\n\n//# sourceURL=webpack:///./multi-well-histogram/fragments/main-area.html?");

/***/ }),

/***/ "./multi-well-histogram/fragments/print-settings.html":
/*!************************************************************!*\
  !*** ./multi-well-histogram/fragments/print-settings.html ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"label-option-sidebar\\\" style=\\\"padding: 12px 20px;display: flex;background: #f4f4f4;border-bottom: 1px solid #dcdcdc;justify-content: space-between;flex-direction: column;\\\">\\n    <div>Print Setting</div>\\n</div>\\n<print-settings style=\\\"overflow: auto;\\\" plot-ctrl=\\\"self\\\"></print-settings>\\n\";\n\n//# sourceURL=webpack:///./multi-well-histogram/fragments/print-settings.html?");

/***/ }),

/***/ "./multi-well-histogram/fragments/side-bar.html":
/*!******************************************************!*\
  !*** ./multi-well-histogram/fragments/side-bar.html ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = \"<!-- <side-bar ng-if=\\\"self.familyTable && self.palTable\\\" my-default-width=\\\"370\\\" orientation=\\\"w\\\" collapsed=\\\"false\\\"> -->\\n<side-bar my-default-width=\\\"370\\\" orientation=\\\"w\\\" collapsed=\\\"false\\\">\\n    <div style=\\\"display: flex; flex-direction: column; width: 100%; height: 100%;\\\">\\n        <!--Wells-->\\n        <div ng-show=\\\"isSet(1)\\\" style=\\\"overflow: auto;flex: 1;display:flex;flex-direction:column;\\\">\\n            \" + __webpack_require__(/*! ./wells.html */ \"./multi-well-histogram/fragments/wells.html\") + \"\\n        </div>\\n        <!--Zone-->\\n        <div ng-show=\\\"isSet(2)\\\" style=\\\"overflow: hidden;flex: 1; display: flex; flex-direction: column;\\\">\\n            \" + __webpack_require__(/*! ./zone.html */ \"./multi-well-histogram/fragments/zone.html\") + \"\\n        </div>\\n        <!--Control Params-->\\n        <div ng-show=\\\"isSet(7) && self.ctrlParams.length\\\" style=\\\"overflow: hidden;flex: 1; display: flex; flex-direction: column;\\\">\\n            \" + __webpack_require__(/*! ./control-params.html */ \"./multi-well-histogram/fragments/control-params.html\") + \"\\n        </div>\\n        <!--Assistive Lines-->\\n        <div ng-show=\\\"isSet(6)\\\" style=\\\"overflow: hidden;flex: 1; display: flex; flex-direction: column;\\\">\\n            \" + __webpack_require__(/*! ./assistive-lines.html */ \"./multi-well-histogram/fragments/assistive-lines.html\") + \"\\n        </div>\\n        <!--Configuration-->\\n        <div ng-show=\\\"isSet(3)\\\" style=\\\"overflow: hidden;flex: 1;display: flex;flex-direction: column;\\\">\\n            \" + __webpack_require__(/*! ./config.html */ \"./multi-well-histogram/fragments/config.html\") + \"\\n        </div>\\n        <!--Statistic-->\\n        <div ng-show=\\\"isSet(4)\\\" style=\\\"overflow: hidden;flex: 1;display: flex;flex-direction: column;\\\">\\n            \" + __webpack_require__(/*! ./statistic.html */ \"./multi-well-histogram/fragments/statistic.html\") + \"\\n        </div>\\n        <!--Layers-->\\n        <div ng-show=\\\"isSet(5)\\\" style=\\\"overflow: auto; flex: 1; display: flex; flex-direction: column;\\\">\\n            \" + __webpack_require__(/*! ./layers.html */ \"./multi-well-histogram/fragments/layers.html\") + \"\\n        </div>\\n        <!-- -----PRINT SETTINGS----- -->\\n        <div ng-show=\\\"isSet(8)\\\" style=\\\"overflow: hidden;flex: 1; display: flex; flex-direction: column;\\\">\\n            \" + __webpack_require__(/*! ./print-settings.html */ \"./multi-well-histogram/fragments/print-settings.html\") + \"\\n        </div>\\n        <div style=\\\"display: flex;\\\">\\n            <span class=\\\"button-update\\\" ng-class=\\\"{'disabled-click': !self.isSettingChange}\\\" ng-click=\\\"self.genHistogramList()\\\">\\n                Update\\n            </span>\\n        </div>\\n    </div>\\n    <div class=\\\"label-list-view\\\" style=\\\"   \\n            display: flex;\\n            border-left: 1px solid #e4e4e4;\\n            flex-direction: column;\\n            justify-content: start;\\n            padding: 0px;\\n            right: 0;\\n            background: #fff;\\n            overflow-y: overlay;\\n            overflow-x: hidden;\\n            position: sticky;\\n            box-shadow: 0 10px 10px #00000017;\\\">\\n        <div style=\\\"\\n            transform-origin: left;\\n            transform: translate(20px, -50%) rotate(90deg);\\n            display: flex;\\n            position: absolute;\\\">\\n            <div ng-class=\\\"{'active' : isSet(1)}\\\" ng-click=\\\"setTab(1)\\\" class=\\\"tab-with-label\\\">\\n                <div >\\n                    Wells\\n                </div>\\n            </div>\\n            <div ng-class=\\\"{'active' : isSet(3)}\\\" ng-click=\\\"setTab(3)\\\" class=\\\"tab-with-label\\\">\\n                <div >\\n                    Configuration\\n                </div>\\n            </div>\\n            <!--<div ng-show='self.ctrlParams.length' ng-class=\\\"{'active' : isSet(7)}\\\" ng-click=\\\"setTab(7)\\\" class=\\\"tab-with-label\\\">-->\\n                <!--<div>-->\\n                    <!--Control Params-->\\n                <!--</div>-->\\n            <!--</div>-->\\n            <div ng-class=\\\"{'active' : isSet(2)}\\\" ng-click=\\\"setTab(2)\\\" class=\\\"tab-with-label\\\"\\n                ng-show=\\\"!self.ctrlParams || !self.ctrlParams.length\\\">\\n                <div >\\n                    Zone\\n                </div>\\n            </div>\\n            <div ng-class=\\\"{'active' : isSet(6)}\\\" ng-click=\\\"setTab(6)\\\" class=\\\"tab-with-label\\\">\\n                <div >\\n                    Assistive Lines\\n                </div>\\n            </div>\\n            <div ng-class=\\\"{'active' : isSet(4)}\\\" ng-click=\\\"setTab(4)\\\" class=\\\"tab-with-label\\\">\\n                <div >\\n                    Statistic\\n                </div>\\n            </div>\\n            <div ng-class=\\\"{'active' : isSet(5)}\\\" ng-click=\\\"setTab(5)\\\" class=\\\"tab-with-label\\\">\\n                <div >\\n                    Layers\\n                </div>\\n            </div>\\n            <div class=\\\"tab-with-label\\\" ng-class=\\\"{'active' : isSet(8)}\\\" ng-click=\\\"setTab(8)\\\">\\n                <div >\\n                    Print Setting\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</side-bar>\\n\";\n\n//# sourceURL=webpack:///./multi-well-histogram/fragments/side-bar.html?");

/***/ }),

/***/ "./multi-well-histogram/fragments/statistic.html":
/*!*******************************************************!*\
  !*** ./multi-well-histogram/fragments/statistic.html ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"label-option-sidebar\\\" style=\\\"padding: 12px 20px;display: flex;background: #f4f4f4;border-bottom: 1px solid #dcdcdc;justify-content: space-between;flex-direction: column;\\\">\\n    <div>Statistic</div>\\n</div>\\n<div onmouseover=\\\"this.style.overflow='overlay'\\\" onmouseout=\\\"this.style.overflow='hidden'\\\"style=\\\"flex:1; padding: 15px;\\\">\\n    <div style=\\\"display: flex;margin-bottom: 16px;\\\">Table Information\\n        <div style=\\\"border-bottom: 1px solid #e4e4e4;flex: 1;margin-left: 15px;margin-bottom: 6px;\\\">\\n        </div>\\n    </div>\\n    <div style=\\\"display: flex; flex-wrap: wrap;    position: absolute;\\\">\\n        <span ng-repeat=\\\"header in self.statisticHeaders\\\" class=\\\"select-table-header\\\"\\n            ng-class=\\\"{'active' : self.statisticHeaderMasks[$index]}\\\"\\n            ng-click=\\\"self.statisticHeaderMasks[$index]= !self.statisticHeaderMasks[$index]\\\">\\n            {{header}}</span>\\n    </div>\\n</div>\\n\";\n\n//# sourceURL=webpack:///./multi-well-histogram/fragments/statistic.html?");

/***/ }),

/***/ "./multi-well-histogram/fragments/wells.html":
/*!***************************************************!*\
  !*** ./multi-well-histogram/fragments/wells.html ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"label-option-sidebar\\\"\\n    style=\\\"padding: 12px 20px;display: flex;background: #f4f4f4;border-bottom: 1px solid #dcdcdc;justify-content: space-between;flex-direction: column;\\\">\\n    <div>Wells</div>\\n</div>\\n<div class=\\\"label-option-sidebar\\\" style=\\\"margin-top: 10px; display: flex; justify-content: space-between;\\\">\\n    <span>Input</span>\\n    <div>\\n        <span ng-class=\\\"{'active' : self.selectionType === 'family-group'}\\\" ng-click=\\\"self.selectionType='family-group'\\\"\\n            class=\\\"button-with-label\\\" style=\\\"margin-right: 8px;\\\">Family Group</span>\\n        <span ng-class=\\\"{'active' : self.selectionType === 'family'}\\\" ng-click=\\\"self.selectionType='family'\\\"\\n            class=\\\"button-with-label\\\" style=\\\"margin-right: 8px;\\\">Family</span>\\n        <span ng-class=\\\"{'active' : self.selectionType === 'curve'}\\\" ng-click=\\\"self.selectionType='curve'\\\"\\n            class=\\\"button-with-label\\\">Curve</span>\\n    </div>\\n</div>\\n<div class=\\\"label-option-sidebar\\\" style=\\\"display: flex;\\\">\\n    <div class=\\\"selection-sidebar\\\" style=\\\"flex: 1;\\\">\\n        <span>X Axis</span>\\n        <wi-dropdown-list style=\\\"flex:1; margin-left: 10px;\\\" items='self.selectionList'\\n            current-select=\\\"self.selectionValue\\\" on-item-changed=\\\"self.onInputSelectionChanged\\\">\\n        </wi-dropdown-list>\\n    </div>\\n</div>\\n<div style=\\\"overflow: auto; display:flex; flex-direction: column; flex: 1;\\\">\\n    <wi-sortable item-list=\\\"self.treeConfig\\\" related-list=\\\"[self.wellSpec]\\\" update-fn=\\\"self.sortableUpdate\\\">\\n        <div class=\\\"sort-item\\\" style=\\\"border: 1px solid #e4e4e4;margin: 5px 16px;border-radius: 2px;\\\"\\n            ng-repeat='well in self.treeConfig'>\\n            <div style=\\\"display: flex; flex-direction: row; position: relative; padding: 9px 10px;background: #f4f4f4; align-items: center;justify-content: space-between;text-align: center;\\\">\\n                <div style=\\\"display: flex; align-items: center;\\\">\\n                    <i class=\\\"header-icon\\\" ng-class=\\\"{'fa fa-caret-down': well._notHidden, 'fa fa-caret-right': !well._notHidden}\\\"\\n                        ng-click=\\\"well._notHidden = !well._notHidden\\\"></i>\\n                    <div style=\\\"border-radius: 2px; padding: 1px 10px;max-width: 150px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;\\\"\\n                        ng-bind=\\\"well.name\\\"></div>\\n                </div>\\n                <div style=\\\"display: flex; align-items: center;position:absolute; right: 10px;\\\">\\n\\n                    <span ng-class=\\\"{'red-color fa fa-eye-slash': well._notUsed, 'blue-color fa fa-eye': !well._notUsed }\\\"\\n                        ng-click=\\\"self.toggleWell(well)\\\" style=\\\"cursor: pointer; margin-right: 17px;\\\">\\n                    </span>\\n                    <span class=\\\"fa fa-filter\\\" ng-class=\\\"{'blue-color': self.hasDiscriminator(well)}\\\"\\n                        ng-click=\\\"self.discriminatorDialog(well)\\\" style=\\\"cursor: pointer; margin-right: 17px;\\\">\\n                    </span>\\n                    <span class=\\\"fa fa-times-circle\\\" ng-click=\\\"self.removeWell(well)\\\"\\n                        style=\\\"color: rgb(163, 163, 163);cursor: pointer;margin-right: 5px;\\\">\\n                    </span>\\n                </div>\\n            </div>\\n            <div style=\\\"display: flex;position: relative;flex-direction: row ; flex-wrap: wrap; max-width: 420px;border-top: 1px solid #dbdbdb; background: #f4f4f4; align-items: center;justify-content: flex-start;text-align: center;\\\">\\n                <div class=\\\"axis-bar\\\">\\n                    <div style=\\\"overflow: hidden;white-space: nowrap;text-overflow: ellipsis; flex: 1;\\\" title=\\\"{{self.getWellSpec(well).datasetName}}\\\">Dataset: {{self.getWellSpec(well).datasetName}}</div>\\n                    <div style=\\\"border-right: 1px solid #ddd;height: 17px;margin: 0 10px;\\\"></div>\\n                    <div style=\\\"overflow: hidden;white-space: nowrap;text-overflow: ellipsis; flex: 1;\\\" title=\\\"{{self.getCurve(well).name}}\\\">Curve: {{self.getCurve(well).name}}</div>\\n                </div>\\n            </div>\\n            <div>\\n                <wi-tree-view-virtual ng-hide=\\\"!well._notHidden\\\" tree-root=\\\"well\\\" get-label=\\\"self.getLabel\\\" filter=\\\"self.selectionValue\\\"\\n                get-icon=\\\"self.getIcon\\\" get-children=\\\"self.getChildren\\\" keep-children='true' uncollapsible='false'\\n                run-match=\\\"self.runMatch\\\" hide-unmatched=\\\"true\\\" hide-search='true' click-fn='self.clickFunction' vlist-height=\\\"110\\\" collapsed=\\\"false\\\">\\n                </wi-tree-view-virtual>\\n            </div>\\n        </div>\\n    </wi-sortable>\\n</div>\\n\";\n\n//# sourceURL=webpack:///./multi-well-histogram/fragments/wells.html?");

/***/ }),

/***/ "./multi-well-histogram/fragments/zone.html":
/*!**************************************************!*\
  !*** ./multi-well-histogram/fragments/zone.html ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"label-option-sidebar\\\" style=\\\"padding: 12px 20px;display: flex;background: #f4f4f4;border-bottom: 1px solid #dcdcdc;justify-content: space-between;flex-direction: column;\\\">\\n    <div>Zone</div>\\n</div>\\n<div class=\\\"label-option-sidebar\\\" style=\\\"padding: 16px 16px;\\\">\\n    <div class=\\\"selection-sidebar\\\">\\n        <span>Zoneset</span>\\n        <wi-dropdown-list style=\\\"flex:1; margin-left: 10px;\\\" items='self.zonesetList' on-wi-dropdown-init=\\\"self.zonesetDropdownInit\\\"\\n            current-select=\\\"self.zonesetName\\\" on-item-changed=\\\"self.onZonesetSelectionChanged\\\">\\n        </wi-dropdown-list>\\n    </div>\\n</div>\\n<div style=\\\"display: flex; padding: 0 16px 11px 16px;\\\">\\n    <span ng-click=\\\"self.hideSelectedZone()\\\" class=\\\"button-with-label-layer\\\"\\n        style=\\\"margin-left: 0;\\\">Deactivate</span>\\n    <span ng-click=\\\"self.showSelectedZone()\\\" class=\\\"button-with-label-layer\\\"\\n        style=\\\"margin-left: 15px;\\\">Activate</span>\\n    <span ng-click=\\\"self.hideAllZone()\\\" class=\\\"button-with-label-layer\\\"\\n        style=\\\"margin-left: 15px;\\\">Deactivate All</span>\\n    <span ng-click=\\\"self.showAllZone()\\\" class=\\\"button-with-label-layer\\\"\\n        style=\\\"margin-left: 15px;\\\">Activate All</span>\\n</div>\\n<div ng-show=\\\"self.zoneTree\\\" class=\\\"disable-node-caret\\\"\\n    style=\\\"border: 1px solid #e4e4e4;margin: 5px 15px;border-radius: 2px;flex: 1;overflow: auto; display: flex;\\\">\\n    <wi-tree-view-virtual style=\\\"flex: 1;\\\" tree-root=\\\"self.zoneTreeUniq\\\" get-label=\\\"self.getZoneLabel\\\"\\n        filter=\\\"self.zoneFilter\\\" get-icon=\\\"self.getZoneIcon\\\" get-children=\\\"self.noChildren\\\"\\n        keep-children='true' run-match=\\\"self.runZoneMatch\\\" hide-unmatched=\\\"true\\\"\\n        hide-search='false' click-fn='self.click2ToggleZone'>\\n    </wi-tree-view-virtual>\\n</div>\\n<div ng-hide=\\\"self.zoneTree\\\" style=\\\"border: 1px solid #e4e4e4; margin: 5px 15px;\\\">\\n    zonationAll\\n</div>\\n\";\n\n//# sourceURL=webpack:///./multi-well-histogram/fragments/zone.html?");

/***/ }),

/***/ "./multi-well-histogram/index.js":
/*!***************************************!*\
  !*** ./multi-well-histogram/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var componentName = 'multiWellHistogram';\r\nmodule.exports.name = componentName;\r\n__webpack_require__(/*! ./style.less */ \"./multi-well-histogram/style.less\");\r\nconst utils = __webpack_require__(/*! ../utils */ \"./utils.js\");\r\nvar PrintableController = Printable.klass;\r\nvar component = Printable.component;\r\n\r\nconst _DECIMAL_LEN = 4;\r\n\r\nvar app = angular.module(componentName, [\r\n    'sideBar', 'wiTreeViewVirtual', 'wiTableView',\r\n    'wiApi', 'editable', 'wiDialog',\r\n    'wiDroppable', 'wiDropdownList', 'plot-toolkit',\r\n    'wiLoading', 'angularResizable', 'wiDiscriminator',\r\n    'printSettings'\r\n]);\r\napp.component(componentName, component({\r\n    template: __webpack_require__(/*! ./template.html */ \"./multi-well-histogram/template.html\"),\r\n    controller: multiWellHistogramController,\r\n    bindings: {\r\n        token: \"<\",\r\n        idProject: \"<\",\r\n        wellSpec: \"<\",\r\n        zonesetName: \"<\",\r\n        selectionType: \"=\",\r\n        selectionValue: \"=\",\r\n        idHistogram: \"<\",\r\n        config: '<',\r\n        noStack: '<',\r\n        stackMode: \"<\",\r\n        onSave: '<',\r\n        onSaveAs: '<',\r\n        onReload: '<',\r\n        title: '<',\r\n        silent: \"<\",\r\n        ctrlParams: \"<\",\r\n        cpGetMarkerVal: \"<\",\r\n        cpSetMarkerVal: \"<\",\r\n        cpMarkerStyle: \"<\",\r\n        cpMarkerName: \"<\",\r\n        prefix: '<',\r\n        cpIcons: \"<\",\r\n        cpIconStyle: \"<\",\r\n        onMarkerDragEnd: \"<\",\r\n        dragHeader: '<',\r\n        afterNewPlotCreated: '<'\r\n    },\r\n    transclude: true\r\n}))\r\nmultiWellHistogramController.$inject = ['$scope', '$timeout', '$element', '$compile', 'wiToken', 'wiApi', 'wiDialog', 'wiLoading'];\r\nfunction multiWellHistogramController($scope, $timeout, $element, $compile, wiToken, wiApi, wiDialog, wiLoading) {\r\n    window.hisCtrl = this;\r\n    let self = this;\r\n    PrintableController.call(this, $scope, $element, $timeout, $compile, wiApi);\r\n    self.silent = true;\r\n    self.treeConfig = [];\r\n    self.selectedNode = null;\r\n    self.datasets = {};\r\n    self.statisticHeaders = ['X-Axis', 'Filter', 'Top', 'Bottom', 'Points', 'Avg', 'Min', 'Max', 'Avgdev', 'Stddev', 'Var', 'Skew', 'Kurtosis', 'Median', 'P10', 'P50', 'P90'];\r\n    self.statisticHeaderMasks = [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true];\r\n    //--------------\r\n    $scope.tab = 1;\r\n    self.selectionTab = self.selectionTab || 'Wells';\r\n\r\n    $scope.setTab = function (newTab) {\r\n        $scope.tab = newTab;\r\n    };\r\n\r\n    $scope.isSet = function (tabNum) {\r\n        return $scope.tab === tabNum;\r\n    };\r\n\r\n    this.getFamilyTable = function () {\r\n        return wiApi.getFamilyTable();\r\n    }\r\n    this.getPals = function () {\r\n        self.palTable = wiApi.getPalettes();\r\n        return wiApi.getPalettes();\r\n    }\r\n    this.discriminatorDialog = function (well) {\r\n        let wSpec = getWellSpec(well);\r\n        let datasetId = wSpec.idDataset;\r\n        let dataset = well.datasets.find(ds => ds.idDataset === wSpec.idDataset);\r\n\r\n        let curvesArr = dataset.curves.map(c => ({ type: 'curve', name: c.name }));\r\n        wiDialog.discriminator(wSpec.discriminator, curvesArr, function (discrmnt) {\r\n            self.isSettingChange = true;\r\n            wSpec.discriminator = discrmnt;\r\n        });\r\n    }\r\n    this.hasDiscriminator = function (well) {\r\n        let wSpec = getWellSpec(well);\r\n        return Object.keys(((wSpec || {}).discriminator) || {}).length > 0 && wSpec.discriminator.active;\r\n    }\r\n    //--------------\r\n    this.getDataset = function (well) {\r\n        wiApi.getCachedWellPromise(well.idWell).then((well) => {\r\n            self.datasets[well] = well.datasets;\r\n        }).catch(e => console.error(e));\r\n    }\r\n\r\n    function getCurvesInWell(well) {\r\n        let curves = [];\r\n        well.datasets.forEach(dataset => {\r\n            curves.push(...dataset.curves);\r\n        });\r\n        return curves;\r\n    }\r\n\r\n    function getFamilyInWell(well) {\r\n        let curves = getCurvesInWell(well);\r\n        let familyList = curves.map(c => wiApi.getFamily(c.idFamily));\r\n        return familyList;\r\n    }\r\n    this.defaultBindings = function () {\r\n        if (self.token)\r\n            wiToken.setToken(self.token);\r\n        self.verticalMargin = 0;\r\n        self.horizontalMargin = 0;\r\n        self.isSettingChange = true;\r\n        self.cpGetMarkerVal = self.cpGetMarkerVal || function (marker, idx) { return marker.value }\r\n        self.cpSetMarkerVal = self.cpSetMarkerVal || function (marker, idx, newVal) { marker.value = newVal; }\r\n        self.cpMarkerStyle = self.cpMarkerStyle || function (marker, idx) { return { stroke: marker.color, 'stroke-width': '2', fill: 'none' } }\r\n        self.cpMarkerName = self.cpMarkerName || function (marker, idx) { return marker.name; }\r\n        self.ctrlParams = self.ctrlParams || [];\r\n        //let ctrlParamsGroupByWell = _.groupBy(self.ctrlParams, ctrlParam => ctrlParam.wellName);\r\n        //for (let ctrlParamsGroupByWellKey in ctrlParamsGroupByWell) {\r\n        //let ctrlParamGroupByWell = ctrlParamsGroupByWell[ctrlParamsGroupByWellKey];\r\n        //let ctrlParamsGroup = _.groupBy(ctrlParamGroupByWell, ctrlParam => ctrlParam.$ref);\r\n        //for (let ctrlParams in ctrlParamsGroup) {\r\n        //let zoneInfoList = ctrlParamsGroup[ctrlParams].map(ctrlParam => ctrlParam.zoneInfo);\r\n        //zoneInfoList.forEach((zoneInfo, idx) => {\r\n        //zoneInfo._idx = idx;\r\n        //})\r\n        //}\r\n        //}\r\n        self.notCPBackground = self.notCPBackground != undefined ? self.notCPBackground : true;\r\n        self.ctrlParamsMask = self.ctrlParams.map(c => true);\r\n        self.cpIcon = self.cpIcon || function (node) {\r\n            let idx = self.ctrlParams.indexOf(node);\r\n            if (idx >= 0) {\r\n                let use = self.ctrlParamsMask[idx];\r\n                return use ? 'layer-16x16' : 'fa fa-eye-slash';\r\n            }\r\n        }\r\n        self.cpIcons = self.cpIcons || function (node) { return [\"rectangle\"] }\r\n        self.cpIconStyle = self.cpIconStyle || function (node) {\r\n            return {\r\n                'background-color': node.color || 'red'\r\n            }\r\n        }\r\n        self.cpBackground = self.cpBackground || {\r\n            'background-color': 'rgba(255, 249, 160, 0.6)'\r\n        };\r\n\r\n\r\n        self.defaultConfig = self.defaultConfig || {};\r\n        self.wellSpec = self.wellSpec || [];\r\n        console.log(self.wellSpec)\r\n        self.selectionType = self.selectionType || 'family-group';\r\n        self.zoneTree = [];\r\n        self.zonesetName = self.zonesetName || \"ZonationAll\";\r\n        self.config = self.config || { family: \"\", grid: true, displayMode: 'bar', colorMode: 'zone', stackMode: self.stackMode || self.noStack ? 'none' : 'well', binGap: 5, title: self.title || '', notShowCumulative: false };\r\n        self.getToggleGaussianFn = self.config.notUsedGaussian ? self.click2ToggleLogNormalD : self.click2ToggleGaussian;\r\n        self.getGaussianIconFn = self.config.notUsedGaussian ? self.getLogNormalDIcon : self.getGaussianIcon;\r\n        self.dragHeader = self.dragHeader || false;\r\n    }\r\n    this.exportStatistic = function () {\r\n        if (!self.histogramList.length) {\r\n            let msg = `No statistic data to export`;\r\n            if (__toastr) __toastr.error(msg);\r\n            console.error(msg);\r\n            return;\r\n        }\r\n        let rowHeaders = self.getZoneNames();\r\n        let colHeaders = self.getHeaders();\r\n        let items = [];\r\n        let headers = {\r\n            Layer: 'Layer'\r\n        };\r\n\r\n        colHeaders.forEach((cHeader, cHeaderIdx) => {\r\n            headers[cHeader] = cHeader;\r\n        })\r\n        rowHeaders.forEach((rHeader, rHeaderIdx) => {\r\n            let item = {\r\n                \"Layer\": rHeader\r\n            };\r\n            colHeaders.forEach((cHeader, cHeaderIdx) => {\r\n                item[cHeader] = self.statsValue([rHeaderIdx, cHeaderIdx]);\r\n            })\r\n            items.push(item);\r\n        });\r\n        let fileTitle = self.getConfigTitle();\r\n        utils.exportCSVFile(headers, items, fileTitle);\r\n    }\r\n    this.$onInit = async function () {\r\n        self.doInit();\r\n        $timeout(() => {\r\n            $scope.$watch(() => {\r\n                let config = angular.copy(self.config);\r\n                delete config.notShowCumulative;\r\n                delete config.notUsedGaussian;\r\n                return config;\r\n            }, (newVal, oldVal) => {\r\n                self.isSettingChange = true;\r\n            }, true);\r\n            $scope.$watch(() => self.getFamilyTable(), (newVal, oldVal) => {\r\n                self.familyTable = newVal;\r\n                getSelectionList(self.selectionType, self.treeConfig);\r\n                updateDefaultConfig();\r\n            });\r\n            $scope.$watch(() => self.getPals(), (newVal, oldVal) => {\r\n                self.palTable = newVal;\r\n            });\r\n            $scope.$watch(() => {\r\n                return self.wellSpec.map(wsp => {\r\n                    return `${wsp.idCurve}`;\r\n                }).join('');\r\n            }, () => {\r\n                self.isSettingChange = true;\r\n                updateDefaultConfig();\r\n            }, true);\r\n            $scope.$watch(() => (self.selectionType), (newVal, oldVal) => {\r\n                if (newVal === oldVal) return;\r\n                self.isSettingChange = true;\r\n                self.selectionValue = '';\r\n                getSelectionList(self.selectionType, self.treeConfig);\r\n                updateDefaultConfig();\r\n            });\r\n            $scope.$watch(() => (self.selectionValue), () => {\r\n                self.isSettingChange = true;\r\n                updateDefaultConfig();\r\n            });\r\n            $scope.$watch(() => (self.treeConfig.map(w => w.idWell)), () => {\r\n                self.isSettingChange = true;\r\n                getSelectionList(self.selectionType, self.treeConfig);\r\n                getZonesetsFromWells(self.treeConfig);\r\n                updateDefaultConfig();\r\n            }, true);\r\n            getTrees();\r\n        }, 500);\r\n\r\n    }\r\n\r\n    this.onInputSelectionChanged = function (selectedItemProps) {\r\n        self.selectionValue = (selectedItemProps || {}).name;\r\n    }\r\n\r\n    function getSelectionList(selectionType, wellArray) {\r\n        let selectionHash = {};\r\n        let allCurves = [];\r\n        wellArray.forEach(well => {\r\n            let curvesInWell = getCurvesInWell(well);\r\n            allCurves.push(...curvesInWell);\r\n        });\r\n        switch (selectionType) {\r\n            case 'curve':\r\n                allCurves.forEach(curve => {\r\n                    selectionHash[curve.name] = 1;\r\n                })\r\n                break;\r\n            case 'family':\r\n                allCurves.forEach(curve => {\r\n                    let family = wiApi.getFamily(curve.idFamily);\r\n                    if (family)\r\n                        selectionHash[family.name] = 1;\r\n                })\r\n                break;\r\n            case 'family-group':\r\n                allCurves.forEach(curve => {\r\n                    let family = wiApi.getFamily(curve.idFamily);\r\n                    if (family)\r\n                        selectionHash[family.familyGroup] = 1;\r\n                })\r\n                break;\r\n        }\r\n        self.selectionList = Object.keys(selectionHash).map(item => ({\r\n            data: { label: item },\r\n            properties: { name: item }\r\n        }));\r\n        self.selectionList.sort((a, b) => {\r\n            return a.data.label.localeCompare(b.data.label);\r\n        })\r\n    }\r\n    this.sortableUpdate = function () {\r\n        $scope.$digest();\r\n    }\r\n\r\n    this.runMatch = function (node, criteria) {\r\n        let family;\r\n        if (!criteria) return true;\r\n        switch (self.selectionType) {\r\n            case 'family-group':\r\n                family = wiApi.getFamily(node.idFamily);\r\n                if (!family) return null;\r\n                return family.familyGroup.trim().toLowerCase() === criteria.trim().toLowerCase();\r\n\r\n            case 'family':\r\n                family = wiApi.getFamily(node.idFamily);\r\n                if (!family) return null;\r\n                return family.name.trim().toLowerCase() === criteria.trim().toLowerCase();\r\n\r\n            case 'curve':\r\n                return node.name.trim().toLowerCase() === criteria.trim().toLowerCase();\r\n        }\r\n    }\r\n    this.getLabel = function (node) {\r\n        return node.name;\r\n    }\r\n    this.getIcon = function (node) {\r\n        if (node.idCurve) return 'curve-16x16';\r\n        if (node.idDataset) return 'curve-data-16x16';\r\n        if (node.idWell) return 'well-16x16';\r\n    }\r\n    this.getChildren = function (node) {\r\n        if (node.idDataset) {\r\n            return node.curves;\r\n        }\r\n        if (node.idWell) {\r\n            return node.datasets;\r\n        }\r\n        return [];\r\n    }\r\n    this.clickFunction = clickFunction;\r\n    function clickFunction($event, node, selectedObjs, treeRoot) {\r\n        let wellSpec = self.wellSpec.find(wsp => wsp.idWell === treeRoot.idWell && wsp._idx === treeRoot._idx);\r\n        wellSpec.idCurve = node.idCurve;\r\n        wellSpec.idDataset = node.idDataset;\r\n        wellSpec.curveName = node.Name;\r\n    }\r\n    this.refresh = function () {\r\n        // self.histogramList.length = 0;\r\n        // self.treeConfig.length = 0;\r\n        if (self.onReload) {\r\n            self.onReload(function () {\r\n                self.isSettingChange = true;\r\n                getTrees(() => {\r\n                    self.genHistogramList();\r\n                });\r\n            })\r\n        } else {\r\n            self.isSettingChange = true;\r\n            getTrees(() => {\r\n                self.genHistogramList();\r\n            });\r\n        }\r\n    };\r\n    async function getTree(wellSpec, callback) {\r\n        let wellIdx = self.treeConfig.findIndex(wellTree => wellTree.idWell === wellSpec.idWell && wellTree._idx === wellSpec._idx);\r\n        let well = await wiApi.getCachedWellPromise(wellSpec.idWell);\r\n        wellSpec.name = well.name;\r\n        well = Object.assign({}, well);\r\n        well._idx = wellSpec._idx;\r\n        $timeout(() => {\r\n            self.treeConfig.push(well);\r\n        })\r\n        return well;\r\n    }\r\n    async function getTrees(callback) {\r\n        wiLoading.show($element.find('.main')[0], self.silent);\r\n        self.treeConfig = [];\r\n        for (let w of self.wellSpec) {\r\n            try {\r\n                let well = await wiApi.getCachedWellPromise(w.idWell || w);\r\n                w.name = well.name;\r\n                well = Object.assign({}, well);\r\n                well._idx = w._idx;\r\n                self.treeConfig.push(well);\r\n            }\r\n            catch (e) {\r\n                w.notFound = true;\r\n                let msg = `Well ${w.name} not found`;\r\n                if (__toastr) __toastr.error(msg);\r\n                console.error(e);\r\n            }\r\n        }\r\n        self.wellSpec = self.wellSpec.filter(wellspec => !wellspec.notFound);\r\n        //if (self.idHistogram) {\r\n        //self.save();\r\n        //}\r\n        if (!$scope.$root.$$phase) $scope.$digest();\r\n        callback && callback();\r\n        wiLoading.hide();\r\n    }\r\n    function getZonesetsFromWells(wells) {\r\n        if (!wells.length) return;\r\n        let zsList;\r\n        for (let well of wells) {\r\n            let zonesets = well.zone_sets;\r\n            if (!zsList) {\r\n                zsList = angular.copy(zonesets);\r\n            }\r\n            else if (zsList.length) {\r\n                zsList = intersectAndMerge(zsList, zonesets);\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        self.zonesetList = (zsList || []).map(zs => ({\r\n            data: {\r\n                label: zs.name\r\n            },\r\n            properties: zs\r\n        }));\r\n        self.zonesetList.splice(0, 0, { data: { label: 'ZonationAll' }, properties: genZonationAllZS(0, 1) });\r\n        let selectedZonesetProps = (self.zonesetList.find(zs => zs.properties.name === self.zonesetName) || {}).properties;\r\n        if (!selectedZonesetProps) {\r\n            selectedZonesetProps = self.zonesetList[0].properties;\r\n        }\r\n        self.onZonesetSelectionChanged(selectedZonesetProps);\r\n        if (!$scope.$root.$$phase) $scope.$digest();\r\n    }\r\n    function intersectAndMerge(dstZoneList, srcZoneList) {\r\n        return dstZoneList.filter(zs => {\r\n            let zoneset = srcZoneList.find(zs1 => zs.name === zs1.name);\r\n            if (!zoneset) return false;\r\n            for (let z of zoneset.zones) {\r\n                let zone = zs.zones.find(zo => zo.zone_template.name == z.zone_template.name);\r\n                if (!zone) {\r\n                    zs.zones.push(angular.copy(z));\r\n                }\r\n            }\r\n            return true;\r\n        });\r\n    }\r\n    this.getWellSpec = getWellSpec;\r\n    function getWellSpec(well) {\r\n        if (!well) return {};\r\n        return self.wellSpec.find(wsp => wsp.idWell === well.idWell && wsp._idx === well._idx);\r\n    }\r\n    this.getCurve = getCurve;\r\n    function getCurve(well) {\r\n        let wellSpec = getWellSpec(well);\r\n        if (!Object.keys(wellSpec || {}).length\r\n            || !self.selectionValue) return {};\r\n        let curves = getCurvesInWell(well).filter(c => self.runMatch(c, self.selectionValue));\r\n        let curve = wellSpec.idCurve ? (curves.find(c => c.idCurve === wellSpec.idCurve) || curves[0]) : curves[0];\r\n        if (!curve) {\r\n            delete wellSpec.curveName;\r\n            delete wellSpec.idCurve;\r\n            delete wellSpec.idDataset;\r\n            delete wellSpec.datasetName;\r\n            delete wellSpec.datasetTop;\r\n            delete wellSpec.datasetBottom;\r\n            delete wellSpec.datasetStep;\r\n            return;\r\n        }\r\n        wellSpec.curveName = curve.name;\r\n        wellSpec.idCurve = curve.idCurve;\r\n        wellSpec.idDataset = curve.idDataset;\r\n\r\n        let datasets = self.getChildren(well);\r\n        let dataset = wellSpec.idDataset ? datasets.find(ds => ds.idDataset === wellSpec.idDataset) : datasets[0];\r\n        wellSpec.datasetName = dataset.name;\r\n        wellSpec.datasetTop = parseFloat(dataset.top);\r\n        wellSpec.datasetBottom = parseFloat(dataset.bottom);\r\n        wellSpec.datasetStep = parseFloat(dataset.step);\r\n        return curve;\r\n    }\r\n    function getZoneset(well, zonesetName = \"\") {\r\n        let zonesets = well.zone_sets;\r\n        if (zonesetName === \"\" || zonesetName === \"ZonationAll\")\r\n            return null;\r\n        return zonesets.find(zs => zs.name === zonesetName);\r\n    }\r\n    this.onZonesetDropdownInit = function (wiDropdownListCtrl) {\r\n        self.zonesetDropdownCtrl = wiDropdownListCtrl;\r\n    }\r\n    this.onZonesetSelectionChanged = function (selectedItemProps) {\r\n        self.isSettingChange = true;\r\n        let zones = (selectedItemProps || {}).zones;\r\n        if (zones && zones.length) {\r\n            wiApi.indexZonesForCorrelation(zones.sort((a, b) => {\r\n                return a.startDepth - b.startDepth;\r\n            }))\r\n        }\r\n        self.zoneTree = (selectedItemProps || {}).zones;\r\n        if (!self.zoneTree || !self.zoneTree.length) return;\r\n        self.zoneTreeUniq = _.uniqBy(self.zoneTree.map(zone => ({ name: zone.zone_template.name })), zone => {\r\n            return zone.name;\r\n        });\r\n        self.zonesetName = (selectedItemProps || {}).name || 'ZonationAll';\r\n    }\r\n    this.runZoneMatch = function (node, criteria) {\r\n        let keySearch = criteria.toLowerCase();\r\n        let searchArray = node.zone_template.name.toLowerCase();\r\n        return searchArray.includes(keySearch);\r\n    }\r\n    this.getZoneLabel = function (node) {\r\n        if (!node || !node.name) {\r\n            return 'aaa';\r\n        }\r\n        //return node.zone_template.name;\r\n        return node.name;\r\n    }\r\n\r\n    this.getZoneIcon = (node) => ((node && !node._notUsed) ? 'zone-16x16' : 'fa fa-ban')\r\n    const EMPTY_ARRAY = []\r\n    this.validPlotRegion = function () {\r\n        let result = (self.getRight() - self.getLeft());\r\n        return _.isFinite(result) && result != 0;\r\n    }\r\n    this.noChildren = function (node) {\r\n        return EMPTY_ARRAY;\r\n    }\r\n    this.click2ToggleZone = function ($event, node, selectedObjs) {\r\n        self.isSettingChange = true;\r\n        node._notUsed = !node._notUsed;\r\n        let zoneTree = self.zoneTree.filter(zone => zone.zone_template.name == node.name);\r\n        zoneTree.forEach(zone => {\r\n            zone._notUsed = !zone._notUsed;\r\n        })\r\n        self.selectedZones = selectedObjs.map(obj => obj.data);\r\n    }\r\n    this.getZoneTreeMaxHeight = function () {\r\n        return $element.height();\r\n    }\r\n\r\n    this.click2ToggleLayer = function ($event, node, selectedObjs) {\r\n        node._notUsed = !node._notUsed;\r\n        toggleCtrlParams(node, 'layer');\r\n        self.selectedLayers = selectedObjs.map(obj => obj.data);\r\n    }\r\n    function toggleCtrlParams(node, type) {\r\n        if (self.ctrlParams && self.ctrlParams.length) {\r\n            self.ctrlParams.forEach((ctrlParam, idx) => {\r\n                let zoneInfo = ctrlParam.zoneInfo;\r\n                if (type === 'layer' && node.name.includes(`${ctrlParam.wellName}.${zoneInfo.zone_template.name.replace('All', 'ZonationAll')}(${zoneInfo.__depthIndex || 0})`)) {\r\n                    self.ctrlParamsMask[idx] = !node._notUsed;\r\n                } else if (type === 'well' && node.name.includes(`${ctrlParam.wellName}`)) {\r\n                    self.ctrlParamsMask[idx] = !node._notUsed;\r\n                }\r\n            })\r\n        }\r\n    }\r\n    this.click2ToggleCumulative = function ($event, node, selectedObjs) {\r\n        node._useCmlt = !node._useCmlt;\r\n        self.setCumulativeData(self.histogramList);\r\n    }\r\n    this.click2ToggleGaussian = function ($event, node, selectedObjs) {\r\n        node._useGssn = !node._useGssn;\r\n        if (self.config.notUsedGaussian) {\r\n            self.setLogNormalDFn(self.histogramList);\r\n        } else {\r\n            self.setGaussianData(self.histogramList);\r\n        }\r\n        self.setCumulativeData(self.histogramList);\r\n        self.selectedGaussian = selectedObjs.map(obj => obj.data);\r\n    }\r\n    this.click2ToggleCtrlParams = function ($event, node, selectedObjs) {\r\n        let ctrlParamIdx = self.ctrlParams.findIndex(cp => node.$res.name === cp.$res.name && node.zoneInfo.idZone == cp.zoneInfo.idZone);\r\n        if (ctrlParamIdx >= 0) {\r\n            self.ctrlParamsMask[ctrlParamIdx] = !self.ctrlParamsMask[ctrlParamIdx];\r\n            self.selectedCtrlParams = selectedObjs;\r\n        }\r\n        self.selectedCtrlParams = selectedObjs.map(obj => obj.data);\r\n    }\r\n    this.click2ToggleLogNormalD = function ($event, node, selectedObjs) {\r\n        node._useLogNormalD = !node._useLogNormalD;\r\n        self.setLogNormalDFn(self.histogramList);\r\n    }\r\n    this.toggleGaussianLine = function (notUsedGaussian) {\r\n        self.config.notUsedGaussian = notUsedGaussian;\r\n        if (notUsedGaussian) {\r\n            self.getToggleGaussianFn = self.click2ToggleLogNormalD;\r\n            self.getGaussianIconFn = self.getLogNormalDIcon;\r\n            self.setLogNormalDFn(self.histogramList);\r\n        } else {\r\n            self.getToggleGaussianFn = self.click2ToggleGaussian;\r\n            self.getGaussianIconFn = self.getGaussianIcon;\r\n            self.setGaussianData(self.histogramList);\r\n        }\r\n    }\r\n\r\n    this.runCPMatch = function (node, criteria) {\r\n        let keySearch = criteria.toLowerCase();\r\n        let searchArray = self.cpMarkerName(node).toLowerCase();\r\n        return searchArray.includes(keySearch);\r\n    }\r\n    this.runLayerMatch = function (node, criteria) {\r\n        let keySearch = criteria.toLowerCase();\r\n        let searchArray = node.name.toLowerCase();\r\n        return searchArray.includes(keySearch);\r\n    }\r\n    let _layerTree = [];\r\n    this.getLayerTree = function () {\r\n        //if(self.getStackMode() === 'all') {\r\n        //_layerTree[0] = self.histogramList;\r\n        //return _layerTree;\r\n        //}\r\n        return self.histogramList;\r\n    }\r\n    this.getLayerLabel = (node) => node.name\r\n    this.getLayerIcon = (node) => ((node && !node._notUsed) ? 'layer-16x16' : 'fa fa-eye-slash')\r\n    this.getLayerIcons = (node) => ([\"rectangle\"])\r\n    this.getLayerIconStyle = (node) => ({\r\n        'background-color': node.color\r\n    })\r\n    this.getCumulativeIcon = (node) => ((node && node._useCmlt) ? 'layer-16x16' : 'fa fa-eye-slash')\r\n    this.getCumulativeIcons = (node) => ([\"rectangle\"])\r\n    this.getCumulativeIconStyle = (node) => ({\r\n        'background-color': node.color\r\n    })\r\n    /*\r\n    this.getCtrlParamsIcon = function(node) {\r\n        let idx = self.ctrlParams.indexOf(node);\r\n        if (idx >= 0) {\r\n            let use = self.ctrlParamsMask[idx];\r\n            return use ? 'layer-16x16': 'fa fa-eye-slash';\r\n        }\r\n    }\r\n    this.getCtrlParamsIcons = function (node){ return [\"rectangle\"] }\r\n    this.getCtrlParamsIconStyle = function(node) {\r\n        return  {\r\n            'background-color': self.cpMarkerStyle(node).color\r\n        }\r\n    }*/\r\n    this.getGaussianIcon = function (node) {\r\n        return (node && node._useGssn) ? 'layer-16x16' : 'fa fa-eye-slash';\r\n    }\r\n    this.getLogNormalDIcon = function (node) {\r\n        return (node && node._useLogNormalD) ? 'layer-16x16' : 'fa fa-eye-slash';\r\n    }\r\n    this.getGaussianIcons = (node) => ([\"rectangle\"])\r\n    this.getGaussianIconStyle = (node) => ({\r\n        'background-color': node.color\r\n    })\r\n    this.getConfigLeft = function () {\r\n        self.config = self.config || {};\r\n        return isNaN(self.config.left) ? \"[empty]\" : wiApi.bestNumberFormat(self.config.left, 3);\r\n    }\r\n    this.getConfigLimitTop = function () {\r\n        self.config = self.config || {};\r\n        return isNaN(self.config.limitTop) ? \"[empty]\" : wiApi.bestNumberFormat(self.config.limitTop, 3);\r\n    }\r\n    this.getConfigLimitBottom = function () {\r\n        self.config = self.config || {};\r\n        return isNaN(self.config.limitBottom) ? \"[empty]\" : wiApi.bestNumberFormat(self.config.limitBottom, 3);\r\n    }\r\n    this.setConfigLimitTop = function (notUse, newValue) {\r\n        self.config.limitTop = parseFloat(newValue)\r\n    }\r\n    this.setConfigLimitBottom = function (notUse, newValue) {\r\n        self.config.limitBottom = parseFloat(newValue)\r\n    }\r\n    this.setConfigLeft = function (notUse, newValue) {\r\n        self.config.left = parseFloat(newValue);\r\n    }\r\n    this.getConfigRight = function () {\r\n        self.config = self.config || {};\r\n        return isNaN(self.config.right) ? \"[empty]\" : wiApi.bestNumberFormat(self.config.right, 3);\r\n    }\r\n    this.setConfigRight = function (notUse, newValue) {\r\n        self.config.right = parseFloat(newValue);\r\n    }\r\n    this.getConfigDivisions = function () {\r\n        self.config = self.config || {};\r\n        return isNaN(self.config.divisions) ? \"[empty]\" : self.config.divisions;\r\n    }\r\n    this.setConfigDivisions = function (notUse, newValue) {\r\n        self.config.divisions = parseInt(newValue);\r\n    }\r\n    this.getConfigTitle = function () {\r\n        self.config = self.config || {};\r\n        return (self.config.title || \"\").length ? self.config.title : \"New Histogram\";\r\n    }\r\n    this.setConfigTitle = function (notUse, newValue) {\r\n        self.config.title = newValue;\r\n    }\r\n    this.getConfigXLabel = function () {\r\n        self.config = self.config || {};\r\n        return (self.config.xLabel || \"\").length ? self.config.xLabel : self.selectionValue;\r\n    }\r\n    this.setConfigXLabel = function (notUse, newValue) {\r\n        self.config.xLabel = newValue;\r\n    }\r\n    function clearDefaultConfig() {\r\n        self.defaultConfig = {};\r\n    }\r\n    function updateDefaultConfig() {\r\n        clearDefaultConfig();\r\n        let curve = getCurve(self.treeConfig[0], self.wellSpec[0]);\r\n        if (!curve) return;\r\n        let family = wiApi.getFamily(curve.idFamily);\r\n        if (!family) return;\r\n        wiApi.getListUnit({\r\n            idFamily: family.idFamily,\r\n            idCurve: curve.idCurve\r\n        }).then(res => {\r\n            self.xUnitList = res;\r\n            self.defaultConfig.left = isNaN(family.family_spec[0].minScale) ? 0 : family.family_spec[0].minScale;\r\n            self.defaultConfig.right = isNaN(family.family_spec[0].maxScale) ? 100 : family.family_spec[0].maxScale;\r\n            self.defaultConfig.loga = family.family_spec[0].displayType.toLowerCase() === 'logarithmic';\r\n            self.xUnitList = self.xUnitList.map(item => ({\r\n                data: { label: item.name },\r\n                properties: { name: item.name }\r\n            }))\r\n            self.defaultConfig.xUnit = family.family_spec[0].unit;\r\n            if (family.idFamily != self.config.idFamily) {\r\n                self.config.idFamily = family.idFamily;\r\n                // delete self.config.xUnit;\r\n                self.config.xUnit = curve.unit;\r\n                delete self.config.left;\r\n                delete self.config.right;\r\n            }\r\n        })\r\n    }\r\n    this.onUnitChange = function (selectedItemProps) {\r\n        let oldUnit = self.config.xUnit;\r\n        self.config.xUnit = (selectedItemProps || {}).name;\r\n        self.config.left = wiApi.convertUnit(self.getLeft(), oldUnit, self.config.xUnit).toFixed(4);\r\n        self.config.right = wiApi.convertUnit(self.getRight(), oldUnit, self.config.xUnit).toFixed(4);\r\n    }\r\n\r\n    this.histogramList = [];\r\n    let flattenHistogramList = [];\r\n    let listWellStats = [];\r\n    let listAllStats = [];\r\n    this.genHistogramList = async function () {\r\n        if (!self.isSettingChange) return;\r\n        self.isSettingChange = false;\r\n        let preLayers = self.histogramList.map(layer => layer.name);\r\n        //console.log(layer.name)\r\n        this.histogramList.length = 0;\r\n        let allHistogramList = []\r\n        listWellStats.length = 0;\r\n        listAllStats.length = 0;\r\n        _histogramGen = null;\r\n        wiLoading.show($element.find('.main')[0], self.silent);\r\n\r\n        let allZones = [];\r\n        let allDataArray = [];\r\n        let zoneBinsList = [];\r\n        try {\r\n            for (let i = 0; i < self.treeConfig.length; i++) {\r\n                let well = self.treeConfig[i];\r\n                let wellSpec = getWellSpec(well);\r\n                if (well._notUsed) {\r\n                    continue;\r\n                }\r\n                let curve = getCurve(well, self.wellSpec[i]);\r\n                if (!curve) {\r\n                    continue;\r\n                }\r\n                let datasetTop = self.wellSpec[i].datasetTop;\r\n                let datasetBottom = self.wellSpec[i].datasetBottom;\r\n                let datasetStep = self.wellSpec[i].datasetStep;\r\n                let dataset = well.datasets.find(ds => ds.idDataset === self.wellSpec[i].idDataset);\r\n\r\n                let zoneset = getZoneset(well, self.zonesetName);\r\n                zoneset = zoneset || genZonationAllZS(datasetTop, datasetBottom, utils.getWellColor(well));\r\n\r\n                let curveData = await wiApi.getCachedCurveDataPromise(curve.idCurve);\r\n                if (self.hasDiscriminator(well)) {\r\n                    let discriminatorCurve = await wiApi.evalDiscriminatorPromise(dataset, self.wellSpec[i].discriminator);\r\n                    curveData = curveData.filter((d, idx) => discriminatorCurve[idx]);\r\n                }\r\n                curveData = curveData\r\n                    .filter(d => _.isFinite(d.x))\r\n                    .map(d => ({\r\n                        ...d,\r\n                        depth: datasetStep > 0 ? (datasetTop + d.y * datasetStep) : d.y\r\n                    }));\r\n                let zones = zoneset.zones.filter(zone => {\r\n                    let z = self.zoneTree.find(z1 => {\r\n                        return z1.zone_template.name === zone.zone_template.name\r\n                    });\r\n                    return !z._notUsed;\r\n                }).sort((a, b) => a.startDepth - b.startDepth);\r\n                wiApi.indexZonesForCorrelation(zones);\r\n\r\n                if (self.getStackMode() === 'all') {\r\n                    allZones = [...allZones, ...zones];\r\n                }\r\n                let wellHistogramList = [];\r\n                let wellDataArray = [];\r\n                let layerIdx = 0;\r\n                for (let j = 0; j < zones.length; j++) {\r\n                    let zone = zones[j];\r\n                    if (self.ctrlParams && self.ctrlParams.length && !isCtrlParamsIncludeZone(zone, j)) continue;\r\n                    let dataArray = filterData(curveData, zone);\r\n                    let destUnit = self.config.xUnit || self.defaultConfig.xUnit;\r\n                    if (curve.unit != destUnit) {\r\n                        dataArray = dataArray.map(data => ({\r\n                            y: data.y,\r\n                            depth: data.depth,\r\n                            x: wiApi.convertUnit(data.x, curve.unit, self.config.xUnit || self.defaultConfig.xUnit)\r\n                        }))\r\n                    }\r\n                    dataArray.top = zone.startDepth;\r\n                    dataArray.bottom = zone.endDepth;\r\n                    if (self.getStackMode() === 'well') {\r\n                        wellDataArray = [...wellDataArray, ...dataArray];\r\n                    } else if (self.getStackMode() === 'all') {\r\n                        allDataArray = [...allDataArray, ...dataArray];\r\n                    }\r\n                    let bins = genBins(dataArray);\r\n                    bins.color = self.getColor(zone, well, layerIdx);\r\n                    bins.name = `${well.name}.${zone.zone_template.name}(${j})`;\r\n\r\n                    bins.stats = {};\r\n                    switch (self.getStackMode()) {\r\n                        case 'none':\r\n                            bins.stats.curveInfo = `${curve.name}`;\r\n                            break;\r\n                        case 'all':\r\n                            bins.stats.curveInfo = `${well.name}.${curve.name}`;\r\n                            break;\r\n                    }\r\n                    bins.stats.conditionExpr = wellSpec.discriminator && wellSpec.discriminator.active ? wellSpec.discriminator.conditionExpr : undefined;\r\n                    bins.stats.top = zone.startDepth;\r\n                    bins.stats.bottom = zone.endDepth;\r\n                    let stats = setStats(dataArray.map(d => d.x));\r\n                    Object.assign(bins.stats, stats);\r\n                    if (self.getStackMode() === 'zone') {\r\n                        let zoneExisted = zoneBinsList.find(zbl => zbl.name.includes(zone.zone_template.name));\r\n                        if (!zoneExisted) {\r\n                            zoneExisted = [];\r\n                            zoneBinsList.push(zoneExisted);\r\n                            zoneExisted.name = `${zone.zone_template.name}`;\r\n                            if (self.getColorMode() === 'zone') {\r\n                                zoneExisted.color = self.getColor(zone, well);\r\n                            } else {\r\n                                zoneExisted.color = utils.getWellColor(well);\r\n                            }\r\n                        }\r\n                        zoneExisted.push(bins);\r\n                    }\r\n                    wellHistogramList.push(bins);\r\n                    layerIdx++;\r\n                }\r\n                if (self.getStackMode() === 'well') {\r\n                    let stats = setStats(wellDataArray.map(d => d.x));\r\n                    stats.top = d3.min(zones, z => z.startDepth);\r\n                    stats.bottom = d3.max(zones, z => z.endDepth);\r\n                    stats.curveInfo = `${curve.name}`;\r\n                    stats.conditionExpr = wellSpec.discriminator && wellSpec.discriminator.active ? wellSpec.discriminator.conditionExpr : undefined;\r\n                    listWellStats.push(stats);\r\n                    wellHistogramList.name = well.name;\r\n                    wellHistogramList.color = utils.getWellColor(well);\r\n                    allHistogramList.push(wellHistogramList);\r\n                } else allHistogramList.push(...wellHistogramList);\r\n            }\r\n            allHistogramList.name = 'All';\r\n            let max = 0;\r\n            let maxPercentage = 0;\r\n            let flatten = [];\r\n            switch (self.getStackMode()) {\r\n                case 'none':\r\n                    for (let bins of allHistogramList) {\r\n                        let maybeMax = d3.max(bins.map(b => b.length));\r\n                        max = (max > maybeMax) ? max : maybeMax;\r\n                        const maybeMaxPercentage = maybeMax / _.sum(bins.map(b => b.length));\r\n                        maxPercentage = (maxPercentage > maybeMaxPercentage) ? maxPercentage : maybeMaxPercentage;\r\n                    }\r\n                    flatten = allHistogramList;\r\n                    break;\r\n                case 'well':\r\n                    {\r\n                        for (let groupOfBins of allHistogramList) {\r\n                            let aggregate = aggregateHistogramList(groupOfBins);\r\n                            let maybeMax = d3.max(aggregate);\r\n                            max = (max > maybeMax) ? max : maybeMax;\r\n                            const maybeMaxPercentage = maybeMax / _.sum(aggregate);\r\n                            maxPercentage = (maxPercentage > maybeMaxPercentage) ? maxPercentage : maybeMaxPercentage;\r\n                            flatten = flatten.concat(groupOfBins);\r\n                        }\r\n                    }\r\n                    break;\r\n                case 'zone':\r\n                    {\r\n                        for (let groupOfBins of zoneBinsList) {\r\n                            let fullData = [];\r\n                            const bins = groupOfBins.flat();\r\n                            for (let i = 0; i < bins.length; i++) {\r\n                                fullData = fullData.concat(bins[i]);\r\n                            }\r\n                            groupOfBins.stats = setStats(fullData);\r\n                            groupOfBins.stats.top = _.min(groupOfBins.map(gob => gob.stats.top));\r\n                            groupOfBins.stats.bottom = _.max(groupOfBins.map(gob => gob.stats.bottom));\r\n                            let aggregate = aggregateHistogramList(groupOfBins);\r\n                            let maybeMax = d3.max(aggregate);\r\n                            max = (max > maybeMax) ? max : maybeMax;\r\n                            const maybeMaxPercentage = maybeMax / _.sum(aggregate);\r\n                            maxPercentage = (maxPercentage > maybeMaxPercentage) ? maxPercentage : maybeMaxPercentage;\r\n                        }\r\n                        allHistogramList = zoneBinsList;\r\n                        flatten = zoneBinsList;\r\n                    }\r\n                    break;\r\n                case 'all':\r\n                    {\r\n                        let aggregate = aggregateHistogramList(allHistogramList);\r\n                        max = d3.max(aggregate);\r\n                        const maybeMaxPercentage = max / _.sum(aggregate);\r\n                        maxPercentage = (maxPercentage > maybeMaxPercentage) ? maxPercentage : maybeMaxPercentage;\r\n                        flatten = allHistogramList;\r\n                        let stats = setStats(allDataArray.map(d => d.x));\r\n                        stats.top = d3.min(allZones, z => z.startDepth);\r\n                        stats.bottom = d3.max(allZones, z => z.endDepth);\r\n                        listAllStats.push(stats);\r\n                    }\r\n                    break;\r\n            }\r\n            $timeout(() => {\r\n                self.minY = 0;\r\n                self.maxY = max;\r\n                if (self.getHistogramMode() === 'percentage') {\r\n                    self.maxPercentage = maxPercentage * 100;\r\n                }\r\n                if (self.getStackMode() == 'all') {\r\n                    if (self.getDisplayMode() == 'line') {\r\n                        let arr = [];\r\n                        for (let i = 0; i < allHistogramList.length; i++) {\r\n                            const bins = allHistogramList[i];\r\n                            for (let j = 0; j < bins.length; j++) {\r\n                                const bin = bins[j];\r\n                                arr[j] = (arr[j] || []).concat(bin);\r\n                                arr[j].x0 = bin.x0;\r\n                                arr[j].x1 = bin.x1;\r\n                            }\r\n                        }\r\n                        arr.name = allHistogramList.name;\r\n                        self.histogramList = [arr];\r\n                    } else {\r\n                        self.histogramList = [allHistogramList];\r\n                    }\r\n                } else {\r\n                    self.histogramList = allHistogramList;\r\n                    if (self.getDisplayMode() == 'line') {\r\n                        if (self.getStackMode() == 'well') {\r\n                            let arr = [];\r\n                            allHistogramList.forEach((well, wellIdx) => {\r\n                                let bins = [];\r\n                                well.forEach((zone, zoneIdx) => {\r\n                                    zone.forEach((bin, binIdx) => {\r\n                                        bins[binIdx] = (bins[binIdx] || []).concat(bin);\r\n                                        bins[binIdx].x0 = bin.x0;\r\n                                        bins[binIdx].x1 = bin.x1;\r\n                                    })\r\n                                })\r\n                                bins.color = utils.getWellColor(well);\r\n                                bins.name = well.name;\r\n                                arr.push(bins);\r\n                            })\r\n                            self.histogramList = arr;\r\n                        } else if (self.getStackMode() == 'zone') {\r\n                            self.histogramList = allHistogramList.map(zone => {\r\n                                const bins = [];\r\n                                zone.forEach(gob => {\r\n                                    gob.forEach((bin, i) => {\r\n                                        bins[i] = (bins[i] || []).concat(bin);\r\n                                        bins[i].x0 = bin.x0;\r\n                                        bins[i].x1 = bin.x1;\r\n                                    })\r\n                                })\r\n                                bins.color = zone.color;\r\n                                bins.name = zone.name;\r\n                                return bins;\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n                flattenHistogramList = flatten;\r\n                self.setCumulativeData(self.histogramList);\r\n                self.setGaussianData(self.histogramList);\r\n            });\r\n        }\r\n        catch (e) {\r\n            console.error(e);\r\n        }\r\n        wiLoading.hide();\r\n    }\r\n    function isCtrlParamsIncludeZone(zone, layerIdx) {\r\n        let toReturn = self.ctrlParams.some((ctrlParam, ctrlParamIdx) => {\r\n            let zoneInfo = ctrlParam.zoneInfo;\r\n            return zone.zone_template.name === zoneInfo.zone_template.name.replace('All', 'ZonationAll') && layerIdx === (zoneInfo.__depthIndex || 0);\r\n        })\r\n        return toReturn;\r\n    }\r\n    function setStats(dataArray) {\r\n        let stats = {};\r\n        try {\r\n            stats.numPoints = dataArray.length;\r\n            stats.avg = d3.mean(dataArray);\r\n            stats.min = d3.min(dataArray);\r\n            stats.max = d3.max(dataArray);\r\n            stats.stddev = d3.deviation(dataArray);\r\n            stats.avgdev = calAverageDeviation(dataArray);\r\n            stats.var = d3.variance(dataArray);\r\n            stats.median = d3.median(dataArray);\r\n            stats.skew = dataArray.length >= 3 ? ss.sampleSkewness(dataArray) : undefined;\r\n            stats.kurtosis = dataArray.length >= 4 ? ss.sampleKurtosis(dataArray) : undefined;\r\n            stats.p10 = calPercentile(dataArray, 0.1);\r\n            stats.p50 = calPercentile(dataArray, 0.5);\r\n            stats.p90 = calPercentile(dataArray, 0.9);\r\n        }\r\n        catch (e) {\r\n            console.error(e);\r\n        }\r\n        return stats;\r\n    }\r\n    function calAverageDeviation(data) {\r\n        if (data.length < 1) return;\r\n        let mean = d3.mean(data);\r\n\r\n        return d3.mean(data, function (d) {\r\n            return Math.abs(d - mean)\r\n        }).toFixed(_DECIMAL_LEN);\r\n    }\r\n    function calPercentile(data, p) {\r\n        if (data.length < 1) return;\r\n        return d3.quantile(data.sort(function (a, b) {\r\n            return a - b;\r\n        }), p).toFixed(_DECIMAL_LEN);\r\n    }\r\n    function aggregateHistogramList(histogramList) {\r\n        let aggregate = [];\r\n        for (let bins of histogramList) {\r\n            for (let j = 0; j < bins.length; j++) {\r\n                aggregate[j] = ((aggregate[j] || 0) + bins[j].length);\r\n            }\r\n        }\r\n        return aggregate;\r\n    }\r\n    function genZonationAllZS(top, bottom, color = 'blue') {\r\n        return {\r\n            name: 'ZonationAll',\r\n            zones: [{\r\n                startDepth: top,\r\n                endDepth: bottom,\r\n                zone_template: {\r\n                    name: 'ZonationAll',\r\n                    background: color\r\n                }\r\n            }]\r\n        }\r\n    }\r\n    this.genBins = genBins;\r\n    function genBins(pointset) {\r\n        let divisions = self.getDivisions();\r\n        let loga = self.getLoga();\r\n        let histogramGen = getHistogramFn(divisions, loga);\r\n        return histogramGen(pointset.map(d => d.x));\r\n    }\r\n    var _histogramGen;\r\n    function getHistogramFn(divisions, loga) {\r\n        if (!_histogramGen) {\r\n            let left = self.getLeft();\r\n            let right = self.getRight();\r\n            let divisions = self.getDivisions();\r\n            let domain = d3.extent([left, right]);\r\n            let thresholds;\r\n            if (!loga) {\r\n                thresholds = d3.range(domain[0], domain[1], (domain[1] - domain[0]) / divisions);\r\n            }\r\n            else {\r\n                let logMinVal = Math.log10(domain[0] || 0.01);\r\n                let logMaxVal = Math.log10(domain[1] || 0.01);\r\n                thresholds = d3.range(logMinVal, logMaxVal, (logMaxVal - logMinVal) / divisions).map(v => Math.pow(10, v));\r\n            }\r\n            _histogramGen = d3.histogram().domain(domain).thresholds(thresholds);\r\n        }\r\n        return _histogramGen;\r\n    }\r\n    function filterData(curveData, zone) {\r\n        return curveData.filter(d => ((zone.startDepth - d.depth) * (zone.endDepth - d.depth) <= 0));\r\n    }\r\n    function getCorrectValue(val1, val2) {\r\n        return _.isFinite(+val1) ? +val1 : val2;\r\n    }\r\n    this.getLeft = () => {\r\n        if (self.config.flipHorizontal) {\r\n            return getCorrectValue(getCorrectValue(self.config.right, self.defaultConfig.right), 1);\r\n        }\r\n        return getCorrectValue(getCorrectValue(self.config.left, self.defaultConfig.left), 0);\r\n    }\r\n    this.getRight = () => {\r\n        if (self.config.flipHorizontal) {\r\n            return getCorrectValue(getCorrectValue(self.config.left, self.defaultConfig.left), 1);\r\n        }\r\n        return getCorrectValue(getCorrectValue(self.config.right, self.defaultConfig.right), 0);\r\n    }\r\n    this.getMaxY = () => {\r\n        return self.getHistogramMode() === 'percentage'\r\n            ? _.ceil(self.maxPercentage, -1)\r\n            : self.maxY > 1 ? _.ceil(self.maxY, -1 * self.maxY.toString().length + 1) : self.maxY;\r\n    }\r\n    this.getLoga = () => (self.config.loga === undefined ? self.defaultConfig.loga : self.config.loga)\r\n    this.getMajor = () => (isNaN(self.config.major) ? (self.defaultConfig.major || 5) : self.config.major)\r\n    this.getMinor = () => (isNaN(self.config.minor) ? (self.defaultConfig.minor || 1) : self.config.minor)\r\n    this.getNotUsedGaussian = () => { self.config.notUsedGaussian || false };\r\n    this.getDivisions = () => (self.config.divisions || self.defaultConfig.divisions || 35)\r\n    this.getColorMode = () => (self.config.colorMode || self.defaultConfig.colorMode || 'zone')\r\n    this.getColor = (zone, well, layerIdx) => {\r\n        let cMode = self.getColorMode();\r\n        switch (cMode) {\r\n            case 'zone':\r\n                return zone.zone_template.background;\r\n            case 'index':\r\n                if (!layerIdx) {\r\n                    return zone.zone_template.background;\r\n                }\r\n                let palette = self.palTable.RandomColor || self.palTable.HFU;\r\n                return utils.palette2RGB(palette[layerIdx % palette.length], false);\r\n            default:\r\n                return cMode === 'well' ? utils.getWellColor(well) : 'blue';\r\n        }\r\n    }\r\n    this.getDisplayMode = () => (self.config.displayMode || self.defaultConfig.displayMode || 'bar')\r\n    this.getStackMode = () => {\r\n        if (self.noStack) return 'none';\r\n        //return self.getDisplayMode() === 'bar'?(self.config.stackMode||self.defaultConfig.stackMode||'none'):'none'\r\n        return self.config.stackMode || self.defaultConfig.stackMode || 'none'\r\n    }\r\n    this.getBinGap = () => (self.config.binGap || self.defaultConfig.binGap)\r\n    this.getBinX = (bin) => ((bin.x0 + bin.x1) / 2)\r\n    this.getBinY = (bin) => (bin.length)\r\n    this.setConfigMajor = function (notUse, newValue) {\r\n        self.config.major = parseFloat(newValue);\r\n    }\r\n    this.setConfigMinor = function (notUse, newValue) {\r\n        self.config.minor = parseFloat(newValue);\r\n    }\r\n\r\n    this.colorFn = function (bin, bins) {\r\n        if (self.getStackMode() === 'none');\r\n        if (!bins) return;\r\n        return bins.color;\r\n    }\r\n\r\n    this.save = function () {\r\n        if (!self.idHistogram) {\r\n            wiDialog.promptDialog({\r\n                title: 'New Histogram',\r\n                inputName: 'Histogram Name',\r\n                input: self.getConfigTitle(),\r\n            }, function (name) {\r\n                let type = 'HISTOGRAM';\r\n                let content = {\r\n                    wellSpec: self.wellSpec,\r\n                    zonesetName: self.zonesetName,\r\n                    selectionType: self.selectionType,\r\n                    selectionValue: self.selectionValue,\r\n                    config: self.config\r\n                }\r\n                wiApi.newAssetPromise(self.idProject, name, type, content).then(res => {\r\n                    self.idHistogram = res.idParameterSet;\r\n                    self.onSave && self.onSave(res);\r\n                    __toastr && __toastr.success('Successfully saved Histogram ' + name)\r\n                    self.afterNewPlotCreated && self.afterNewPlotCreated(res);\r\n                }).catch(e => {\r\n                    let msg = `Asset ${name} has been existed`;\r\n                    if (__toastr) __toastr.warning(msg);\r\n                    self.save();\r\n                })\r\n            });\r\n        }\r\n        else {\r\n            let type = 'HISTOGRAM';\r\n            let content = {\r\n                idParameterSet: self.idHistogram,\r\n                wellSpec: self.wellSpec,\r\n                zonesetName: self.zonesetName,\r\n                selectionType: self.selectionType,\r\n                selectionValue: self.selectionValue,\r\n                config: self.config\r\n            }\r\n            wiApi.editAssetPromise(self.idHistogram, content).then(res => {\r\n                console.log(res);\r\n                __toastr && __toastr.success('Successfully saved Histogram ' + res.name)\r\n                self.afterNewPlotCreated && self.afterNewPlotCreated(res);\r\n            }).catch(e => {\r\n                let msg = `Asset ${name} has been existed`;\r\n                if (__toastr) __toastr.warning(msg);\r\n                self.save();\r\n            });\r\n        }\r\n    }\r\n    this.saveAs = function () {\r\n        console.log(\"saveAs\");\r\n        wiDialog.promptDialog({\r\n            title: 'Save As Histogram',\r\n            inputName: 'Histogram Name',\r\n            input: '',\r\n        }, function (name) {\r\n            let type = 'HISTOGRAM';\r\n            let content = {\r\n                wellSpec: self.wellSpec,\r\n                zonesetName: self.zonesetName,\r\n                selectionType: self.selectionType,\r\n                selectionValue: self.selectionValue,\r\n                config: self.config\r\n            }\r\n            wiApi.newAssetPromise(self.idProject, name, type, content).then(res => {\r\n                self.onSaveAs && self.onSaveAs(res);\r\n                __toastr && __toastr.success('Successfully saved Histogram ' + name)\r\n                self.afterNewPlotCreated && self.afterNewPlotCreated(res);\r\n            })\r\n                .catch(e => {\r\n                    let msg = `Asset ${name} has been existed`;\r\n                    if (__toastr) __toastr.warning(msg);\r\n                    self.saveAs();\r\n                })\r\n        });\r\n    }\r\n\r\n    let _zoneNames = []\r\n    self.getZoneNames = function () {\r\n        _zoneNames.length = 0;\r\n        Object.assign(_zoneNames, self.histogramList.map(bins => bins.name));\r\n        return _zoneNames;\r\n    }\r\n    this.isLayerUsed = function ($index) {\r\n        return !self.histogramList[$index]._notUsed;\r\n    }\r\n    self.getStatsRowIcons = function (rowIdx) {\r\n        return ['rectangle'];\r\n    }\r\n    self.getStatsIconStyle = function (rowIdx) {\r\n        return {\r\n            'background-color': self.histogramList[rowIdx].color\r\n        }\r\n    }\r\n    self.statsValue = function ([row, col]) {\r\n        let statsArray = [];\r\n        switch (self.getStackMode()) {\r\n            case 'none':\r\n                statsArray = flattenHistogramList.map(e => e.stats);\r\n                break;\r\n            case 'well':\r\n                statsArray = [...listWellStats];\r\n                break;\r\n            case 'zone':\r\n                statsArray = flattenHistogramList.map(e => e.stats);\r\n                break;\r\n            case 'all':\r\n                statsArray = [...listAllStats];\r\n                //statsArray = flattenHistogramList.map(e => e.stats);\r\n                break;\r\n            default:\r\n                statsArray = [];\r\n        }\r\n\r\n        try {\r\n            switch (_headers[col]) {\r\n                case 'X-Axis':\r\n                    return statsArray[row].curveInfo || 'N/A';\r\n                case 'Filter':\r\n                    return statsArray[row].conditionExpr || 'N/A';\r\n                case 'Top':\r\n                    return isNaN(statsArray[row].top) ? 'N/A' : wiApi.bestNumberFormat(statsArray[row].top, 4);\r\n                case 'Bottom':\r\n                    return isNaN(statsArray[row].bottom) ? 'N/A' : wiApi.bestNumberFormat(statsArray[row].bottom, 4);\r\n                case 'Points':\r\n                    return isNaN(statsArray[row].numPoints) ? 'N/A' : statsArray[row].numPoints;\r\n                case 'Avg':\r\n                    return isNaN(statsArray[row].avg) ? 'N/A' : wiApi.bestNumberFormat(statsArray[row].avg, 4);\r\n                case 'Min':\r\n                    return isNaN(statsArray[row].min) ? 'N/A' : wiApi.bestNumberFormat(statsArray[row].min, 4);\r\n                case 'Max':\r\n                    return isNaN(statsArray[row].max) ? 'N/A' : wiApi.bestNumberFormat(statsArray[row].max, 4);\r\n                case 'Avgdev':\r\n                    return isNaN(statsArray[row].avgdev) ? 'N/A' : wiApi.bestNumberFormat(statsArray[row].avgdev, 4);\r\n                case 'Stddev':\r\n                    return isNaN(statsArray[row].stddev) ? 'N/A' : wiApi.bestNumberFormat(statsArray[row].stddev, 4);\r\n                case 'Var':\r\n                    return isNaN(statsArray[row].var) ? 'N/A' : wiApi.bestNumberFormat(statsArray[row].var, 4);\r\n                case 'Skew':\r\n                    return isNaN(statsArray[row].skew) ? 'N/A' : wiApi.bestNumberFormat(statsArray[row].skew, 4);\r\n                case 'Kurtosis':\r\n                    return isNaN(statsArray[row].kurtosis) ? 'N/A' : wiApi.bestNumberFormat(statsArray[row].kurtosis, 4);\r\n                case 'Median':\r\n                    return isNaN(statsArray[row].median) ? 'N/A' : wiApi.bestNumberFormat(statsArray[row].median, 4);\r\n                case 'P10':\r\n                    return isNaN(statsArray[row].p10) ? 'N/A' : wiApi.bestNumberFormat(statsArray[row].p10, 4);\r\n                case 'P50':\r\n                    return isNaN(statsArray[row].p50) ? 'N/A' : wiApi.bestNumberFormat(statsArray[row].p50, 4);\r\n                case 'P90':\r\n                    return isNaN(statsArray[row].p90) ? 'N/A' : wiApi.bestNumberFormat(statsArray[row].p90, 4);\r\n                default:\r\n                    return \"this default\";\r\n            }\r\n        } catch {\r\n            return 'N/A';\r\n        }\r\n    }\r\n    let _headers = [];\r\n    self.getHeaders = function () {\r\n        _headers.length = 0;\r\n        Object.assign(_headers, self.statisticHeaders.filter((item, idx) => self.statisticHeaderMasks[idx]));\r\n        return _headers;\r\n    }\r\n    this.hideSelectedGaussian = function () {\r\n        if (!self.selectedGaussian) return;\r\n        self.selectedGaussian.forEach(gaussian => gaussian._useGssn = false);\r\n        if (self.config.notUsedGaussian) {\r\n            self.setLogNormalDFn(self.histogramList);\r\n        } else {\r\n            self.setGaussianData(self.histogramList);\r\n        }\r\n        self.setCumulativeData(self.histogramList);\r\n    }\r\n    this.showSelectedGaussian = function () {\r\n        if (!self.selectedGaussian) return;\r\n        self.selectedGaussian.forEach(gaussian => gaussian._useGssn = true);\r\n        if (self.config.notUsedGaussian) {\r\n            self.setLogNormalDFn(self.histogramList);\r\n        } else {\r\n            self.setGaussianData(self.histogramList);\r\n        }\r\n        self.setCumulativeData(self.histogramList);\r\n    }\r\n    this.hideAllGaussian = function () {\r\n        self.histogramList.forEach(gaussian => gaussian._useGssn = false);\r\n        if (self.config.notUsedGaussian) {\r\n            self.setLogNormalDFn(self.histogramList);\r\n        } else {\r\n            self.setGaussianData(self.histogramList);\r\n        }\r\n        self.setCumulativeData(self.histogramList);\r\n    }\r\n    this.showAllGaussian = function () {\r\n        self.histogramList.forEach(gaussian => gaussian._useGssn = true);\r\n        if (self.config.notUsedGaussian) {\r\n            self.setLogNormalDFn(self.histogramList);\r\n        } else {\r\n            self.setGaussianData(self.histogramList);\r\n        }\r\n        self.setCumulativeData(self.histogramList);\r\n    }\r\n    this.hideSelectedLayer = function () {\r\n        if (!self.selectedLayers) return;\r\n        self.selectedLayers.forEach(layer => {\r\n            layer._notUsed = true;\r\n            toggleCtrlParams(layer, 'layer');\r\n        });\r\n    }\r\n    this.showSelectedLayer = function () {\r\n        if (!self.selectedLayers) return;\r\n        self.selectedLayers.forEach(layer => {\r\n            layer._notUsed = false;\r\n            toggleCtrlParams(layer, 'layer');\r\n        });\r\n        $timeout(() => { });\r\n    }\r\n    this.hideAllLayer = function () {\r\n        self.histogramList.forEach(bins => {\r\n            bins._notUsed = true;\r\n            toggleCtrlParams(bins, 'layer');\r\n        });\r\n        $timeout(() => { });\r\n    }\r\n    this.showAllLayer = function () {\r\n        self.histogramList.forEach(bins => {\r\n            bins._notUsed = false;\r\n            toggleCtrlParams(bins, 'layer');\r\n        });\r\n        $timeout(() => { });\r\n    }\r\n    this.hideAllCtrlParams = function () {\r\n        $timeout(() => {\r\n            self.ctrlParamsMask = self.ctrlParamsMask.map(m => false);\r\n        });\r\n    }\r\n    this.showAllCtrlParams = function () {\r\n        //self.ctrlParamsMask.forEach(m => m = true);\r\n        $timeout(() => {\r\n            self.ctrlParamsMask = self.ctrlParamsMask.map(m => true);\r\n        });\r\n    }\r\n    this.hideSelectedCtrlParams = function () {\r\n        if (!self.selectedCtrlParams) return;\r\n        self.selectedCtrlParams.forEach(cp => {\r\n            cp = cp.data;\r\n            let ctrlParamIdx = self.ctrlParams.findIndex(cpI => cp.$res.name === cpI.$res.name && cp.zoneInfo.idZone == cpI.zoneInfo.idZone);\r\n            if (ctrlParamIdx >= 0) {\r\n                self.ctrlParamsMask[ctrlParamIdx] = false;\r\n            }\r\n        });\r\n    }\r\n    this.showSelectedCtrlParams = function () {\r\n        if (!self.selectedCtrlParams) return;\r\n        self.selectedCtrlParams.forEach(cp => {\r\n            cp = cp.data;\r\n            let ctrlParamIdx = self.ctrlParams.findIndex(cpI => cp.$res.name === cpI.$res.name && cp.zoneInfo.idZone == cpI.zoneInfo.idZone);\r\n            if (ctrlParamIdx >= 0) {\r\n                self.ctrlParamsMask[ctrlParamIdx] = true;\r\n            }\r\n        });\r\n        $timeout(() => { });\r\n    }\r\n\r\n    //--------------\r\n\r\n    this.hideSelectedZone = function () {\r\n        if (!self.selectedZones) return;\r\n        self.selectedZones.forEach(zone => {\r\n            zone._notUsed = true;\r\n            let zoneTree = self.zoneTree.filter(zoneI => zoneI.zone_template.name == zone.name);\r\n            zoneTree.forEach(zoneI => {\r\n                zoneI._notUsed = true;\r\n            })\r\n        });\r\n    }\r\n    this.showSelectedZone = function () {\r\n        if (!self.selectedZones) return;\r\n        self.selectedZones.forEach(zone => {\r\n            zone._notUsed = false;\r\n            let zoneTree = self.zoneTree.filter(zoneI => zoneI.zone_template.name == zone.name);\r\n            zoneTree.forEach(zoneI => {\r\n                zoneI._notUsed = false;\r\n            })\r\n        });\r\n        $timeout(() => { });\r\n    }\r\n    this.hideAllZone = function () {\r\n        self.zoneTreeUniq.forEach(zone => {\r\n            zone._notUsed = true;\r\n        });\r\n        self.zoneTree.forEach(zone => zone._notUsed = true);\r\n        $timeout(() => { });\r\n    }\r\n    this.showAllZone = function () {\r\n        self.isSettingChange = true;\r\n        self.zoneTreeUniq.forEach(zone => {\r\n            zone._notUsed = false;\r\n        });\r\n        self.zoneTree.forEach(zone => zone._notUsed = false);\r\n        $timeout(() => { });\r\n    }\r\n    this.onDrop = function (event, helper, myData) {\r\n        let idWells = helper.data('idWells');\r\n        if (idWells && idWells.length) {\r\n            $timeout(() => {\r\n                async.eachSeries(idWells, (idWell, next) => {\r\n                    wiApi.getCachedWellPromise(idWell)\r\n                        .then(well => {\r\n                            let zonesets = well.zone_sets;\r\n                            let hasZonesetName = self.zonesetName != 'ZonationAll' ? zonesets.some(zs => zs.name == self.zonesetName) : true;\r\n                            if (hasZonesetName) {\r\n                                let _idx = _.max(self.wellSpec.filter(ws => ws.idWell === idWell).map(ws => ws._idx));\r\n                                _idx = (_idx >= 0 ? _idx : -1) + 1;\r\n                                self.wellSpec.push({ idWell, _idx });\r\n                                let wellTree = getTree(self.wellSpec[self.wellSpec.length - 1]);\r\n                                let curve = getCurve({ ...well, _idx });\r\n                                if (!curve) {\r\n                                    let msg = `Well ${well.name} does not meet requirement`;\r\n                                    if (__toastr) __toastr.warning(msg);\r\n                                    console.warn(msg);\r\n                                }\r\n                            } else {\r\n                                let msg = `Well ${well.name} does not meet input Zone ${self.zonesetName}`;\r\n                                if (__toastr) __toastr.warning(msg);\r\n                                console.warn(msg);\r\n                            }\r\n                            next(null);\r\n                        })\r\n                        .catch(e => {\r\n                            console.error(e);\r\n                            next(e);\r\n                        })\r\n                }, err => {\r\n                    if (err) {\r\n                        console.error(err);\r\n                    }\r\n                })\r\n            })\r\n        }\r\n    }\r\n    this.toggleWell = function (well) {\r\n        self.isSettingChange = true;\r\n        well._notUsed = !well._notUsed;\r\n        toggleCtrlParams(well, 'well');\r\n    }\r\n    this.removeWell = function (well) {\r\n        let index = self.wellSpec.findIndex(wsp => wsp.idWell === well.idWell && wsp._idx === well._idx);\r\n        if (index >= 0) {\r\n            $timeout(() => {\r\n                self.wellSpec.splice(index, 1);\r\n                let wellTreeIdx = self.treeConfig.findIndex(wTI => wTI.idWell === well.idWell && wTI._idx === well._idx);\r\n                self.treeConfig.splice(wellTreeIdx, 1);\r\n            })\r\n        }\r\n        //getTrees();\r\n    }\r\n\r\n    this.cmltLineData = [];\r\n    function getLayerUseGssn() {\r\n        let layers = self.histogramList.filter(layer => layer._useGssn);\r\n        return layers.length;\r\n    }\r\n    this.condition4CumulativeLine = function () {\r\n        return getLayerUseGssn() && self.cmltLineData.length && !self.config.notShowCumulative;\r\n    }\r\n    this.setCumulativeData = function (layers) {\r\n        self.cmltLineData.length = 0;\r\n        if (!layers.length) return;\r\n        layers = layers.filter(l => l._useGssn);\r\n        if (self.getStackMode() === 'well' ||\r\n            self.getStackMode() === 'zone' ||\r\n            self.getStackMode() === 'all') layers = layers.flat();\r\n        let newData = [];\r\n        for (let i = 0; i < self.getDivisions(); i++) {\r\n            let elem = [];\r\n            for (let j = 0; j < layers.length; j++) {\r\n                elem = [...elem, ...layers[j][i]];\r\n                elem.x0 = layers[j][i].x0;\r\n                elem.x1 = layers[j][i].x1;\r\n            }\r\n            newData.push(elem);\r\n        }\r\n        newData.totalPoint = _.sum(newData.map(d => d.length));\r\n        let cumulativeVal = 0;\r\n        newData.forEach(l => {\r\n            cumulativeVal += l.length;\r\n            self.cmltLineData.push({\r\n                x: (l.x0 + l.x1) / 2,\r\n                y: (cumulativeVal / newData.totalPoint) * self.maxY\r\n            });\r\n            self.cmltLineData.color = self.cmltLineData.color || colorGenerator();\r\n            self.cmltLineData.width = self.cmltLineData.width || 2;\r\n        })\r\n    }\r\n    this.condition4GaussianLine = function () {\r\n        return getLayerUseGssn() && Object.keys(self.gaussianLine || {}).length && !self.config.notUsedGaussian;\r\n    }\r\n    this.setGaussianData = function (layers) {\r\n        self.gaussianLine = self.gaussianLine || {};\r\n        if (!layers.length) {\r\n            self.gaussianLine._notUsed = true;\r\n            return;\r\n        }\r\n        layers = layers.filter(l => l._useGssn);\r\n        self.gaussianLine._notUsed = false;\r\n        if (self.getStackMode() === 'well' ||\r\n            self.getStackMode() === 'zone' ||\r\n            self.getStackMode() === 'all') layers = layers.flat();\r\n        let fullData = [];\r\n        for (let lIdx = 0; lIdx < layers.length; lIdx++) {\r\n            for (let bIdx = 0; bIdx < layers[lIdx].length; bIdx++) {\r\n                fullData = fullData.concat(layers[lIdx][bIdx]);\r\n            }\r\n        }\r\n        let mean = d3.mean(fullData);\r\n        let sigma = d3.deviation(fullData);\r\n        self.gaussianLine = {\r\n            ...self.gaussianLine,\r\n            mean, sigma,\r\n            width: 2,\r\n        }\r\n        self.gaussianLine.fn = (function (x) {\r\n            let mean = this.mean;\r\n            let sigma = this.sigma;\r\n            let gaussianConstant = 1 / Math.sqrt(2 * Math.PI);\r\n            x = (x - mean) / sigma;\r\n            return gaussianConstant * Math.exp(-.5 * x * x) / sigma;\r\n        }).bind(self.gaussianLine);\r\n        self.gaussianLine.color = self.gaussianLine.color || colorGenerator();\r\n        self.gaussianLine.sigmaLines = [\r\n            { color: self.gaussianLine.color, value: mean - sigma },\r\n            { color: self.gaussianLine.color, value: mean + sigma }\r\n        ]\r\n    }\r\n    this.condition4LogNormalD = function () {\r\n        return getLayerUseGssn() && Object.keys(self.logNormalDLine || {}).length && self.config.notUsedGaussian;\r\n    }\r\n    this.setLogNormalDFn = function (layers) {\r\n        self.logNormalDLine = self.logNormalDLine || {};\r\n        if (!layers.length) {\r\n            self.logNormalDLine._notUsed = true;\r\n            return;\r\n        }\r\n        layers = layers.filter(l => l._useGssn);\r\n        self.logNormalDLine._notUsed = false;\r\n        if (self.getStackMode() === 'well' ||\r\n            self.getStackMode() === 'zone' ||\r\n            self.getStackMode() === 'all') layers = layers.flat();\r\n        let fullData = [];\r\n        for (let lIdx = 0; lIdx < layers.length; lIdx++) {\r\n            for (let bIdx = 0; bIdx < layers[lIdx].length; bIdx++) {\r\n                fullData = fullData.concat(layers[lIdx][bIdx]);\r\n            }\r\n        }\r\n        let mean = d3.mean(fullData);\r\n        let sigma = d3.deviation(fullData);\r\n        self.logNormalDLine = {\r\n            ...self.logNormalDLine,\r\n            mean, sigma,\r\n            width: 2\r\n        }\r\n        self.logNormalDLine.fn = (function (x) {\r\n            if (x <= 0) return 0;\r\n            let mean = this.mean,\r\n                sigma = this.sigma,\r\n                s2 = Math.pow(sigma, 2),\r\n                A = 1 / (Math.sqrt(2 * Math.PI)),\r\n                B = -1 / (2 * s2);\r\n            return (1 / (x * sigma)) * A * Math.exp(B * Math.pow(Math.log(x) - mean, 2));\r\n        }).bind(self.logNormalDLine);\r\n        self.logNormalDLine.color = self.logNormalDLine.color || colorGenerator();\r\n    }\r\n    this.getCumulativeX = cmlt => {\r\n        return cmlt.x;\r\n    };\r\n    this.getCumulativeY = cmlt => {\r\n        return cmlt.y;\r\n    }\r\n\r\n    function colorGenerator() {\r\n        let rand = function () {\r\n            return Math.floor(Math.random() * 255);\r\n        }\r\n        return \"rgb(\" + rand() + \",\" + rand() + \",\" + rand() + \")\";\r\n    }\r\n\r\n    this.getMarkerGaussianVal = (marker, idx) => (marker.value)\r\n    this.setMarkerGaussianVal = (marker, idx, newVal) => { marker.value = newVal; }\r\n    this.markerGaussianStyle = (marker, idx) => ({ stroke: marker.color, 'stroke-width': '2', fill: 'none' })\r\n    /*\r\n        this.getMarkerVal = (marker, idx) => (marker.value)\r\n        this.setMarkerVal = (marker, idx, newVal) => {marker.value = newVal;}\r\n        this.markerStyle = (marker, idx) => ({stroke:marker.color,'stroke-width':'2', fill:'none'})\r\n        this.markerName = (marker, idx) => (marker.name)\r\n        */\r\n    this.resetHistogramList = resetHistograms;\r\n    function resetHistograms() {\r\n        self.histogramList = [];\r\n    }\r\n    this.changeHistogramMode = changeHistogramMode;\r\n    function changeHistogramMode(option) {\r\n        self.config.histogramMode = option;\r\n    }\r\n    this.getHistogramMode = getHistogramMode;\r\n    function getHistogramMode() {\r\n        return self.config.histogramMode || 'frequency';\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./multi-well-histogram/index.js?");

/***/ }),

/***/ "./multi-well-histogram/style.less":
/*!*****************************************!*\
  !*** ./multi-well-histogram/style.less ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\nvar content = __webpack_require__(/*! !../../node_modules/css-loader/dist/cjs.js!../../node_modules/less-loader/dist/cjs.js!./style.less */ \"../node_modules/css-loader/dist/cjs.js!../node_modules/less-loader/dist/cjs.js!./multi-well-histogram/style.less\");\n\nif(typeof content === 'string') content = [[module.i, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = __webpack_require__(/*! ../../node_modules/style-loader/lib/addStyles.js */ \"../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(false) {}\n\n//# sourceURL=webpack:///./multi-well-histogram/style.less?");

/***/ }),

/***/ "./multi-well-histogram/template.html":
/*!********************************************!*\
  !*** ./multi-well-histogram/template.html ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = \"<header ng-if=\\\"self.dragHeader\\\">{{ 'Histogram' }}\\n</header>\\n<div class=\\\"main\\\">\\n    <div style=\\\"display:flex; width: 100%; height: 100%; flex: 1;\\\">\\n        <div class=\\\"main-body\\\">\\n            \" + __webpack_require__(/*! ./fragments/main-area.html */ \"./multi-well-histogram/fragments/main-area.html\") + \"\\n        </div>\\n        <wi-droppable on-drop=\\\"self.onDrop\\\" container-style=\\\"{display:'flex',flex: 1, position: 'relative', height: '100%'}\\\">\\n            <div style=\\\" height: 100%; right: 0; border-left: 1px solid #ccc;\\\">\\n                \" + __webpack_require__(/*! ./fragments/side-bar.html */ \"./multi-well-histogram/fragments/side-bar.html\") + \"\\n            </div>\\n        </wi-droppable>\\n    </div>\\n</div>\\n\";\n\n//# sourceURL=webpack:///./multi-well-histogram/template.html?");

/***/ }),

/***/ "./utils.js":
/*!******************!*\
  !*** ./utils.js ***!
  \******************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports.convertToCSV = convertToCSV;\r\nfunction convertToCSV(objArray) {\r\n    let array = typeof objArray != 'object' ? JSON.parse(objArray) : objArray;\r\n    let str = '';\r\n\r\n    for (var i = 0; i < array.length; i++) {\r\n        let line = '';\r\n        for (let index in array[i]) {\r\n            if (line != '') line += ','\r\n\r\n            line += array[i][index];\r\n        }\r\n        str += line + '\\r\\n';\r\n    }\r\n    return str;\r\n}\r\n\r\nexports.exportCSVFile = function(headers, items, fileTitle) {\r\n    if (headers) {\r\n        items.unshift(headers);\r\n    }\r\n    let jsonObject = JSON.stringify(items);\r\n    let csv = convertToCSV(jsonObject);\r\n    let exportedFilenmae = fileTitle + '.csv' || false;\r\n    let blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\r\n    if (navigator.msSaveBlob) { // IE 10+\r\n        navigator.msSaveBlob(blob, exportedFilenmae);\r\n    } else {\r\n        let a = document.createElement(\"a\");\r\n        document.body.appendChild(a);\r\n        a.style = \"display: none\";\r\n        url = window.URL.createObjectURL(blob);\r\n        a.href = url;\r\n        a.download = exportedFilenmae;\r\n        a.click();\r\n        window.URL.revokeObjectURL(url);\r\n    }\r\n}\r\n\r\nexports.getWellColor = getWellColor;\r\nfunction getWellColor(well) {\r\n    let color = well.color;\r\n    if (isArray(color)) {\r\n        let colorArr = toArray(color);\r\n        return colorArr[(well._idx || 0) % colorArr.length];\r\n    }\r\n    return well.color;\r\n}\r\nexports.toArray = toArray;\r\nfunction toArray(value) {\r\n    if (Array.isArray(value))\r\n        return value;\r\n    else if (typeof(value) == 'string') {\r\n        try {\r\n            return JSON.parse(value);\r\n        } catch(e) {\r\n            return [];\r\n        }\r\n    } else\r\n        return [];\r\n}\r\nexports.isArray = isArray;\r\nfunction isArray(value) {\r\n    if (typeof(value) == 'string') {\r\n        try {\r\n            const json = JSON.parse(value);\r\n            if (Array.isArray(json))\r\n                return true;\r\n            else\r\n                return false;\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    } else if (Array.isArray(value)) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nexports.palette2RGB = palette2RGB;\r\nfunction palette2RGB(palette, semiTransparent) {\r\n    if (!palette || !Object.keys(palette).length) return 'transparent';\r\n    return `rgb(${palette.red},${palette.green},${palette.blue},${semiTransparent ? palette.alpha / 2 : 1})`\r\n}\r\n\n\n//# sourceURL=webpack:///./utils.js?");

/***/ }),

/***/ "./vendor/js/wi-regression.js":
/*!************************************!*\
  !*** ./vendor/js/wi-regression.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("const DEFAULT_OPTIONS = { order: 2, precision: 2, period: null };\r\n\r\n/**\r\n* Determine the coefficient of determination (r^2) of a fit from the observations\r\n* and predictions.\r\n*\r\n* @param {Array<Array<number>>} data - Pairs of observed x-y values\r\n* @param {Array<Array<number>>} results - Pairs of observed predicted x-y values\r\n*\r\n* @return {number} - The r^2 value, or NaN if one cannot be calculated.\r\n*/\r\nfunction determinationCoefficient(data, results) {\r\n  const predictions = [];\r\n  const observations = [];\r\n\r\n  data.forEach((d, i) => {\r\n    if (d[1] !== null) {\r\n      observations.push(d);\r\n      predictions.push(results[i]);\r\n    }\r\n  });\r\n\r\n  const sum = observations.reduce((a, observation) => a + observation[1], 0);\r\n  const mean = sum / observations.length;\r\n\r\n  const ssyy = observations.reduce((a, observation) => {\r\n    const difference = observation[1] - mean;\r\n    return a + (difference * difference);\r\n  }, 0);\r\n\r\n  const sse = observations.reduce((accum, observation, index) => {\r\n    const prediction = predictions[index];\r\n    const residual = observation[1] - prediction[1];\r\n    return accum + (residual * residual);\r\n  }, 0);\r\n\r\n  return 1 - (sse / ssyy);\r\n}\r\n\r\n/**\r\n* Determine the solution of a system of linear equations A * x = b using\r\n* Gaussian elimination.\r\n*\r\n* @param {Array<Array<number>>} input - A 2-d matrix of data in row-major form [ A | b ]\r\n* @param {number} order - How many degrees to solve for\r\n*\r\n* @return {Array<number>} - Vector of normalized solution coefficients matrix (x)\r\n*/\r\nfunction gaussianElimination(input, order) {\r\n  const matrix = input;\r\n  const n = input.length - 1;\r\n  const coefficients = [order];\r\n\r\n  for (let i = 0; i < n; i++) {\r\n    let maxrow = i;\r\n    for (let j = i + 1; j < n; j++) {\r\n      if (Math.abs(matrix[i][j]) > Math.abs(matrix[i][maxrow])) {\r\n        maxrow = j;\r\n      }\r\n    }\r\n\r\n    for (let k = i; k < n + 1; k++) {\r\n      const tmp = matrix[k][i];\r\n      matrix[k][i] = matrix[k][maxrow];\r\n      matrix[k][maxrow] = tmp;\r\n    }\r\n\r\n    for (let j = i + 1; j < n; j++) {\r\n      for (let k = n; k >= i; k--) {\r\n        matrix[k][j] -= (matrix[k][i] * matrix[i][j]) / matrix[i][i];\r\n      }\r\n    }\r\n  }\r\n\r\n  for (let j = n - 1; j >= 0; j--) {\r\n    let total = 0;\r\n    for (let k = j + 1; k < n; k++) {\r\n      total += matrix[k][j] * coefficients[k];\r\n    }\r\n\r\n    coefficients[j] = (matrix[n][j] - total) / matrix[j][j];\r\n  }\r\n\r\n  return coefficients;\r\n}\r\n\r\n/**\r\n* Round a number to a precision, specificed in number of decimal places\r\n*\r\n* @param {number} number - The number to round\r\n* @param {number} precision - The number of decimal places to round to:\r\n*                             > 0 means decimals, < 0 means powers of 10\r\n*\r\n*\r\n* @return {numbr} - The number, rounded\r\n*/\r\nfunction round(number, precision) {\r\n  const factor = 10 ** precision;\r\n  return Math.round(number * factor) / factor;\r\n}\r\n\r\nfunction sumReducer(sum, curr) {\r\n  return sum + curr;\r\n}\r\n\r\nfunction getLinearArgs(data, options) {\r\n  const x0 = options.fitX;\r\n  const y0 = options.fitY;\r\n\r\n  const xData = data.map(d => d[0]);\r\n  const yData = data.map(d => d[1]);\r\n\r\n  const meanX = Number.isFinite(x0) ? x0 : ((xData.reduce(sumReducer, 0) * 1.0) / xData.length);\r\n  const meanY = Number.isFinite(y0) ? y0 : ((yData.reduce(sumReducer, 0) * 1.0) / yData.length);\r\n\r\n  const rise = xData.map((d, i) => (d - meanX) * (yData[i] - meanY)).reduce(sumReducer, 0);\r\n  const run = xData.map(d => (d - meanX) ** 2).reduce(sumReducer, 0);\r\n\r\n  const slope = run === 0 ? 0 : round(rise / run, options.precision);\r\n  const intercept = round(meanY - (meanX * slope), options.precision);\r\n  return [slope, intercept];\r\n}\r\n\r\n/**\r\n* The set of all fitting methods\r\n*\r\n* @namespace\r\n*/\r\nconst methods = {\r\n  linear(data, options) {\r\n    const filterData = data.filter(d => Number.isFinite(d[0]) && Number.isFinite(d[1]));\r\n    const args = getLinearArgs(filterData, options);\r\n    const slope = args[0];\r\n    const intercept = args[1];\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round((slope * x) + intercept, options.precision),\r\n    ]);\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    return {\r\n      points,\r\n      predict,\r\n      equation: [slope, intercept],\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n      string: intercept === 0 ? `y = ${slope}x` : `y = ${slope}x + ${intercept}`,\r\n    };\r\n  },\r\n\r\n  exponential(data, options) {\r\n    const filterData = data.filter(d => Number.isFinite(d[0]) && Number.isFinite(d[1]))\r\n      .map(d => [d[0], Math.log(d[1])]);\r\n    const args = getLinearArgs(filterData, options);\r\n    const slope = args[0];\r\n    const intercept = round(Math.exp(args[1]), options.precision);\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round(intercept * Math.exp(slope * x), options.precision),\r\n    ]);\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    return {\r\n      points,\r\n      predict,\r\n      equation: [intercept, slope],\r\n      string: `y = ${intercept}e^(${slope}x)`,\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n    };\r\n  },\r\n\r\n  power(data, options) {\r\n    const filterData = data.filter(d => Number.isFinite(d[0]) && Number.isFinite(d[1]))\r\n      .map(d => [Math.log(d[0]), Math.log(d[1])]);\r\n    const args = getLinearArgs(filterData, options);\r\n    const slope = args[0];\r\n    const intercept = round(Math.exp(args[1]), options.precision);\r\n\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round(round(intercept * (x ** slope), options.precision), options.precision),\r\n    ]);\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    return {\r\n      points,\r\n      predict,\r\n      equation: [intercept, slope],\r\n      string: `y = ${intercept}x^${slope}`,\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n    };\r\n  },\r\n\r\n  polynomial(data, options) {\r\n    const lhs = [];\r\n    const rhs = [];\r\n    let a = 0;\r\n    let b = 0;\r\n    const len = data.length;\r\n    const k = options.order + 1;\r\n\r\n    for (let i = 0; i < k; i++) {\r\n      for (let l = 0; l < len; l++) {\r\n        if (data[l][1] !== null) {\r\n          a += (data[l][0] ** i) * data[l][1];\r\n        }\r\n      }\r\n\r\n      lhs.push(a);\r\n      a = 0;\r\n\r\n      const c = [];\r\n      for (let j = 0; j < k; j++) {\r\n        for (let l = 0; l < len; l++) {\r\n          if (data[l][1] !== null) {\r\n            b += data[l][0] ** (i + j);\r\n          }\r\n        }\r\n        c.push(b);\r\n        b = 0;\r\n      }\r\n      rhs.push(c);\r\n    }\r\n    rhs.push(lhs);\r\n\r\n    const coefficients = gaussianElimination(rhs, k).map(v => round(v, options.precision));\r\n\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round(\r\n        coefficients.reduce((sum, coeff, power) => sum + (coeff * (x ** power)), 0),\r\n        options.precision,\r\n      ),\r\n    ]);\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    let string = 'y = ';\r\n    for (let i = coefficients.length - 1; i >= 0; i--) {\r\n      if (i > 1) {\r\n        string += `${coefficients[i]}x^${i} + `;\r\n      } else if (i === 1) {\r\n        string += `${coefficients[i]}x + `;\r\n      } else {\r\n        string += coefficients[i];\r\n      }\r\n    }\r\n\r\n    return {\r\n      string,\r\n      points,\r\n      predict,\r\n      equation: [...coefficients].reverse(),\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n    };\r\n  },\r\n};\r\n\r\nfunction createWrapper() {\r\n  const reduce = (accumulator, name) => ({\r\n    _round: round,\r\n    ...accumulator,\r\n    [name](data, supplied) {\r\n      return methods[name](data, {\r\n        ...DEFAULT_OPTIONS,\r\n        ...supplied,\r\n      });\r\n    },\r\n  });\r\n\r\n  return Object.keys(methods).reduce(reduce, {});\r\n}\r\n\r\nmodule.exports = createWrapper();\r\n\n\n//# sourceURL=webpack:///./vendor/js/wi-regression.js?");

/***/ })

/******/ });